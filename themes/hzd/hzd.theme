<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
use Drupal\Core\Url;

function hzd_preprocess_page(&$variables) {
  $user = \Drupal::currentUser();
  $headerlinks = \Drupal\block\Entity\Block::load('hzdheaderlinks');
  $variables['content']['block_headerlinks'] = \Drupal::entityManager()->getViewBuilder('block')->view($headerlinks);

  if ($user->id()) {
    $searchform = \Drupal\block\Entity\Block::load('searchform');
//    $variables['content']['block_searchform'] = \Drupal::entityManager()->getViewBuilder('block')->view($searchform);
  }
}

/*
  function hzd_preprocess_checkboxes(&$variables) {
  $element = $variables['element'];
  if($element['#name'] == 'services_effected') {
  $element = $variables['element'];
  $variables['attributes'] = array();
  if (isset($element['#id'])) {
  $variables['attributes']['id'] = $element['#id'];
  }
  if (isset($element['#attributes']['title'])) {
  $variables['attributes']['title'] = $element['#attributes']['title'];
  }
  $variables['children'] = $element['#children'];
  }
  } */

/**
 * Implements hook_preprocess_html().
 */
function hzd_preprocess_html(&$variables) {
  $user = \Drupal::currentUser()->id();
  if (!$user) {
    $variables['attributes']['class'][] = 'not-loggedin';
  }
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  if ($path_args[1] == 'user' && is_numeric($path_args[2]) && (isset($path_args[3]) && $path_args[3] == 'notifications')) {
    $variables['attributes']['class'][] = 'hzd-secondary-tabs';
  }
}

/*
  function hzd_preprocess_printable_header(&$variables) {
  global $base_url;
  $quickinfo_node = \Drupal::routeMatch()->getParameter('entity');
  $variables['unique_id'] = $quickinfo_node->get('field_unique_id')->value;
  $variables['base_path'] = $base_url;
  $variables['changed'] = date('d.m.Y', $quickinfo_node->get('changed')->value);
  $variables['author_name'] = $quickinfo_node->get('field_author_name')->value;
  }
 */

function hzd_preprocess_printable(&$variables) {
  global $base_url;
  $variables['unique_id'] = $variables['content']['#node']->get('field_unique_id')->value;
  $variables['base_path'] = $base_url;
  $variables['changed'] = date('d.m.Y', $variables['content']['#node']->get('changed')->value);
  $variables['author_name'] = $variables['content']['#node']->get('field_author_name')->value;
  if ($include_path = \Drupal::service('printable.css_include')->getCssIncludePath()) {
    $variables['include_css'] = $include_path;
  }
  $variables['content']['#theme'] = 'node__quickinfo__pdf';
  //dsm($variables['content']['#node']->get('upload')->entity->url());
  //kint($variables['content']['#node']->get('upload'));
  /* $variables['content'] = $variables['content']['#node']->toArray(); */
}

/**
 * Implements hook_preprocess_node().
 */
function hzd_preprocess_node(&$variables) {
  $config = \Drupal::config('planning.settings');
  $nid = $variables['node']->id();
  if ($nid == $config->get('mlrp')) {
    $files = get_related_files('mlrp');
    $variables['mlrp_files'] = $files;
  }
  if ($nid == $config->get('test_kalender')) {
    $files = get_related_files('test calendar');
    $variables['testcalender_files'] = $files;
  }
  if ($nid == $config->get('transkription_pp')) {
    $files = get_related_files('transcription pp');
    $variables['transkription_pp_files'] = $files;
  }
  if ($nid == $config->get('transkription_fmk')) {
    $files = get_related_files('transcription fmk');
    $variables['transkription_fmk_files'] = $files;
  }
  if ($variables['node']->getType() == 'quickinfo') {
    $url = Url::fromUserInput('/printable/pdf/node/' . $nid);
    $urldata = '<span class="user-group-list">' . \Drupal::l("RZ-Schnellinfo-Nr-" . $variables['node']->field_unique_id->value . ".pdf", $url) . '</span>';
    $variables['printfile'] = array('#markup' => '<span class="file file--mime-pdf-plain file--pdf icon-before"><span class="file-icon"><span aria-hidden="true" class="icon glyphicon glyphicon-file pdf-primary"></span></span><span class="file-link">' . $urldata . '</span><span class="file-size"></span></span>');
    $variables['changed'] = date('d.m.Y', $variables['node']->get('changed')->value);
    if (isset($variables['elements']['#revisions_table_print'])) {
      $variables['revisions_table_print'] = render($variables['elements']['#revisions_table_print']);
    }
  }
  if ($variables['node']->getType() == 'quickinfo' && !$variables['node']->isPublished()) {

    $url = URL::fromRoute('entity.node.edit_form', array('node' => $variables['node']->Id()));
    $urldata = '<span class="user-group-list">' . \Drupal::l(t('Edit'), $url) . '</span>';
    $variables['quickinfo_unpublished_edit_link'] = array('#markup' => $urldata);

    //$url = Url::fromUserInput('/entityprint/node/' . $nid);
    
    $url = Url::fromUserInput('/printable/pdf/node/' . $nid);
    $urldata = \Drupal::l("PDF preview", $url);
    $variables['pdf_priview'] = array('#markup' => $urldata);
  }
  if ($variables['node']->getType() == 'downtimes') {
    $id = $nid;
    $reasons = array(
      t('Please select a reason here'),
      t('Urgency of the maintenance'),
      t('No staff available during maintenance hours'),
      t('No service partner (State) available during maintenance hours'),
      t('External service partner required'),
      t('Internal regulations do not allow maintenances during KONSENS maintenance windows'),
      t('Public holiday or weekend'),
      t('No service partner (KONSENS) available during maintenance hours'),
      t('No service interruption planned')
    );
    $get_maintain_window = \Drupal::database()->select('downtimes', 'd');
    $get_maintain_window->fields('d', ['downtime_id', 'description', 'startdate_reported', 'state_id', 'status', 'email_reminder_sent', 'comment', 'reason', 'service_id', 'resolved', 'enddate_reported', 'startdate_planned', 'enddate_planned', 'scheduled_p', 'cancelled']);
    $get_maintain_window->addExpression("group_concat(distinct title separator ', ')", "service");
    $get_maintain_window->where('downtime_id=' . $id);
    $get_maintain_window->groupBy('d.downtime_id, d.description, d.startdate_reported, d.state_id, d.status, d.email_reminder_sent, d.comment, d.reason, d.service_id, d.resolved, d.enddate_reported, d.startdate_planned, d.enddate_planned, d.scheduled_p, d.cancelled');
    $get_maintain_window->join('node_field_data', 'n', "FIND_IN_SET(n.nid, d.service_id)");
    $result = $get_maintain_window->execute()->fetchObject();

    $incident_data = new stdClass();
    $incident_data->startdate_planned = date('d.m.Y - H:i', $result->startdate_planned) . " " . t('Uhr');
    $incident_data->service_name = $result->service;
    if (!empty($result->reason)) {
      $incident_data->reason = $reasons[$result->reason];
    }
    else {
      $incident_data->reason = '';
    }
    //$incident_data->state = $states[$result->state_id];
    $incident_data->state_id = $result->state_id;
    $incident_data->description = $result->description;
    $reporter_uid = db_query("SELECT uid FROM {node_field_data} WHERE nid = ?", array($result->downtime_id))->fetchField();
    $name = db_query("select concat(firstname,' ',lastname) as name from {cust_profile} where uid = ? ", array($reporter_uid))->fetchField();
    $incident_data->reported_by = $name;
    $incident_data->downtimes_type = ($result->scheduled_p == 0 ? t('Incident') : t('Maintenance'));
    $incident_data->enddate_planned = ($result->enddate_planned ? date('d.m.Y - H:i', $result->enddate_planned) : '') . " " . t('Uhr');
    $incident_data->startdate_reported = date('d.m.Y - H:i', $result->startdate_reported) . " " . t('Uhr');
    $incident_data->enddate_reported = ($result->enddate_reported ? date('d.m.Y - H:i', $result->enddate_reported) : '') . " " . t('Uhr');
    $resolved_data = db_query("select * from {resolve_cancel_incident} where downtime_id = ? ", array($result->downtime_id))->fetchObject();
    $resolved_name = db_query("select concat(firstname,' ',lastname) as name from {cust_profile} where uid = ? ", array($resolved_data->uid))->fetchField();
    $incident_data->resolved = $result->resolved;
    $incident_data->resolved_data = $resolved_data;
    $incident_data->resolved_data->name = $resolved_name;
    $incident_data->cancelled = $result->cancelled;
    $state_ids = db_query("SELECT Group_concat(DISTINCT state SEPARATOR', ') FROM {states} WHERE id IN (?)", array($result->state_id))->fetchField();
    $incident_data->state = $state_ids;
    $variables['revisions'] = downtimes_revisions($nid);
    $variables['incident'] = $incident_data;
  }
  if ($variables['node']->getType() == 'problem') {
     $variables['problem_text'] = $variables['node']->body->value;

    $variables['ticketstore_count'] = $variables['node']->get('field_ticketstore_count')->value;
    $variables['ticketstore_link'] = $variables['node']->get('field_ticketstore_link')->value;
    if (empty($variables['ticketstore_count']) || $variables['ticketstore_count'] == 0) {
       $variables['ticketstore_html'] = t('No attachments available');
    } else {
       $att_html = $ticketstore_count>1?"attachments":"attachment"; 
       $variables['ticketstore_html'] = t("<a href=$ticketstore_link>" . t("Link to Ticketstore") . " ($ticketstore_count ". t("$att_html available") . ")</a>");
    }
    
    $variables['erroffnet_value'] = date('d.m.Y', $variables['node']->get('field_problem_eroffnet')->value);
    $serialized_data = unserialize($_SESSION['problems_query']);

    if ($serialized_data['nid']) {
      $url = Url::fromRoute('problem_management.problems', array('group' => 31));
      $variables['back_to_search'] = \Drupal::service('link_generator')->generate(t('Back To Search'), $url);
    }
    else {
      $url = Url::fromRoute('problem_management.problems', array('group' => 31));
      $link = \Drupal::service('link_generator')->generate(t('Back To Search'), $url);
      $variables['back_to_search'] = \Drupal::service('link_generator')->generate(t('Back To Search'), $url);
    }
  }
}

function custom_user_fullname($uid) {
  $query = "select concat(firstname, ' ', lastname) from {cust_profile} where uid = ?";
  $user_fullname = db_query($query, array($uid))->fetchField();
  return $user_fullname;
}
use Drupal\Component\Datetime\DateTimePlus;

function downtimes_revisions($node) {
  $query = db_query("SELECT * FROM {downtimes_logs} WHERE downtime_id = ? ORDER BY id DESC", array($node))->fetchAll();
  if (empty($query)) {
    return;
  }
  foreach ($query as $value) {
    $value = (array) $value;
    $output .= "<div class='changed-group'><u>Änderung - " . custom_user_fullname($value['uid']) . ' ' . date('d.m.Y - H:i', $value['updated']) . ' Uhr</u>';
    $log_values = unserialize($value['log']);
    foreach ($log_values as $name => $field_value) {
      $output .= "<div class ='field-wrapper'>";
      $name = str_replace("_", " ", $name);
      if ($name == 'non compliance' || $name == 'end date' || $name == 'start date') {
        if ($field_value['old'] || $field_value['new']) {
          $output .= t($name);
        }
        if ($field_value['old'] && $field_value['new']) {
          # $output .= 'geändert von' . " <b>" . t("from") . " </b>" . t($field_value['old']) . "<b> " . t("to") . " </b>" . t($field_value['new']);
          $output .= ' (alt): ' . DateTimePlus::createFromTimestamp($field_value['old'])->format('d.m.Y-H:i') . '<br>' . t("$name") . ' (neu): ' . DateTimePlus::createFromTimestamp($field_value['new'])->format('d.m.Y-H:i');
        }
        else if ($field_value['old'] && !$field_value['new']) {
          $output .= ' ' . t("(entfernt)");
        }
        else if (!$field_value['old'] && $field_value['new']) {
          $output .= t(" (neu): ") . "</b>" . DateTimePlus::createFromTimestamp($field_value['new'])->format('d.m.Y-H:i');
        }
      }
      else {
        $output .= t("$name") . ' (alt): ' . ($field_value['old']) . '<br>' . t("$name") . ' (neu): ' . ($field_value['new']);
      }
      $output .= "</div>";
    }
    $output .= '</div>';
  }
  return $output;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function hzd_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $config = \Drupal::config('planning.settings');
  if (in_array('node__' . $config->get('mlrp') . '__full', $suggestions)) {
    $suggestions[] = 'node__mlrp';
  }
  if (in_array('node__' . $config->get('test_kalender') . '__full', $suggestions)) {
    $suggestions[] = 'node__test_kalender';
  }
  if (in_array('node__' . $config->get('transkription_pp') . '__full', $suggestions)) {
    $suggestions[] = 'node__transkription_pp';
  }
  if (in_array('node__' . $config->get('transkription_fmk') . '__full', $suggestions)) {
    $suggestions[] = 'node__transkription_fmk';
  }
}

/**
 * Implements hook_preprocess_user().
 */
function hzd_preprocess_user(&$variables) {
//  $db = \Drupal::database();
//  $result = $db->select('cust_profile', 'cp')
//      ->fields('cp', array('firstname', 'lastname', 'phone', 'position', 'state_id'))
//      ->condition('cp.uid', $variables['user']->id());
//  $val = $result->execute()->fetchAssoc();
//  $state = $db->select('states', 's')
//      ->fields('s', array('state'))
//      ->condition('s.id', $val['state_id'], '=');
//  $state_name = $state->execute()->fetchField();
//  $variables['name'] = $variables['user']->getDisplayName();
//  $variables['firstname'] = $val['firstname'];
//  $variables['lastname'] = $val['lastname'];
//  $variables['phone'] = $val['phone'];
//  $variables['position'] = $val['position'];
//  $variables['email'] = $variables['user']->getEmail();
//  $variables['state'] = $state_name;
//  $variables['group_list'] = hzd_group_list($variables['user']->id());
}