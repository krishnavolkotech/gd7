<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
use Drupal\Core\Url;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Template\Attribute;

function hzd_preprocess_page(&$variables) {
    $user = \Drupal::currentUser();
    $headerlinks = \Drupal\block\Entity\Block::load('hzdheaderlinks');
    $variables['content']['block_headerlinks'] = \Drupal::entityManager()->getViewBuilder('block')->view($headerlinks);
    
    if ($user->id()) {
//    $searchform = \Drupal\block\Entity\Block::load('searchform');
//    $variables['content']['block_searchform'] = \Drupal::entityManager()->getViewBuilder('block')->view($searchform);
    }
}

/*
  function hzd_preprocess_checkboxes(&$variables) {
  $element = $variables['element'];
  if($element['#name'] == 'services_effected') {
  $element = $variables['element'];
  $variables['attributes'] = array();
  if (isset($element['#id'])) {
  $variables['attributes']['id'] = $element['#id'];
  }
  if (isset($element['#attributes']['title'])) {
  $variables['attributes']['title'] = $element['#attributes']['title'];
  }
  $variables['children'] = $element['#children'];
  }
  } */

/**
 * Implements hook_preprocess_html().
 */
function hzd_preprocess_html(&$variables) {
    $user = \Drupal::currentUser()->id();
    if (!$user) {
        $variables['attributes']['class'][] = 'not-loggedin';
    }
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    if ($path_args[1] == 'user' && is_numeric($path_args[2]) && (isset($path_args[3]) && $path_args[3] == 'notifications')) {
        $variables['attributes']['class'][] = 'hzd-secondary-tabs';
    }
}

/*
  function hzd_preprocess_printable_header(&$variables) {
  global $base_url;
  $quickinfo_node = \Drupal::routeMatch()->getParameter('entity');
  $variables['unique_id'] = $quickinfo_node->get('field_unique_id')->value;
  $variables['base_path'] = $base_url;
  $variables['changed'] = date('d.m.Y', $quickinfo_node->get('changed')->value);
  $variables['author_name'] = $quickinfo_node->get('field_author_name')->value;
  }
 */

function hzd_preprocess_printable(&$variables) {
    global $base_url;
    $variables['unique_id'] = $variables['content']['#node']->get('field_unique_id')->value;
    $variables['base_path'] = $base_url;
    $variables['changed'] = date('d.m.Y', $variables['content']['#node']->get('changed')->value);
    $variables['author_name'] = $variables['content']['#node']->get('field_author_name')->value;
    if ($include_path = \Drupal::service('printable.css_include')->getCssIncludePath()) {
        $variables['include_css'] = $include_path;
    }
    $variables['content']['#theme'] = 'node__quickinfo__pdf';
    //dsm($variables['content']['#node']->get('upload')->entity->url());
    //kint($variables['content']['#node']->get('upload'));
    /* $variables['content'] = $variables['content']['#node']->toArray(); */
}

/**
 * Implements hook_preprocess_node().
 */
function hzd_preprocess_node(&$variables) {
    $config = \Drupal::config('planning.settings');
    $nid = $variables['node']->id();
    if ($nid == $config->get('mlrp')) {
        $files = get_related_files('mlrp');
        $variables['mlrp_files'] = $files;
    }
    if ($nid == $config->get('test_kalender')) {
        $files = get_related_files('test calendar');
        $variables['testcalender_files'] = $files;
    }
    if ($nid == $config->get('transkription_pp')) {
        $files = get_related_files('transcription pp');
        $variables['transkription_pp_files'] = $files;
    }
    if ($nid == $config->get('transkription_fmk')) {
        $files = get_related_files('transcription fmk');
        $variables['transkription_fmk_files'] = $files;
    }
    if ($variables['node']->getType() == 'quickinfo') {
        $url = Url::fromUserInput('/printable/pdf/node/' . $nid);
        $urldata = '<span class="user-group-list">' . \Drupal::l("RZ-Schnellinfo-Nr-" . $variables['node']->field_unique_id->value . ".pdf", $url) . '</span>';
        if ($variables['node']->isPublished()) {
            $variables['printfile'] = array('#markup' => '<span class="file file--mime-pdf-plain file--pdf icon-before"><span class="file-icon"><span aria-hidden="true" class="icon glyphicon glyphicon-file pdf-primary"></span></span><span class="file-link">' . $urldata . '</span><span class="file-size"></span></span>');
        }
        $variables['changed'] = date('d.m.Y', $variables['node']->get('changed')->value);
        if (isset($variables['elements']['#revisions_table_print']) && count($variables['elements']['#revisions_table_print']['node_revisions_table']['#rows']) > 1) {
            $variables['revisions_table_print'] = render($variables['elements']['#revisions_table_print']);
        }
    }
    if ($variables['node']->getType() == 'quickinfo' && !$variables['node']->isPublished()) {
        
        $url = URL::fromRoute('entity.node.edit_form', array('node' => $variables['node']->Id()));
        $urldata = '<span class="user-group-list">' . \Drupal::l(t('Edit'), $url) . '</span>';
        $variables['quickinfo_unpublished_edit_link'] = array('#markup' => $urldata);
        
        //$url = Url::fromUserInput('/entityprint/node/' . $nid);
        
       /* $url = Url::fromUserInput('/printable/pdf/node/' . $nid);
        $urldata = \Drupal::l("PDF preview", $url);
        $variables['pdf_priview'] = array('#markup' => $urldata);*/
    }
    if ($variables['node']->getType() == 'downtimes') {
        $id = $nid;
        $reasons = array(
            t('Please select a reason here'),
            t('Urgency of the maintenance'),
            t('No staff available during maintenance hours'),
            t('No service partner (State) available during maintenance hours'),
            t('External service partner required'),
            t('Internal regulations do not allow maintenances during KONSENS maintenance windows'),
            t('Public holiday or weekend'),
            t('No service partner (KONSENS) available during maintenance hours'),
            t('No service interruption planned')
        );
        $get_maintain_window = \Drupal::database()->select('downtimes', 'd');
        $get_maintain_window->fields('d', ['downtime_id', 'description', 'startdate_reported', 'state_id', 'status', 'email_reminder_sent', 'comment', 'reason', 'service_id', 'resolved', 'enddate_reported', 'startdate_planned', 'enddate_planned', 'scheduled_p', 'cancelled']);
        $get_maintain_window->addExpression("group_concat(distinct title separator ', ')", "service");
        $get_maintain_window->where('downtime_id=' . $id);
        $get_maintain_window->groupBy('d.downtime_id, d.description, d.startdate_reported, d.state_id, d.status, d.email_reminder_sent, d.comment, d.reason, d.service_id, d.resolved, d.enddate_reported, d.startdate_planned, d.enddate_planned, d.scheduled_p, d.cancelled');
        $get_maintain_window->join('node_field_data', 'n', "FIND_IN_SET(n.nid, d.service_id)");
        $result = $get_maintain_window->execute()->fetchObject();
        
        $incident_data = new stdClass();
        $incident_data->startdate_planned = date('d.m.Y - H:i', $result->startdate_planned) . " " . t('Uhr');
        $incident_data->service_name = $result->service;
//    $incident_data->service_name = [
//      '#items' => explode(',', $result->service),
//      '#theme' => 'item_list',
//      '#type' => 'ul',
//    ];
        if (!empty($result->reason)) {
            $incident_data->reason = $reasons[$result->reason];
        } else {
            $incident_data->reason = '';
        }
        //$incident_data->state = $states[$result->state_id];
        $incident_data->state_id = $result->state_id;
        $incident_data->description = $result->description;
        $reporter_uid = db_query("SELECT uid FROM {node_field_data} WHERE nid = ?", array($result->downtime_id))->fetchField();
        $name = db_query("select concat(firstname,' ',lastname) as name from {cust_profile} where uid = ? ", array($reporter_uid))->fetchField();
        $incident_data->reported_by = $name;
        $incident_data->downtimes_type = ($result->scheduled_p == 0 ? t('Incident') : t('Maintenance'));
        $incident_data->enddate_planned = ($result->enddate_planned ? date('d.m.Y - H:i', $result->enddate_planned) . " " . t('Uhr') : '');
        $incident_data->startdate_reported = date('d.m.Y - H:i', $result->startdate_reported) . " " . t('Uhr');
//    $incident_data->enddate_reported = ($result->enddate_reported ? date('d.m.Y - H:i', $result->enddate_reported) . " " . t('Uhr') : '');

//   dpm( date('d.m.Y - H:i', $result->enddate_planned));
//  dpm( date('d.m.Y - H:i', $result->enddate_reported));

//    if (isset($result->enddate_reported) && $result->enddate_reported != '') {
//      $incident_data->enddate_planned = ($result->enddate_reported ? date('d.m.Y - H:i', $result->enddate_reported) . " " . t('Uhr') : '');
//    }
        $resolved_data = db_query("select * from {resolve_cancel_incident} where downtime_id = ? ", array($result->downtime_id))->fetchObject();
// dpm($resolved_data->end_date);
        if (!empty($resolved_data)) {
            $resolved_name = db_query("select concat(firstname,' ',lastname) as name from {cust_profile} where uid = ? ", array($resolved_data->uid))->fetchField();
            $incident_data->resolved_data = $resolved_data;
            $incident_data->resolved_data->name = $resolved_name;
        }
        
        if (isset($resolved_data->end_date) && $resolved_data->end_date != '') {
            $incident_data->enddate_planned = ($resolved_data->end_date ? date('d.m.Y - H:i', $resolved_data->end_date) . " " . t('Uhr') : '');
        }
        
        $incident_data->resolved = $result->resolved;
        $incident_data->cancelled = $result->cancelled;
        $incident_data->reason = !empty($result->reason) ? $reasons[$result->reason] : '';
        $incident_data->description = !is_null($result->description) ? t($result->description) : '';
        $statesArray = \Drupal::database()->select('states', 's');
        $statesArray->addExpression("concat(s.state,' (',s.abbr,')')", "state");
        $statesArray = $statesArray->condition('s.id', explode(',', $result->state_id), 'IN')
            ->execute()
            ->fetchCol();
        //$state_ids = db_query("SELECT Group_concat(DISTINCT state SEPARATOR', ') FROM {states} WHERE id IN (?)", array($result->state_id))->fetchAssoc();
//    $incident_data->state = [
//      '#items' => $statesArray,
//      '#theme' => 'item_list',
//      '#type' => 'ul',
//    ];
        //pr($result);
        $incident_data->state = trim(implode(', ', $statesArray), ',');
        $variables['revisions'] = downtimes_revisions($nid);
        $variables['incident'] = $incident_data;
        $groupContent = \Drupal\cust_group\CustGroupHelper::getGroupNodeFromNodeId($id);
        $groupId = INCIDENT_MANAGEMENT;
        if ($groupContent) {
            $groupId = $groupContent->getGroup()->id();
        }
        $url = Url::fromRoute('downtimes.new_downtimes_controller_newDowntimes', array('group' => $groupId), ['attributes' => ['class' => ['back-search']], 'query' => \Drupal::request()->query->all()]);
        $variables['back_to_search'] = \Drupal::service('link_generator')->generate(t('Back To Search'), $url);
    }
    if ($variables['node']->getType() == 'problem') {
        $variables['problem_text'] = $variables['node']->body->value;
        
        $variables['ticketstore_count'] = $variables['node']->get('field_ticketstore_count')->value;
        $variables['ticketstore_link'] = $variables['node']->get('field_ticketstore_link')->value;
        if (empty($variables['ticketstore_count']) || $variables['ticketstore_count'] == 0) {
            $variables['ticketstore_html'] = t('No attachments available');
        } else {
            $att_html = $ticketstore_count > 1 ? "attachments" : "attachment";
            $variables['ticketstore_html'] = t("<a href=$ticketstore_link>" . t("Link to Ticketstore") . " ($ticketstore_count " . t("$att_html available") . ")</a>");
        }
        
        $variables['erroffnet_value'] = date('d.m.Y', $variables['node']
            ->get('field_problem_eroffnet')->value);
        
        $filter_parameter = \Drupal\problem_management\HzdStorage::get_problem_filters();
        
        $url = Url::fromRoute('problem_management.problems', array(
            'group' => PROBLEM_MANAGEMENT
        ),
            array(
                'query' => array(
                    $filter_parameter
                )
            )
        );
        $variables['back_to_search'] = \Drupal::service('link_generator')
            ->generate(t('Back To Search'), $url);
        
    }
    
    // Adds class to view pdf link.
    if (isset($variables['content']['entity_print_view'])) {
        $variables['content']['entity_print_view']['#attributes'] = ['class' => ['entity_print_view']];
        //pr($variables['content']['entity_print_view']);exit;
    }
}

function hzd_preprocess_breadcrumb(&$variables) {
    // This breadcrumb will apply only for our view at /group/24/address
    $route = \Drupal::routeMatch()->getRouteName();
    if ($route == 'view.group_members_lists.page_1') {
        // Unsetting the third link since this is because of glossary contextual filter and view name is repeated twice in breadcrumb.
        /**
         * @todo: Doing a hack of unsetting 2nd instead of 3rd link. Need to explore how to set a active trail in breadcrumb.
         * Help Link: https://www.previousnext.com.au/blog/making-drupal-8s-menu-active-trail-consider-query-arguments
         */
        if (count($variables['breadcrumb']) == 4) {
            unset($variables['breadcrumb'][2]);
        }
    }


//  $block = \Drupal\block\Entity\Block::load('printlinks');
//  if(isset($block)){
//    $block_view = \Drupal::entityManager()->getViewBuilder('block')->view($block);
//    $variables['breadcrumb']['entity_print_block'] = $block_view;
//  }
    // Embedding the add to favorites block in breadcrumb.
//    $rightData['extras'] = ['#type'=>'container','#attributes'=>['class'=>['test']]];
    $variables['breadcrumb']['extras'] = ['#type'=>'container','#attributes'=>['class'=>['print-action-wrapper']]];
    $block = \Drupal\block\Entity\Block::load('addtofavorites');
    if (isset($block)) {
        $block_view = \Drupal::entityManager()->getViewBuilder('block')->view($block);
        $block_view['#weight'] = 1;
        $variables['breadcrumb']['extras']['add_fav_form'] = $block_view;
    }
    $routeName = \Drupal::routeMatch()->getRouteName();
    $groupContent = \Drupal::routeMatch()->getParameter('group_content');
    if ($groupContent) {
        $pdfLink = ['#type'=>'container','#attributes'=>['class'=>['unpublished-quickinfo-pdf-preview']],'#weight'=>2];
        $pdfLink['link'] = ['#type' => 'link', '#url' => Url::fromRoute('entity_print.view', ['export_type' => 'pdf', 'entity_type'=>'node','entity_id'=>$groupContent->get('entity_id')->referencedEntities()[0]->id()]),'#title'=>'PDF'];
        $variables['breadcrumb']['extras']['pdf_print'] = $pdfLink;
    }
    if($routeName == 'entity.group.canonical'){
        $group = \Drupal::routeMatch()->getParameter('group');
        $pdfLink = ['#type'=>'container','#attributes'=>['class'=>['unpublished-quickinfo-pdf-preview']],'#weight'=>2];
        $pdfLink['link'] = ['#type' => 'link', '#url' => Url::fromRoute('entity_print.view', ['export_type' => 'pdf', 'entity_type'=>$group->getEntityTypeId(),'entity_id'=>$group->id()]),'#title'=>'PDF'];
        $variables['breadcrumb']['extras']['pdf_print'] = $pdfLink;
    }
//    $variables['breadcrumb'][] = $rightData;
//    pr(($variables['breadcrumb']));exit;
}

function custom_user_fullname($uid) {
    $query = "select concat(firstname, ' ', lastname) from {cust_profile} where uid = ?";
    $user_fullname = db_query($query, array($uid))->fetchField();
    return $user_fullname;
}

use Drupal\Component\Datetime\DateTimePlus;

function downtimes_revisions($node) {
    $labels = ['non_compliance' => t('Grund für die Wartung der Wartungsfenster'), 'start_date' => t('Beginn'), 'end_date' => t('Ende'), 'services' => t('Verfahren'), 'states' => t('Land/System'), 'reason' => t('Beschreibung')];
    $order = ['services' => 1, 'states' => 2, 'start_date' => 3, 'end_date' => 4, 'non_compliance' => 5, 'reason' => 6];
    $renderService = \Drupal::service('renderer');
    $query = db_query("SELECT * FROM {downtimes_logs} WHERE downtime_id = ? ORDER BY id DESC", array($node))->fetchAll();
    if (empty($query)) {
        return;
    }
    $output = null;
    $itemCount = 1;
    foreach ($query as $value) {
        if ($itemCount == count($query)) {
            $text = 'Erstellt';
        } else {
            $text = 'Geändert';
        }
        $itemCount++;
        $value = (array)$value;
        $output .= "<div class='changed-group'><span class='downtimes-view-updated'>" . $text . " von " . custom_user_fullname($value['uid']) . ' am ' . date('d.m.Y - H:i', $value['updated']) . ' Uhr</span>';
        $log_values = unserialize($value['log']);
        $logData = [];
        $reason = '';
        foreach ($log_values as $name => $field_value) {
            if ($name == 'reason') {
                $reason = $field_value['new'];
            }
            if (in_array($name, ['non_compliance', 'services', 'states'])) {
                $logData[$order[$name]] = $labels[$name] . ': ' . $field_value['new'];
            }
            if (in_array($name, ['start_date', 'end_date'])) {
                if (!empty($field_value['new']))
                    $logData[$order[$name]] = $labels[$name] . ': ' . DateTimePlus::createFromTimestamp((integer)$field_value['new'])->format('d.m.Y - H:i') . ' Uhr';
            }
        }
/////appending the reason as a seperate wrapper to preserve wyswyg styles
        if (!empty($reason))
            $logData[$order['reason']] = t("@label: ", ['@label' => $labels['reason']]);
        ksort($logData);
        $items = [
            '#items' => $logData,
            '#theme' => 'item_list',
            '#type' => 'ul',
        ];
        $output .= "<div class ='field-wrapper'>";
        $markup = $renderService->render($items);
        $output .= $markup . '</div>';
        if (!empty($reason))
            $output .= '<div class="reason">' . trim($reason) . '</div>';
        $output .= '</div>';
    }
    return $output;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function hzd_theme_suggestions_node_alter(array &$suggestions, array $variables) {
    $config = \Drupal::config('planning.settings');
    if (in_array('node__' . $config->get('mlrp') . '__full', $suggestions)) {
        $suggestions[] = 'node__mlrp';
    }
    if (in_array('node__' . $config->get('test_kalender') . '__full', $suggestions)) {
        $suggestions[] = 'node__test_kalender';
    }
    if (in_array('node__' . $config->get('transkription_pp') . '__full', $suggestions)) {
        $suggestions[] = 'node__transkription_pp';
    }
    if (in_array('node__' . $config->get('transkription_fmk') . '__full', $suggestions)) {
        $suggestions[] = 'node__transkription_fmk';
    }
}

/**
 * Implements hook_preprocess_user().
 */
function hzd_preprocess_user(&$variables) {
//  $db = \Drupal::database();
//  $result = $db->select('cust_profile', 'cp')
//      ->fields('cp', array('firstname', 'lastname', 'phone', 'position', 'state_id'))
//      ->condition('cp.uid', $variables['user']->id());
//  $val = $result->execute()->fetchAssoc();
//  $state = $db->select('states', 's')
//      ->fields('s', array('state'))
//      ->condition('s.id', $val['state_id'], '=');
//  $state_name = $state->execute()->fetchField();
//  $variables['name'] = $variables['user']->getDisplayName();
//  $variables['firstname'] = $val['firstname'];
//  $variables['lastname'] = $val['lastname'];
//  $variables['phone'] = $val['phone'];
//  $variables['position'] = $val['position'];
//  $variables['email'] = $variables['user']->getEmail();
//  $variables['state'] = $state_name;
//  $variables['group_list'] = hzd_group_list($variables['user']->id());
}

function hzd_preprocess_menu_local_tasks(&$vars) {
    
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!empty($node) && $node->getType() == 'downtimes') {
        unset($vars['primary']['entity.node.edit_form']);
        unset($vars['primary']['entity.node.delete_form']);
    }
}

function hzd_preprocess_views_view_summary_unformatted(&$variables) {
    $view = $variables['view'];
    if ($view->id() == 'group_members_lists' && $view->current_display == 'attachment_1') {
        // Adding the all link to glossary
        
        $active_urls = array(
            // Force system path.
            \Drupal::url('<current>', [], ['alias' => TRUE]),
            // Could be an alias.
            \Drupal::url('<current>'),
        );
        $active_urls = array_combine($active_urls, $active_urls);
        
        $url_options = array();
        $args = $view->args;
        if (!empty($view->exposed_raw_input)) {
            $url_options['query'] = $view->exposed_raw_input;
        }
        $view_url = $view->getUrl($args)->setOptions($url_options);
        
        $all_terms = new stdClass();
        $all_terms->url = $view_url->toString();
        $all_terms->separator = Xss::filterAdmin($variables['options']['separator']);
        $all_terms->active = isset($active_urls[$all_terms->url]);
        $all_terms->link = t('All');
        $all_terms->attributes = new Attribute(array());
        
        $variables['rows'][] = $all_terms;
    }
}
