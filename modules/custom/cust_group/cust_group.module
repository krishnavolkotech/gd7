<?php

/**
 * @file
 * $Id$.
 */

define('SITE_ADMIN', 5);
define('RELEASE_MANAGEMENT', 32);

// define('QUICKINFO', variable_get('quickinfo_group_id', NULL));.
define('MAINTENANCE_GROUP_ID', \Drupal::config('downtimes.settings')->get('maintenance_group_id'));


function cust_group_user_view(&$build,\Drupal\user\Entity\User $account, Drupal\Core\Entity\Entity\EntityViewDisplay $display, $view_mode) {
    $build['group_list'] = array(
      '#markup' => hzd_group_list($account->id()), 
      '#cache'=>['max-age'=>0]
    );
//    pr(array_keys($build));exit;
  //}
}


function cust_group_node_update($entity){
    if($entity instanceof \Drupal\node\Entity\Node){
      sendGroupUpdateMail($entity);
      //exit;
      //capture the notification for the users to send daily and weekly
      \Drupal\cust_group\Controller\NotificationsController::recordContentAlter($entity);
    }
}



function cust_group_group_content_insert($entity){
    $node = $entity->getEntity();
    if($entity instanceof \Drupal\node\Entity\Node){
        sendGroupUpdateMail($node);
        //capture the notification for the users to send daily and weekly
        \Drupal\cust_group\Controller\NotificationsController::recordContentAlter($entity);
    }
}

function sendGroupUpdateMail($entity){
    $group = \Drupal\cust_group\Controller\CustNodeController::getNodeGroupId($entity);
//    pr($group);exit;
    if(!empty($group) && $group['gid']){
        $getUserMailList = getGroupMemberList($group['gid']);
        send_notifications($group,$getUserMailList);
    }
}

function getGroupMemberList($gid){
    $uids = \Drupal::database()->select('group_notifications_user_default_interval','gnudi')
        ->fields('gnudi',['uid'])
        ->condition('gnudi.group_id',$gid,'=')
        ->condition('gnudi.default_send_interval','0','=')
        ->execute()->fetchAll();
        $users = [];
    foreach($uids as $uid){
        $users[] = $uid->uid;
    }
    $userMails = [];
    if(!empty($users)){
        $emails = \Drupal::database()->select('users_field_data','ufd')
            ->fields('ufd',['uid','mail'])
            ->condition('uid',$users,'IN')
            ->execute()->fetchAll();
        foreach($emails as $mail){
            $userMails[$mail->uid] = $mail->mail;
        }
    }
    return $userMails;
}

function send_notifications($data,$mails){
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'cust_group';
    $key = 'immediate_notifications';
    //$mails = \Drupal::currentUser()->getEmail().',sandeep@azrisolutions.com';
    $groupContent = \Drupal\group\Entity\GroupContent::load($data['id']);
    $params['subject'] = "Aktualisiert - Seite: ".$groupContent->label();
    $params['message'] = 'Ein Inhalt im Betriebsportal KONSENS wurde aktualisiert. Sie können sich die Änderungen ansehen, indem Sie auf den folgenden Link klicken:';
    global $base_url;
    $url = $base_url.'/group/'.$data['gid'].'/node/'.$data['id'];
    $params['message'] .= '<br><br>'.$url;
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;
    foreach($mails as $to){
        $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    }
    if ($result['result'] !== true) {
      drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
    }
    else {
      drupal_set_message(t('Your message has been sent.'));
    }
    
}

use Drupal\Component\Utility\SafeMarkup;
function cust_group_mail($key, &$message, $params) {
 $options = array(
   'langcode' => $message['langcode'],
 );
 switch ($key) {
    case 'immediate_notifications':
    case 'periodic_notifications':
        $message['from'] = \Drupal::config('system.site')->get('mail');
        $message['subject'] = t($params['subject'], $options);
        $message['body'][] = SafeMarkup::checkPlain(t($params['message']));
        break;
 }
}

function cust_group_mail_alter(&$message){
    switch ($message['key']) {
        case 'immediate_notifications':
        case 'periodic_notifications':
            $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
            break;
    }
}

function cust_group_form_alter(&$form, $form_state,$form_id){
    //echo $form_id;exit;
    //pr($form_state->redirect);exit;
    switch ($form_id){
        case 'node_faqs_gnode-form_form':
        case 'node_faqs_edit_form':
            $group = \Drupal::routeMatch()->getParameter('group');
            if(empty($group)){
                $node = \Drupal::routeMatch()->getParameter('node');
                $groupId = \Drupal\cust_group\Controller\CustNodeController::getNodeGroupId($node);
                $group = \Drupal\group\Entity\Group::load($groupId['gid']);
            }
            $categoryQuery = \Drupal::entityQuery('taxonomy_term')
                ->condition('name',$group->label())
                ->condition('vid','faq_kategorie')
                ->execute();
            $parentId = array_values($categoryQuery)[0];
            $categoryTerms = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadTree('faq_kategorie', $parentId, 1);
            $categoryOptions['_none'] = t('Select Kategorie');
            foreach($categoryTerms as $term){
                $categoryOptions[$term->tid] = $term->name;
            }
            $form['faq_kategorie']['widget']['#options'] = $categoryOptions;
            $pageQuery = \Drupal::entityQuery('taxonomy_term')
                ->condition('name',$group->label())
                ->condition('vid','faq_seite')
                ->execute();
            $parentId = array_values($pageQuery)[0];
            $pageTerms = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadTree('faq_seite', $parentId, 1);
            $pageOptions['_none'] = t('Select Seite');
            foreach($pageTerms as $pageTerm){
                $pageOptions[$pageTerm->tid] = $pageTerm->name;
            }
            $form['faq_seite']['widget']['#options'] = $pageOptions;
            break;
    }
}

function cust_group_views_pre_render($view) {
   // && $view->getDisplay()->display['id'] == 'group_faq_block'
  if ($view->id() == 'group_faqs') {
    $groupId = \Drupal::routeMatch()->getParameter('arg_0');
    $group = \Drupal\group\Entity\Group::load($groupId);
    $view->build_info['title'] = $group->label()." - ".$view->build_info['title'];
  }
}

function cust_group_file_validate(Drupal\file\FileInterface $file){
    $errors = [];
    $fileName = $file->getFilename();
    $check = \Drupal::entityQuery('file')
        ->condition('filename',$fileName)
        ->condition('status',1)
        ->execute();
        //pr(count($check));exit;
    if(count($check) > 1){
        $errors[] = t("The file's name already exists in database.");
    }
    return $errors;
}
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;
function cust_group_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode){
    //pr($entity->bundle());exit;
    $plannigFileRef = array(1048=>"mlrp",658=>"test calendar",1049=>"transcription pp",785=>"transcription fmk");
    if(in_array($entity->id(),array_keys($plannigFileRef))){
        $items = get_planning_file_data($plannigFileRef[$entity->id()]);
        $build['planning_file_data'] = ['#prefix'=>'<strong>Dataen</strong>:',
                                        '#items'=>$items,
                                        '#theme'=>'item_list',
                                        '#type'=>'ul',
                                        '#weight'=>100,
                                        ];
    }elseif('planning_files' == $entity->bundle() && 0){
        global $base_url;
        header('Location: '.$base_url.\Drupal::url('hzd_release_management.display_planning_files',['group'=>32]));
        exit;
    }
    if($entity->getType() == 'quickinfo'){
        //\Drupal\cust_group\Controller\NotificationsController::recordContentAlter($entity);
    }
    
    //exit;
}

function get_planning_file_data($type){
    $plannigFileNodeIds = \Drupal::entityQuery('node')
            ->condition('field_planning_file_type',$type)
            ->execute();
    $planningFileNodes = \Drupal\node\Entity\Node::loadMultiple(array_values($plannigFileNodeIds));
    $filenames = [];
    foreach($planningFileNodes as $node){
        $file = $node->get('field_upload_planning_file')->referencedEntities();
        if(!empty($file[0])){
            $fileUrl = $file[0]->url();
            $date = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'short');
            $filenames[] = ['#markup'=>\Drupal::service('link_generator')->generate($file[0]->getFilename(), Url::fromUri($fileUrl))->__toString().' ('.$date.')','#type'=>'markup'];
            //$filenames[] = ['file'=>Link::fromTextAndUrl($file[0]->getFilename(),  Url::fromUri($fileUrl)),
                            //'text'=>'sjdbd'];
        }
    }
    //pr($filenames);exit;
    return $filenames;
    //$filesData = 
}

function cust_group_cron(){
    //Weekly cron was registered in ./modules/custom/cust_user/cust_user.module
    //Daily cron to send notifications
    \Drupal\cust_group\Controller\NotificationsController::dailyCron();
}

function cust_group_user_delete($user){
    $groupContent = \Drupal::entityQuery('group_content')->condition('entity_id',$user->id())->execute();
    $groupUsers = \Drupal\group\Entity\GroupContent::loadMultiple($groupContent);
    foreach($groupUsers as $gUser){
        $gUser->delete();
    }
}

function cust_group_init(){
    exit;
    
}