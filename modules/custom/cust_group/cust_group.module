<?php

/**
 * @file
 * $Id$.
 */
//define('SITE_ADMIN', 5);
define('RELEASE_MANAGEMENT', 1);
define('GEPLANTE_BLOCKZEITEN', 35);
define('INCIDENT_MANAGEMENT', 2);
define('PROBLEM_MANAGEMENT', 6);
define('QUICKINFO', 32);
define('Zentrale_Release_Manager_Lander', 5);

// define('QUICKINFO', variable_get('quickinfo_group_id', NULL));.
define('MAINTENANCE_GROUP_ID', 2);

use Drupal\cust_group\Access\UserAccessControl;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\file\Entity\File;
use Symfony\Component\HttpFoundation\RedirectResponse;

function cust_group_transliteration_overrides_alter(&$overrides, $langcode) {
  $overrides[0xC4] = 'AE';
  $overrides[0xD6] = 'OE';
  $overrides[0xDC] = 'UE';
  $overrides[0xE4] = 'ae';
  $overrides[0xF6] = 'oe';
  $overrides[0xFC] = 'ue';
  $overrides[0xDF] = 'ss';
}

function cust_group_user_view(&$build, \Drupal\user\Entity\User $account, Drupal\Core\Entity\Entity\EntityViewDisplay $display, $view_mode) {
  if ($view_mode == 'full') {
    $userData = get_user_fields($account);
    foreach ($userData as $key => $val) {
      $build[$key] = [
          '#theme' => 'usercustomfield',
          '#label' => t($val['label']),
          '#value' => $val['value'],
      ];
    }
    $build['group_list'] = array(
        '#markup' => hzd_group_list($account->id()),
        '#cache' => ['max-age' => 0],
//      '#weight' => -10
    );
  }

  //}
}

function get_user_fields($user) {
  $db = \Drupal::database();
  $result = $db->select('cust_profile', 'cp')
          ->fields('cp', array(
              'firstname',
              'lastname',
              'phone',
              'position',
              'state_id'
          ))
          ->condition('cp.uid', $user->id());
  $val = $result->execute()->fetchAssoc();
  $state = $db->select('states', 's')
          ->fields('s', array('state'))
          ->condition('s.id', $val['state_id'], '=');
  $state_name = $state->execute()->fetchField();
  $variables['name'] = [
      'label' => 'User Name',
      'value' => $user->getUsername()
  ];
  $variables['firstname'] = [
      'label' => 'First Name',
      'value' => $val['firstname']
  ];
  $variables['lastname'] = [
      'label' => 'Last Name',
      'value' => $val['lastname']
  ];
  $variables['phone'] = ['label' => 'Phone', 'value' => $val['phone']];
  $variables['position'] = ['label' => 'Position', 'value' => $val['position']];
  $variables['email'] = ['label' => 'Email', 'value' => $user->getEmail()];
  $variables['state'] = ['label' => 'State', 'value' => $state_name];
  return $variables;
}

function cust_group_theme() {
  return array(
      'usercustomfield' => array(
          'variables' => array('label' => NULL, 'value' => NULL),
      ),
  );
}

function cust_group_node_update($entity) {
  if ($entity instanceof \Drupal\node\Entity\Node) {
    sendGroupUpdateMail($entity, 0);
    //exit;
    //capture the notification for the users to send daily and weekly
//    \Drupal\cust_group\Controller\NotificationsController::recordContentAlter($entity, 'update');
  }
}

function cust_group_node_insert($entity) {
  //  pr($entity->getType());exit;
  //capture the notification for the users to send daily and weekly
//  \Drupal\cust_group\Controller\NotificationsController::recordContentAlter($entity, 'insert');
}

function cust_group_group_insert($group) {
  $node = Node::create([
              'type' => 'group',
              'title' => $group->label(),
  ]);
  $node->save();
  $forum = Term::create([
              'name' => $group->label(),
              'vid' => 'forums'
  ]);
  $forum->save();
  $forumTerm = Term::create([
              'name' => 'Allgemeines',
              'vid' => 'forums',
              'parent' => $forum->id(),
  ]);
  $forumTerm->save();

  \Drupal::service('path.alias_storage')->delete(['source' => '/node/' . $node->id()]);
  $group->set('field_old_reference', $node->id());
  $group->set('field_forum_containers', $forum->id());
  $group->save();
  $menu = \Drupal::entityTypeManager()
          ->getStorage('menu')
          ->create([
      'id' => 'menu-' . $node->id(),
      'label' => $group->label(),
      'description' => '',
  ]);
  $menu->save();

  $items = array(
      'Allgemeines' => 'internal:/' . $group->toUrl()->getInternalPath(),
//Cannot create dummy menu links as the Menu link url validation fails
      /*    'Ansprechpartner' => '/ansprechpartner',
        'Dokumentation' => '/dokumentation',
        'FAQs' => '/faqs',
        'Reporting' => '/reporting', */
      'Forums' => 'internal:/' . Url::fromRoute('cust_group.forums', ['group' => $group->id()])->getInternalPath(),
      'Gruppenmitglieder' => 'internal:/' . Url::fromRoute('view.group_members_lists.page_1', ['group' => $group->id()])->getInternalPath(),
  );

  foreach ($items as $title => $link) {
    $menu_link = MenuLinkContent::create([
                'title' => $title,
                'link' => ['uri' => $link],
                'menu_name' => $menu->id(),
                'expanded' => TRUE,
    ]);
    $menu_link->save();
  }
}

function cust_group_group_update($entity) {
  sendGroupUpdateMail($entity, 0);
//  \Drupal\cust_group\Controller\NotificationsController::recordContentAlter($entity, 'update');
}

function cust_group_group_content_update($entity) {
  if ($entity->original->request_status->value == 0 && $entity->request_status->value == 1) {
    $group = $entity->getGroup();
    $subject = t("Membership Request for a Group - @groupLabel has been accepted", ['@groupLabel' => $group->label()]);
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'cust_group';
    $key = 'immediate_notifications';
    $params['subject'] = $subject;
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $send = TRUE;
    $user = $entity->get('entity_id')->referencedEntities()[0];
    $params['message'] = t('Dear @user,<br><br>Membership Request for Group @groupLink has been approved.', [
        '@user' => $user->getDisplayName(),
        '@groupLink' => $group->toLink($group->label(), 'canonical', ['absolute' => 1])
                ->toString()
    ]);
    $result = $mailManager->mail($module, $key, $user->getEmail(), $langcode, $params, NULL, $send);
    if ($result['result']) {
      drupal_set_message(t('Mail sent.'), 'status');
    }
  }
  \Drupal::service('cache_tags.invalidator')
          ->invalidateTags(['config:block.block.hzd_local_tasks']);
}

function cust_group_group_content_delete() {
  \Drupal::service('cache_tags.invalidator')
          ->invalidateTags(['config:block.block.hzd_local_tasks']);
}

function cust_group_group_content_insert($entity) {
  $node = $entity->getEntity();
  if ($node instanceof \Drupal\node\Entity\Node) {
    sendGroupUpdateMail($node, 1);
//    \Drupal\cust_group\Controller\NotificationsController::recordGroupContentInsert($node, 'insert');
    /* if ($node->getType() == 'page') {
      \Drupal\cust_group\Controller\GroupTriggerController::addPageToGroupMenu($entity);
      } */
  }
}

function sendGroupUpdateMail($entity, $isNew = 1) {

  $dont_send_notification = \Drupal::request()->request->get('node_notification_checkbox');
  if (!isset($dont_send_notification) || $dont_send_notification != 1) {
    if ($entity->getEntityTypeId() == 'group') {
      $group = $entity->id();
    } else {
      $groupContentId = \Drupal\cust_group\Controller\CustNodeController::getNodeGroupId($entity);
      if ($groupContentId) {
        $group = $groupContentId->getGroup()->id();
      }
    }
//    pr($group);exit;
    if (!empty($group) && $group && (in_array($entity->bundle(), [
                'event',
                'forum',
                'page',
                'faqs'
            ]) || $entity->getEntityTypeId() == 'group')
    ) {
      $getUserMailList = getGroupMemberList($group);
      send_notifications($entity, $getUserMailList, $isNew);
    }
  }
}

function getGroupMemberList($gid) {
  $group = \Drupal\group\Entity\Group::load($gid);
  $uids = \Drupal::database()->select('group_notifications', 'gnudi')
                  ->fields('gnudi', ['uids'])
                  ->condition('gnudi.group_id', $gid, '=')
                  ->condition('gnudi.send_interval', '0', '=')
                  ->execute()->fetchField();
  $users = [];
  if (!empty($uids)) {
    $users = unserialize($uids);
  }
//  pr($users);exit;
  $userMails = [];
  if (!empty($users)) {

    $userEntities = User::loadMultiple($users);

    foreach ($userEntities as $user) {
      $groupMember = $group->getMember($user);
      if ($user->get('field_notifications_status')->value !== 'Disable' && $user->isActive() && $groupMember && $groupMember->getGroupContent()->get('request_status')->value == 1) {
        $userMails[$user->id()] = $user->getEmail();
      }
    }
  }
  return $userMails;
}

function send_notifications($entity, $mails, $isNew) {
  $result = array();
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'cust_group';
  $key = 'immediate_notifications';
  //$mails = \Drupal::currentUser()->getEmail().',sandeep@azrisolutions.com';
//    $groupContent = \Drupal\group\Entity\GroupContent::load($data['id']);
//    $params['subject'] = "Aktualisiert - Seite: " . $groupContent->label();
//    $params['message'] = 'Ein Inhalt im Betriebsportal KONSENS wurde aktualisiert. Sie kÃ¶nnen sich die Ã„nderungen ansehen, indem Sie auf den folgenden Link klicken:';
//  $token_service = \Drupal::token();
//  $token_sub = \Drupal::config('hzd_customizations.mailtemplates')->get($entity->getEntityTypeId())['subject'];
//  $params['subject'] = $token_service->replace($token_sub, array($entity->getEntityTypeId() => $entity));
//  $token_body = \Drupal::config('hzd_customizations.mailtemplates')->get($entity->getEntityTypeId())['mail_content'];
//  $params['message'] = $token_service->replace($token_body, array($entity->getEntityTypeId() => $entity));
//    pr($mails);echo $params['message'];exit;
//    global $base_url;
//    $url = $base_url . '/group/' . $data['gid'] . '/node/' . $data['id'];
//    $params['message'] .= '<br><br>' . $url;

  $view_builder = \Drupal::entityManager()
          ->getViewBuilder($entity->getEntityTypeId());
  $renderarray = $view_builder->view($entity, 'mail');
  $html = \Drupal::service('renderer')->renderRoot($renderarray);
  $entityTypeLabel = $entity->type->entity->label();
  if ($isNew) {
    $params['subject'] = t("Erstellt - {$entityTypeLabel}: " . $entity->label());
  } else {
    $params['subject'] = t("Aktualisiert - {$entityTypeLabel}: " . $entity->label());
  }

  $params['message'] = $html;
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;
  foreach ($mails as $to) {
    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  }
}

use Drupal\Component\Utility\SafeMarkup;

function cust_group_mail($key, &$message, $params) {
  $options = array(
      'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'immediate_notifications':
    case 'periodic_notifications':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function cust_group_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setHandlerClass('access', UserAccessControl::class);
  $nodeFormHandlers = $entity_types['node']->get('handlers');
  $nodeFormHandlers['form']['default'] = 'Drupal\cust_group\Form\AlteredNodeForm';
  $nodeFormHandlers['form']['edit'] = 'Drupal\cust_group\Form\AlteredNodeForm';
  $entity_types['node']->set('handlers', $nodeFormHandlers);
}

/* function cust_group_mail_alter(&$message) {
  switch ($message['key']) {
  case 'immediate_notifications':
  case 'periodic_notifications':
  //      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  break;
  }
  } */

function cust_group_form_alter(&$form, $form_state, $form_id) {
//    echo $form_id;exit;
  //pr($form_state->redirect);exit;
  switch ($form_id) {
    case 'node_faqs_gnode-form_form':
    case 'node_faqs_edit_form':
    case 'node_faqs_form':
      $group = \Drupal::routeMatch()->getParameter('group');
      if (empty($group)) {
        $node = \Drupal::routeMatch()->getParameter('node');
        $groupId = \Drupal\cust_group\Controller\CustNodeController::getNodeGroupId($node);
        if ($groupId) {
          $gid = $groupId->getGroup()->id();
          $group = \Drupal\group\Entity\Group::load($gid);
        }
      }
      $categoryQuery = \Drupal::entityQuery('taxonomy_term')
              ->condition('name', $group->label())
              ->condition('vid', 'faq_kategorie')
              ->execute();
      $parentId = array_values($categoryQuery)[0];
      $categoryTerms = \Drupal::entityTypeManager()
              ->getStorage('taxonomy_term')
              ->loadTree('faq_kategorie', $parentId, 1);
      $categoryOptions['_none'] = t('Select Kategorie');
      foreach ($categoryTerms as $term) {
        $categoryOptions[$term->tid] = $term->name;
      }
      $form['faq_kategorie']['widget']['#options'] = $categoryOptions;
      $pageQuery = \Drupal::entityQuery('taxonomy_term')
              ->condition('name', $group->label())
              ->condition('vid', 'faq_seite')
              ->execute();
      $parentId = array_values($pageQuery)[0];
      $pageTerms = \Drupal::entityTypeManager()
              ->getStorage('taxonomy_term')
              ->loadTree('faq_seite', $parentId, 1);
      $pageOptions['_none'] = t('Select Seite');
      foreach ($pageTerms as $pageTerm) {
        $pageOptions[$pageTerm->tid] = $pageTerm->name;
      }
      $form['faq_seite']['widget']['#options'] = $pageOptions;
      break;
    case 'views_exposed_form':
      if (isset($form['state'])) {
        $states = \Drupal::database()->select('states', 's')
                ->fields('s', ['abbr', 'state'])
                ->condition('active', 1)
                ->execute()
                ->fetchAllAssoc('abbr');
        foreach ($states as $key => $val) {
          $stateOptions[$key] = $val->state;
        }
        $form['state'] = ['#type' => 'select', '#options' => $stateOptions];
      }

      //Adding this as the bootstrap theme just displays the descriptions as tool tips.
      if (isset($form['combine'])) {
        $form['combine']['#placeholder'] = 'Name oder Email suchen';
      }
      break;
    case 'group_content_moderate-group_membership_group-request_form':
    case 'group_content_group_content_type_d4b06e2b6aad0_group-request_form':
      $form['actions']['submit']['#submit'][] = 'requst_submit_handler';
      break;
    case 'node_faqs_delete_form':
//            kint($_SERVER);
      $previousUrl = \Drupal::request()->server->get('HTTP_REFERER');
      $fake_request = \Symfony\Component\HttpFoundation\Request::create($previousUrl)
              ->getRequestUri();
//            $url_object = \Drupal::service('path.validator')->getUrlIfValid($fake_request->getRequestUri());
//            kint($fake_request);
      $url = \Drupal\Core\Url::fromUserInput($fake_request);
      $form_state->setRedirectUrl($url);
//            kint($form_state->getRedirect());
      break;
  }
  $form['revision_log']['#access'] = FALSE;
  $form['revision']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;
//  pr($form['revision']);exit;
}

function requst_submit_handler(&$form, $form_state) {
  $data['group'] = \Drupal::routeMatch()->getParameter('group');
  $form_state->setRedirect('view.all_groups.page_1');


  $data['message'] = $form_state->getValue('message');

  $data['module'] = 'cust_group';
  $data['key'] = 'immediate_notifications';

  mailToGroupAdmins($data);
}

function mailToGroupAdmins($data = []) {
  $data['subject'] = t("Membership Request for a Group - @label", ['@label' => $data['group']->label()]);
  $data['link'] = \Drupal\Core\Link::createFromRoute('View Pending Requests', 'view.hzd_group_members.pending', ['group' => $data['group']->id()], ['absolute' => TRUE])
          ->toString();
  $groupAdmins = \Drupal::entityTypeManager()->getStorage('group_content')
          ->loadByGroup($data['group'], 'group_membership', ['group_roles' => ['moderate-admin', 'moderate_private-admin']]);
  $mailManager = \Drupal::service('plugin.manager.mail');
  $send = TRUE;
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $params['subject'] = $data['subject'];
  foreach ($groupAdmins as $admin) {
    $userEntity = $admin->entity_id->entity;
    $params['message'] = t('Dear @user,<br><br>There is a new Membership Request for Group @groupLink <br><br>@message<br><br>@link', [
        '@user' => $userEntity->getDisplayName(),
        '@groupLink' => $data['group']->toLink($data['group']->label(), 'canonical', ['absolute' => TRUE])
                ->toString(),
        '@link' => $data['link'],
        '@message' => $data['message']
    ]);
//    pr($params);exit;
    $result = $mailManager->mail($data['module'], $data['key'], $userEntity->getEmail(), $langcode, $params, NULL, $send);
  }
  drupal_set_message(t('Request has been sucessfully placed.'), 'status');
}

use Drupal\group\Entity\Group;

function cust_group_views_pre_render($view) {
  // && $view->getDisplay()->display['id'] == 'group_faq_block'
  if ($view->id() == 'group_faqs') {
    $group = \Drupal::routeMatch()->getParameter('group');
//    $group = Group::load($groupId);
    if (is_object($group)) {
      $view->build_info['title'] = $group->label() . " - " . $view->build_info['title'];
    } else {
      $view->build_info['title'] = $group->label . " - " . $view->build_info['title'];
    }
  }
}

function cust_group_file_validate(Drupal\file\FileInterface $file) {
  $errors = [];
  $fileName = $file->getFilename();

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node && $node->bundle() == 'im_upload_page') {
        $data = [];
        $attachedFiles = \Drupal::entityQuery('node')
                ->condition('field_im_upload_page_files.entity:file.filename',$fileName)
                ->execute();
        if(in_array($node->id(), $attachedFiles)){
          return [t("The file's name already exists in database.")];
        }
//        pr($attachedFiles);exit;
      }
    $query = \Drupal::request()->get('upload');
    if(\Drupal::routeMatch()->getRouteName() == 'node.add' && \Drupal::routeMatch()->getParameter('node_type')->id() == 'im_upload_page'){
      $query = \Drupal::request()->get('field_im_upload_page_files');
    }
//  $check = \Drupal::entityQuery('file')
//          ->condition('filename', $fileName)
//          ->execute();
  foreach ($query as $tempFile) {
    if (!empty($tempFile['fids'])) {
      $fileEnt = File::load($tempFile['fids']);
      if ($fileName == $fileEnt->getFilename() && !$file->isPermanent()) {
//        $errors[] = t("The file's name already exists in database.");
        return [t("The file's name already exists in database.")];
      }
    }
  }


  $check = \Drupal::entityQuery('file')
          ->condition('filename', $fileName)
//    ->condition('status', 1)
          ->execute();

  //drupal_set_message('<pre>'. print_r($_SESSION, true) .'</pre>');
  //Todo sometimes giving true while value is one
  if (count($check) >= 1 && $file->isNew()) {
//    $node = \Drupal::routeMatch()->getParameter('node');
    /* if ($node instanceof Node && $node->bundle() == 'quickinfo') {
      $checkQuickinfo = \Drupal::entityQuery('node')
      ->condition('upload.entity:file.fid', (array) $check, 'IN')
      ->condition('type', 'quickinfo')
      ->execute();
      $query = \Drupal::request()->get('upload');
      pr($query);exit;
      foreach ($query as $tempFile) {
      if (!empty($tempFile['fids'])) {
      $file = File::load($tempFile['fids']);
      $temporaryFileData[] = $file->getFilename();
      }
      }

      $route = \Drupal::routeMatch()->getRouteName();

      if (!in_array($node->id(), (array) $checkQuickinfo) && !in_array($fileName, $temporaryFileData)) {
      return [];
      }
      if ($route == 'entity.group_content.create_form' && !in_array($fileName, $temporaryFileData)) {
      return [];
      }
      } else {
      $group = Drupal\cust_group\CustGroupHelper::getGroupFromRouteMatch();
      if($group instanceof \Drupal\group\Entity\Group){
      foreach (File::loadMultiple($check) as $fileEntity) {
      $file_usage = \Drupal::service('file.usage')->listUsage($fileEntity);
      $data = [];
      foreach ($file_usage as $module) {
      foreach ($module as $contentType => $type) {
      foreach ($type as $id => $count) {
      $groupContent = Drupal\cust_group\CustGroupHelper::getGroupNodeFromNodeId($id);
      if ($groupContent instanceof \Drupal\group\Entity\GroupContent) {
      $data[] = $groupContent->getGroup()->id();
      }
      }
      }
      }
      }
      if (!in_array($group->id(), $data)) {
      return [];
      }
      }
      } */
//    $errors[] = t("The file's name already exists in database.");
  }
  return $errors;
}

function cust_group_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  //pr($entity->bundle());exit;
  $plannigFileRef = array(
      1048 => "mlrp",
      658 => "test calendar",
      1049 => "transcription pp",
      785 => "transcription fmk"
  );
  if (in_array($entity->id(), array_keys($plannigFileRef))) {
    $items = get_planning_file_data($plannigFileRef[$entity->id()]);
    $build['planning_file_data'] = [
        '#prefix' => '<h1 class="js-quickedit-page-title page-header">' . t('Files') . '</h1>',
        '#items' => $items,
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#weight' => 100,
    ];
  } elseif ('planning_files' == $entity->bundle()) {
    $field_planning_file_type = $entity->get('field_planning_file_type')->value;
    $plannigFileRefFlipped = array_flip($plannigFileRef);
    $nodeId = $plannigFileRefFlipped[$field_planning_file_type];
//    $group = Group::load(RELEASE_MANAGEMENT);
//    $plugin = $group->getGroupType()->getContentPlugin('group_node:planning_files');
//    $group_content = \Drupal::entityQuery('group_content')
//      ->condition('gid',$group->id())
//      ->condition('entity_id',$nodeId)
//      ->condition('type','%group_node%','LIKE')
//      ->execute();
//    pr($group_content);exit;
    global $base_url;
    header('Location: ' . $base_url . \Drupal::url('entity.node.canonical', ['node' => $nodeId]));
    exit;
  } elseif ('downtimes' == $entity->bundle()) {
    $db = \Drupal::database();
    $downtimeTypeQuery = $db->select('downtimes', 'd');
    $downtimeTypeQuery->fields('d', ['scheduled_p']);
    $downtimeTypeQuery->condition('downtime_id', $entity->id());
    $downtimeType = $downtimeTypeQuery->execute()->fetchField();
    if ($downtimeType == 0) {
      $title = t('StÃ¶rung');
    } else {
      $title = t('Blockzeit');
    }
    $build['title'] = ['#markup' => $title];
  }


  /* if ($entity->getType() == 'downtimes') {
    generate_quickinfo_pdf(Node::load(55871));
    } */
}

function get_planning_file_data($type) {
  $plannigFileNodeIds = \Drupal::entityQuery('node')
          ->condition('field_planning_file_type', $type)
          ->execute();
  $planningFileNodes = \Drupal\node\Entity\Node::loadMultiple(array_values($plannigFileNodeIds));
  $filenames = [];
  foreach ($planningFileNodes as $node) {
    $file = $node->get('field_upload_planning_file')->referencedEntities();
    if (!empty($file[0])) {
      $fileUrl = $file[0]->url();
      $date = \Drupal::service('date.formatter')
              ->format($node->getCreatedTime(), 'short');
      $filenames[] = [
          '#markup' => \Drupal::service('link_generator')
                  ->generate($file[0]->getFilename(), Url::fromUri($fileUrl))
                  ->__toString() . ' (' . $date . ')',
          '#type' => 'markup'
      ];
      //$filenames[] = ['file'=>Link::fromTextAndUrl($file[0]->getFilename(),  Url::fromUri($fileUrl)),
      //'text'=>'sjdbd'];
    }
  }
  //pr($filenames);exit;
  return $filenames;
  //$filesData =
}

function cust_group_cron() {
  //Weekly cron was registered in ./modules/custom/cust_user/cust_user.module
  //Daily cron to send notifications
  \Drupal\cust_group\Controller\NotificationsController::dailyCron();
}

function cust_group_user_delete($user) {
  $groupContent = \Drupal::entityQuery('group_content')
          ->condition('entity_id', $user->id())
          ->execute();
  $groupUsers = \Drupal\group\Entity\GroupContent::loadMultiple($groupContent);
  foreach ($groupUsers as $gUser) {
    $gUser->delete();
  }
}

function cust_group_preprocess_node(&$variables) {
  $variables['page'] = 1;
//    exit;
}

function cust_group_user_login() {
  $request = \Drupal::request()->get('destination', null);
  if (!$request) {
    $response = new RedirectResponse("/");
    $response->send();
    return;
  }
}

function cust_group_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->getEntityTypeId() == 'group_content' && $entity->getContentPlugin()
                  ->getPluginId() == 'group_membership' && $entity->getGroup()
                  ->getMemberRequestStatus($entity->getEntity()) == 0
  ) {
//    pr(($entity->getGroup()->getMemberRequestStatus($entity->getEntity())));
//    exit;
    $group = $entity->getGroup()->id();
    $group_content = $entity->id();
    $operations['edit']['#access'] = FALSE;
    unset($operations['edit']);
    $operations['approve_request'] = array(
        'title' => t('Approve Request'),
        'url' => \Drupal\Core\Url::fromRoute('cust_group.approve_membership_request', [
            'group' => $group,
            'group_content' => $group_content
        ]),
        'weight' => -51,
    );
    $operations['reject_request'] = array(
        'title' => t('Reject Request'),
        'url' => \Drupal\Core\Url::fromRoute('cust_group.reject_membership_request', [
            'group' => $group,
            'group_content' => $group_content
        ]),
        'weight' => -50,
    );
//    pr(array_keys($operations));
//    exit;
  }
}

/**
 * Implements hook_file_download().
 *
 * implementation to serve all the private files which are migrated from d6
 *
 */
function cust_group_file_download($uri) {
  $scheme = \Drupal::service('file_system')->uriScheme($uri);
  if (\Drupal::currentUser()->isAnonymous() && $scheme == 'private') {
    return -1;
  } else {
//    echo 1;exit;
    return 1;
  }
}

/**
 * Implements hook_schema().
 */
function cust_group_schema() {
  $schema = [];

  return $schema;
}

/**
 * Implements hook_ENTITY_TYPE_insert to update menu link from node entity to group entity.
 */
function cust_group_menu_link_content_insert($menu) {
  /*  $nodeid = explode('/', $menu->link->uri)[1];
    $groupcontent = \Drupal\cust_group\CustGroupHelper::getGroupNodeFromNodeId($nodeid);
    if ($nodeid && $groupcontent) {
    $finalpath = $groupcontent->toUrl()->getInternalPath();
    $menu->link->uri = 'internal:/' . $finalpath;
    $menu->save();

    $pgroupid = $groupcontent ? $groupcontent->gid->target_id : "";
    $gcontentid = $groupcontent ? $groupcontent->id() : "";
    $title = $groupcontent ? $groupcontent->label->value : "";
    $aliasCleaner = \Drupal::service('pathauto.alias_cleaner');
    $title = $aliasCleaner->cleanstring($title);
    $langcode = $menu->langcode->value;
    if ($menu->getParentId()) {
    $parent = $menu->getParentId();
    $menu_uuid = explode(':', $parent)[1];
    $menu_content = \Drupal::entityManager()
    ->getStorage('menu_link_content')
    ->loadByProperties(array('uuid' => $menu_uuid));
    $menu_content = array_shift($menu_content);
    $parent_path = explode(':', $menu_content->link->uri)[1];
    $parent_alias = \Drupal::service('path.alias_manager')
    ->getAliasByPath($parent_path, $langcode);

    $system_path = '/' . $groupcontent->toUrl()->getInternalPath();
    $path_alias = $parent_alias . '/' . $title;
    \Drupal::service('path.alias_storage')
    ->save($system_path, $path_alias, $langcode);
    }
    else {
    $system_path = '/' . $groupcontent->toUrl()->getInternalPath();
    $groupalias = \Drupal::service('path.alias_manager')
    ->getAliasByPath('/group/' . $pgroupid, $langcode);
    $path_alias = $groupalias . '/' . $title;
    \Drupal::service('path.alias_storage')
    ->save($system_path, $path_alias, $langcode);
    }
    } */
}

/* function cust_group_preprocess_swiftmailer(&$variables) {
  global $base_url;
  $variables['base_url'] = $base_url;
  } */

/**
 * Implements hook_block_access().
 */
function cust_group_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
  /*  if ($block->id() == 'views_block__groups_faq_block_1' && $operation == 'view') {
    $group = Drupal\cust_group\CustGroupHelper::getGroupFromRouteMatch();
    if($group instanceof Group){
    if(\Drupal\cust_group\Controller\CustNodeController::isGroupAdmin($group->id())){
    return \Drupal\Core\Access\AccessResult::allowed();
    }
    }
    return \Drupal\Core\Access\AccessResult::forbidden();
    } */
}

function cust_group_user_format_name_alter(&$name, $account) {
  if ($account->id()) {
    $userQuery = \Drupal::database()->select('cust_profile', 'cp');
    $userQuery->condition('cp.uid', $account->id(), '=')
            ->fields('cp', array('firstname', 'lastname'));
    $userData = $userQuery->execute()->fetchAssoc();
    $name = $userData['firstname'] . ' ' . $userData['lastname'];
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function cust_group_entity_base_field_info(Drupal\Core\Entity\ContentEntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $fields = [];
    // Add a field that shows a link to the user's current company.
    $fields['downtime_description'] = \Drupal\Core\Field\BaseFieldDefinition::create('downtime_description')
            ->setName('Downtime Description')
            ->setLabel(t('Downtime Description'))
            ->setComputed(TRUE)
            ->setClass('\Drupal\cust_group\DowntimeDescriptionItemList')
            ->setDisplayConfigurable('view', TRUE);

    return $fields;
  }
}

function cust_group_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  $status = FALSE;
  if (!isset($view->field['draggableviews'])) {
    return;
  }
  if (\Drupal::currentUser()->hasPermission('access draggableviews')) {
    $status = TRUE;
  }
  $group = \Drupal\cust_group\CustGroupHelper::getGroupFromRouteMatch();
  if ($group) {
    if (!is_object($group)) {
      $group = \Drupal\group\Entity\Group::load($group);
    }
    $groupMember = $group->getMember(\Drupal::currentUser());
    if ($groupMember && $groupMember->getGroupContent()->get('request_status')->value == 1) {
      $roles = $groupMember->getRoles();
      if (\Drupal\cust_group\Controller\CustNodeController::isGroupAdmin($group->id())) {
        $status = TRUE;
      } else {
        $status = FALSE;
      }
    }
  }
  if ($status == FALSE) {
    unset($view->field['draggableviews']);
  }
}
