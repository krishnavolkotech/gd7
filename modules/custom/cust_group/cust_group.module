<?php

/**
 * @file
 * $Id$.
 */
//define('SITE_ADMIN', 5);
define('RELEASE_MANAGEMENT', 1);
define('GEPLANTE_BLOCKZEITEN', 35);
define('INCIDENT_MANAGEMENT', 2);
define('PROBLEM_MANAGEMENT', 6);
define('QUICKINFO', 32);
define('Zentrale_Release_Manager_Lander', 5);
define('SERVICE_LEVEL_MANAGEMENT', 15);
define('BETRIEBSPORTAL_KONSENS', 21);
define('KAPAZITATSMANAGEMENT', 39);
define('VERFUGBARKEITSMANAGEMENT', 77);
define('COVID_INFO', 83);
define('RISIKOMANAGEMENT', 73);

// define('QUICKINFO', variable_get('quickinfo_group_id', NULL));.
define('MAINTENANCE_GROUP_ID', 2);

use Drupal\cust_group\Access\UserAccessControl;
use Drupal\cust_group\ImAttachmentReminder;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\Core\Access\AccessResult;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\file\Entity\File;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\pathauto\PathautoPatternInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\pathauto\PathautoState;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\Core\Database\Database;

function cust_group_transliteration_overrides_alter(&$overrides, $langcode) {
  $overrides[0xC4] = 'AE';
  $overrides[0xD6] = 'OE';
  $overrides[0xDC] = 'UE';
  $overrides[0xE4] = 'ae';
  $overrides[0xF6] = 'oe';
  $overrides[0xFC] = 'ue';
  $overrides[0xDF] = 'ss';
}

function cust_group_user_view(&$build, \Drupal\user\Entity\User $account, Drupal\Core\Entity\Entity\EntityViewDisplay $display, $view_mode) {
  if ($view_mode == 'full') {
    $userData = get_user_fields($account);
    foreach ($userData as $key => $val) {
      $build[$key] = [
        '#theme' => 'usercustomfield',
        '#label' => t($val['label']),
        '#value' => $val['value'],
      ];
    }
    $build['group_list'] = array(
      '#markup' => hzd_group_list($account->id()),
      '#cache' => ['max-age' => 0],
//      '#weight' => -10
    );
  }

  //}
}

function get_user_fields($user) {
  $db = \Drupal::database();
  $result = $db->select('cust_profile', 'cp')
    ->fields('cp', array(
      'firstname',
      'lastname',
      'phone',
      'position',
      'state_id'
    ))
    ->condition('cp.uid', $user->id());

  $val = $result->execute()->fetchAssoc();
  $state = $db->select('states', 's')
    ->fields('s', array('state'))
    ->condition('s.id', $val['state_id'], '=');
  $state_name = $state->execute()->fetchField();
  $variables['name'] = [
    'label' => 'User Name',
    'value' => $user->getDisplayName()
  ];
  $variables['firstname'] = [
    'label' => 'First Name',
    'value' => $val['firstname']
  ];
  $variables['lastname'] = [
    'label' => 'Last Name',
    'value' => $val['lastname']
  ];
  $variables['phone'] = ['label' => 'Phone', 'value' => $val['phone']];
  $variables['position'] = ['label' => 'Position', 'value' => $val['position']];
  $variables['email'] = ['label' => 'Email', 'value' => $user->getEmail()];
  $variables['state'] = ['label' => 'State', 'value' => $state_name];
  return $variables;
}

function cust_group_theme() {
  return array(
    'usercustomfield' => array(
      'variables' => array('label' => NULL, 'value' => NULL),
    ),
  );
}

function cust_group_group_insert($group) {
  $node = Node::create([
    'type' => 'group',
    'title' => $group->label(),
  ]);
  $node->save();
  $forum = Term::create([
    'name' => $group->label(),
    'vid' => 'forums'
  ]);
  $forum->save();
  $forumTerm = Term::create([
    'name' => 'Allgemeines',
    'vid' => 'forums',
    'parent' => $forum->id(),
  ]);
  $forumTerm->save();

  $faq = Term::create([
    'name' => $group->label(),
    'vid' => 'faq_seite',
  ]);
  $faq->save();
  $faqterm = Term::create([
    'name' => 'Allgemein',
    'vid' => 'faq_seite',
    'parent' => $faq->id(),
  ]);
  $faqterm->save();

  $faqcategory = Term::create([
    'name' => $group->label(),
    'vid' => 'faq_kategorie',
  ]);
  $faqcategory->save();
  $faqcategoryterm = Term::create([
    'name' => 'Allgemein',
    'vid' => 'faq_kategorie',
    'parent' => $faqcategory->id(),
  ]);
  $faqcategoryterm->save();

  
  delete_path_alias('/node/' . $node->id());
 // \Drupal::service('path_alias.repository')->delete(['source' => '/node/' . $node->id()]);
    
  $group->set('field_old_reference', $node->id());
  $group->set('field_forum_containers', $forum->id());
  $group->save();
  $menu = \Drupal::entityTypeManager()
    ->getStorage('menu')
    ->create([
      'id' => 'menu-' . $node->id(),
      'label' => $group->label(),
      'description' => '',
    ]);
  $menu->save();

  $items = array(
    'Allgemeines' => 'internal:/' . $group->toUrl()->getInternalPath(),
//Cannot create dummy menu links as the Menu link url validation fails
    /*    'Ansprechpartner' => '/ansprechpartner',
      'Dokumentation' => '/dokumentation',
      'FAQs' => '/faqs',
      'Reporting' => '/reporting', */
    'FAQ' => 'internal:/' . Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $faqterm->id()])
        ->getInternalPath(),
    'Forums' => 'internal:/' . Url::fromRoute('cust_group.forums', ['group' => $group->id()])
        ->getInternalPath(),
    'Gruppenmitglieder' => 'internal:/' . Url::fromRoute('view.group_members_lists.page_1', ['group' => $group->id()])
        ->getInternalPath(),
  );

  foreach ($items as $title => $link) {
    $menu_link = MenuLinkContent::create([
      'title' => $title,
      'link' => ['uri' => $link],
      'menu_name' => $menu->id(),
//      'expanded' => TRUE,
    ]);
    $menu_link->save();
  }
  \Drupal::service('cache_tags.invalidator')
    ->invalidateTags([
      'config:views.view.all_groups',
      'config:views.view.my_groups',
      'grantpermission_view:' . \Drupal::currentUser()->id(),
      'grantpermission_update_delete:' . \Drupal::currentUser()->id()
    ]);
}

function cust_group_group_update($group) {
  \Drupal::service('cache_tags.invalidator')
    ->invalidateTags([
      'config:views.view.all_groups',
      'config:views.view.my_groups',
      'grantpermission_view:' . \Drupal::currentUser()->id(),
      'grantpermission_update_delete:' . \Drupal::currentUser()->id()
    ]);
}

function cust_group_group_delete($group) {
  \Drupal::service('cache_tags.invalidator')
    ->invalidateTags([
      'config:views.view.all_groups',
      'config:views.view.my_groups',
      'grantpermission_view:' . \Drupal::currentUser()->id(),
      'grantpermission_update_delete:' . \Drupal::currentUser()->id()
    ]);
}

/**
 * @param \Drupal\group\Entity\GroupContentInterface $entity
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function cust_group_group_content_update(\Drupal\group\Entity\GroupContentInterface $entity) {
  $group = $entity->getGroup();
  $plugin_id = $entity->getContentPlugin()->getPluginId();
  if ($plugin_id == 'group_membership') {
    $oldroles = $entity->original->get('group_roles')->getValue();
    $oroles = [];
    if (isset($oldroles) && !empty($oldroles)) {
      foreach ($oldroles as $key => $val) {
        $oroles[] = $val['target_id'];
      }
    }
    $newroles = $entity->get('group_roles')->getValue();
    $nroles = [];
    if (isset($newroles) && !empty($newroles)) {
      foreach ($newroles as $key => $val) {
        $nroles[] = $val['target_id'];
      }
    }

    if (in_array($group->bundle() . '-admin', $nroles) &&   !in_array($group->bundle() . '-admin', $oroles)) {
      sendGroupAdminRoleMail($group, $entity->getEntity());
    }


    if ($group->id() == RELEASE_MANAGEMENT) {
      $uid = $entity->getEntity()->id();
      $userData = \Drupal::service('user.data');
      $rw_comments_permission = $userData->get('cust_group', $uid, 'rw_comments_permission');
      if (!in_array($group->bundle() . '-admin', $nroles) && in_array($group->bundle() . '-admin', $oroles)) {
        if ($rw_comments_permission == 0) {
          clear_notification_from_tables($uid);
        }
      } elseif (!in_array($group->bundle() . '-admin', $nroles)) {
        if ($rw_comments_permission == 0) {
          clear_notification_from_tables($uid);
        }
      }
    }
    \Drupal\cust_group\CustGroupHelper::invalidate_groupAdministation_blockCache();
  }

    
/*
if (isset($entity->original->request_status->value) &&
 ($entity->original->request_status->value == 0 ||
 $entity->request_status->value == 1))
 */

 if (get_grequest_status($entity) == 1) {
    $subject = t("Membership Request for a Group - @groupLabel has been accepted", ['@groupLabel' => $group->label()]);
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'cust_group';
    $key = 'immediate_notifications';
    $params['subject'] = $subject;
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $send = TRUE;
    $user = $entity->get('entity_id')->referencedEntities()[0];
    $params['message'] = t('Dear @user,<br><br>Membership Request for Group @groupLink has been approved.', [
      '@user' => $user->getDisplayName(),
      '@groupLink' => $group->toLink($group->label(), 'canonical', ['absolute' => 1])
        ->toString()
    ]);
    $result = $mailManager->mail($module, $key, $user->getEmail(), $langcode, $params, NULL, $send);
    if ($result['result']) {
      \Drupal::messenger()->addMessage(t('Mail sent.'), 'status');
    }
  }


//  if ($entity->request_status->value == 1) {
  if (get_grequest_status($entity)) {	
    $user = $entity->get('entity_id')->referencedEntities()[0];
    \Drupal::service('cache_tags.invalidator')
      ->invalidateTags([
        'grantpermission_view:' . $user->id(),
        'grantpermission_update_delete:' . $user->id()
      ]);
  }

  \Drupal::service('cache_tags.invalidator')
    ->invalidateTags([
      'config:block.block.hzd_local_tasks',
      'config:system.menu.primary-links',
      'config:views.view.all_groups',
      'config:views.view.my_groups',
      'grantpermission_view:' . \Drupal::currentUser()->id(),
      'grantpermission_update_delete:' . \Drupal::currentUser()->id()
    ]);
}

function cust_group_group_content_delete(\Drupal\group\Entity\GroupContentInterface $entity) {
  $group = $entity->getGroup();
  $plugin_id = $entity->getContentPlugin()->getPluginId();
  if ($plugin_id == 'group_membership') {
    if ($group->id() == RELEASE_MANAGEMENT) {
      $newroles = $entity->get('group_roles')->getValue();
      $nroles = [];
      if (isset($newroles) && !empty($newroles)) {
        foreach ($newroles as $key => $val) {
          $nroles[] = $val['target_id'];
        }
      }
      $uid = $entity->id();
      $userData = \Drupal::service('user.data');
      $rw_comments_permission = $userData->get('cust_group', $uid, 'rw_comments_permission');
      if ($rw_comments_permission == 1) {
        clear_notification_from_tables($uid);
      } elseif (in_array($group->bundle() . '-admin', $nroles)) {
        clear_notification_from_tables($uid);
      }
    }

    if ($group->id() == \Drupal::config('cust_group.arbeitsanleitungen.settings')->get('arbeitsanleitungen_id')) {
      \Drupal::database()->query("DELETE FROM {arbeitsanleitung_notifications__user_default_interval} where uid = :uid", array(":uid" => $uid));
    }
    //wird dies für SAMS überhaupt benötigt? Eingetragen, weil paralel zu ALEDV erstellt im Rahmen der Trennung von SAMS und ALEDV
    // Ja, wir benötigt um abonnierte Benachrichtigungen aus Datenbank zu löschen, wenn user die Gruppe verlässt.
    // @todo Testen.
    if ($group->id() == \Drupal::config('cust_group.sams.settings')->get('sams_id')) {
      \Drupal::database()->query("DELETE FROM {sams_notifications__user_default_interval} where uid = :uid", array(":uid" => $uid));
    }
  }
  $tags = ['config:block.block.hzd_local_tasks', 'config:system.menu.primary-links'];
  $plugin_id = $entity->getContentPlugin()->getPluginId();
  if ($plugin_id == 'group_membership') {
    $tags[] = 'config:views.view.all_groups';
    $tags[] = 'config:views.view.my_groups';
  }
  \Drupal::service('cache_tags.invalidator')
    ->invalidateTags($tags);
}

/**
 * @param $uid
 * @return bool
 * @throws Exception
 */
function clear_notification_from_tables($uid) {
  $rel_type = 459;
  $type = 'release_comments';
  $int_val = -1;

  \Drupal::database()
    ->update('service_notifications_override')
    ->fields(['send_interval' => -1])
    ->condition('uid', $uid, '=')
    ->condition('type', $type, '=')
    ->execute();

  \Drupal::database()
    ->update('service_notifications_user_default_interval')
    ->fields(['default_send_interval' => -1])
    ->condition('uid', $uid, '=')
    ->condition('service_type', $type, '=')
    ->execute();

  $services = hzd_get_all_services($rel_type);
  foreach ($services as $service) {
    $data = \Drupal::database()->select('service_notifications', 'sn')
      ->fields('sn')
      ->condition('service_id', $service->nid)
      ->condition('type', $type)
      ->execute()->fetchAllAssoc('send_interval');

    $intervals = \Drupal\hzd_notifications\HzdNotificationsHelper::hzd_notification_send_interval();
    foreach ($intervals as $interval => $val) {
      if (isset($data[$interval])) {
        $uids = unserialize($data[$interval]->uids);
        foreach ($uids as $userKey => $item) {
          if ($item == $uid) {
            unset($uids[$userKey]);
          }
        }
        if ($int_val == $interval) {
          $uids[] = $uid;
        }
        \Drupal::database()
          ->update('service_notifications')
          ->fields(['uids' => serialize($uids)])
          ->condition('sid', $data[$interval]->sid)->execute();
      } else {
        if ($int_val == $interval) {
          $notifyData = ['uids' => serialize([$uid]), 'send_interval' => $interval, 'service_id' => $service->nid, 'type' => $type];

        } else {
          $notifyData = ['uids' => serialize([]), 'send_interval' => $interval, 'service_id' => $service->nid, 'type' => $type];
        }
        \Drupal::database()
          ->insert('service_notifications')
          ->fields($notifyData)->execute();
      }
    }
  }
  return TRUE;
}

/**
 * @param \Drupal\group\Entity\GroupContentInterface $entity
 */
function cust_group_group_content_insert(\Drupal\group\Entity\GroupContentInterface $entity) {
  $tags = ['config:block.block.hzd_local_tasks', 'config:system.menu.primary-links'];

  // Notify User while assigning Admin role
  $group = $entity->getGroup();
  $plugin_id = $entity->getContentPlugin()->getPluginId();
  if ($plugin_id == 'group_membership') {
    $tags[] = 'config:views.view.all_groups';
    $tags[] = 'config:views.view.my_groups';

    $newroles = $entity->get('group_roles')->getValue();
 
    $nroles = [];
    if (isset($newroles) && !empty($newroles)) {
      foreach ($newroles as $key => $val) {
          $nroles[$val['target_id']] = $val['target_id'];
      }
    }

    $admin_role = $group->bundle() . '-admin';
    foreach($nroles as $ukey => $urole) {
      if ((string)$ukey == (string)$admin_role) {
        sendGroupAdminRoleMail($group, $entity->getEntity());
      }
    }
    
    if (in_array((string)$group->bundle() . '-admin', $nroles)) {
      //sendGroupAdminRoleMail($group, $entity->getEntity());
    }
  }

  $request_status = $entity->hasField('request_status')?$entity->request_status->value:0;

  if (get_grequest_status($entity) || $request_status == 1) {
    $user = $entity->get('entity_id')->referencedEntities()[0];
    \Drupal::service('cache_tags.invalidator')
      ->invalidateTags([
        'grantpermission_view:' . $user->id(),
        'grantpermission_update_delete:' . $user->id()
      ]);
  }

  \Drupal::service('cache_tags.invalidator')
    ->invalidateTags($tags);
}

//Sending mail to user to know Group Admin role
function sendGroupAdminRoleMail($group, $user) {
  $subject = t('[BpK] Sie sind jetzt Administrator der Gruppe "@groupLabel"', ['@groupLabel' => $group->label()]);
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'cust_group';
  $key = 'immediate_notifications';
  $params['subject'] = $subject;
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $send = TRUE;

  $params['message'] = t('Hallo @user,<br><br>Sie sind jetzt Administrator der '
    . 'Gruppe "@groupname" und können unter dem folgenden Link '
    . 'die Gruppe besuchen und verwalten:<br><br> @groupLink<br><br>-- Team Betriebsportal KONSENS', [
    '@user' => $user->getDisplayName(),
    '@groupname' => $group->label(),
    '@groupLink' => $group->toLink($group->label(), 'canonical', ['absolute' => 1])
      ->toString()
  ]);
  $mailManager->mail($module, $key, $user->getEmail(), $langcode, $params, NULL, $send);
}

function cust_group_taxonomy_term_insert($term) {
  if ($term->bundle() != 'faq_seite' || empty($term->get('parent')->referencedEntities())) {
    return;
  }
  $parentlabel = $term->get('parent')->referencedEntities()[0]->label();
  $query = \Drupal::entityQuery('group')->accessCheck(FALSE);
  $query->condition('label', $parentlabel);
  $groupid = $query->execute();
  $gid = reset($groupid);
  $group = \Drupal\group\Entity\Group::load($gid);
  $nodeid = $group->get('field_old_reference')->value;
  $link = 'internal:/' . Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()])
      ->getInternalPath();

  $menuquery = \Drupal::entityQuery('menu_link_content');
  $menuquery->condition('title', 'FAQ');
  $menuquery->condition('menu_name', 'menu-' . $nodeid);
  $menuitem = $menuquery->execute();
  $parentmenuid = reset($menuitem);
  if (empty($parentmenuid)) {
    return;
  }
  $parentmenu = MenuLinkContent::load($parentmenuid)->getPluginId();
  $menu_link = MenuLinkContent::create([
    'title' => $term->label(),
    'link' => ['uri' => $link],
    'menu_name' => 'menu-' . $nodeid,
    'parent' => $parentmenu,
    'expanded' => TRUE,
  ]);
  $menu_link->save();
}

function send_fromgroup_immediate_notifications($subject, $message_text, $to, $preference, $attachment = NULL) {
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'cust_group';
  $key = 'immediate_notifications';
  $params['message'] = $message_text;
  $params['subject'] = $subject;
  $params['preference'] = $preference ? $preference : 'html';
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;
  foreach (explode(',', trim($to, ',')) as $userMail) {
    if(\Drupal::service('email.validator')->isValid(trim($userMail))) {
      $result = $mailManager->mail($module, $key, trim($userMail), $langcode, $params, NULL, $send);
    }
  }
}

use Drupal\Component\Utility\SafeMarkup;

function cust_group_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'immediate_notifications':
    case 'periodic_notifications':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function cust_group_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setHandlerClass('access', UserAccessControl::class);
  $nodeFormHandlers = $entity_types['node']->get('handlers');
  $nodeFormHandlers['form']['default'] = 'Drupal\cust_group\Form\AlteredNodeForm';
  $nodeFormHandlers['form']['edit'] = 'Drupal\cust_group\Form\AlteredNodeForm';
  $entity_types['node']->set('handlers', $nodeFormHandlers);
}

 function cust_group_mail_alter(&$message) {
 /*
   switch ($message['key']) {
     case 'page_mail':
     case 'page_copy':
     //case 'immediate_notifications':
     //case 'periodic_notifications':
     //  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    break;
   }
 */
   if (!empty($message['id']) && ($message['id'] == 'contact_page_mail' ||
                                  $message['id'] == 'contact_page_copy' ))
   {
     if (isset($message['body'][1])) {
       //$message['body'][1] = PHP_EOL . ($message['body'][1]->__toString());
     }
   }
 } 

function cust_group_entity_reference_selection_alter(&$def) {
  $def['default:user']['class'] = 'Drupal\cust_group\Plugin\EntityReferenceSelection\CustomUserSelection';
//  pr($def);exit;
}

function cust_group_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'group_content_group_content_type_86f239cfd394e_group-request-membership_form':
      $form['path']['#access'] = FALSE;
    break;
    case 'group_content_group_content_type_24751a240ffd0_group-reject-membership_form':
    case 'group_content_group_content_type_58a8289e9c89a_group-reject-membership_form':
      $form['actions']['submit']['#submit'][] = 'membership_reject_submit_handler';
    break;
    case 'group_admin_permissions':
//      $form['actions']['submit']['#submit'][] = 'permission_cache_submit_handler';
      break;
    case 'node_faqs_gnode-form_form':
    case 'node_faqs_edit_form':
    case 'node_faqs_form':
      $group = \Drupal::routeMatch()->getParameter('group');
      if (empty($group)) {
        $node = \Drupal::routeMatch()->getParameter('node');
        $groupId = \Drupal\cust_group\Controller\CustNodeController::getNodeGroupId($node);
        if ($groupId) {
          $gid = $groupId->getGroup()->id();
          $group = \Drupal\group\Entity\Group::load($gid);
        }
      }
      $categoryQuery = \Drupal::entityQuery('taxonomy_term')
        ->condition('name', $group->label())
        ->condition('vid', 'faq_kategorie')
        ->execute();
      $parentId = array_values($categoryQuery)[0];
      $categoryTerms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadTree('faq_kategorie', $parentId, 1);
      $categoryOptions['_none'] = t('Select Kategorie');
      foreach ($categoryTerms as $term) {
        $categoryOptions[$term->tid] = $term->name;
      }
      natcasesort($categoryOptions);
      $form['faq_kategorie']['widget']['#options'] = $categoryOptions;
      $pageQuery = \Drupal::entityQuery('taxonomy_term')
        ->condition('name', $group->label())
        ->condition('vid', 'faq_seite')
        ->execute();
      $parentId = array_values($pageQuery)[0];
      $pageTerms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadTree('faq_seite', $parentId, 1);
      $pageOptions['_none'] = t('Select Seite');
      foreach ($pageTerms as $pageTerm) {
        $pageOptions[$pageTerm->tid] = $pageTerm->name;
      }
      natcasesort($pageOptions);
      $form['faq_seite']['widget']['#options'] = $pageOptions;
      break;
    case 'views_exposed_form':
      if (isset($form['state'])) {
        $states = \Drupal::database()->select('states', 's')
          ->fields('s', ['abbr', 'state'])
          ->condition('active', 1)
          ->execute()
          ->fetchAllAssoc('abbr');
        foreach ($states as $key => $val) {
          $stateOptions[$key] = $val->state;
        }
        $form['state'] = ['#type' => 'select', '#options' => $stateOptions];
      }

      //Adding this as the bootstrap theme just displays the descriptions as tool tips.
      if (isset($form['combine'])) {
        $form['combine']['#placeholder'] = 'Name oder Email suchen';
      }
      break;
    case 'group_content_moderate-group_membership_group-request_form':
    case 'group_content_group_content_type_d4b06e2b6aad0_group-request_form':
    case 'group_content_group_content_type_24751a240ffd0_group-request-membership_form':
    case 'group_content_group_content_type_58a8289e9c89a_group-request-membership_form':
      $group = \Drupal::routeMatch()->getParameter('group');
      $plugin = $group->getGroupType()->getContentPlugin('group_membership_request');
      $check = \Drupal::entityQuery('group_content')
        ->condition('gid',$group->id())
        ->condition('entity_id',\Drupal::currentUser()->id())
        ->condition('type',$plugin->getContentTypeConfigId())
        ->execute();
      $form['path']['#access'] = FALSE;
      if (!empty($check)) {
        $form['actions']['#access'] = FALSE;
        $form['waiting_for_approval']  = ['#markup' => t('Your request for membership group of %label is in queue, Please wait for approval.', ['%label' => $group->label()])];
      }
      else {
        $form['message'] = [
          '#type' => 'textarea',
          '#title' => t('Message Body'),
          '#required' => true,
          '#description' => t('We will attache this message in request membership mail.'),
        ];
        $form['path']['#access'] = FALSE;
        $form['actions']['submit']['#submit'][] = 'requst_submit_handler';
      }
      break;
    case 'node_page_edit_form':
     $current_user = \Drupal::currentUser();    
     if (!in_array('site_administrator', $current_user->getRoles())) {
       $alias = $form['path']['widget'][0]['alias']['#default_value'];
       $current_path = \Drupal::service('path.current')->getPath();
       
       $path = explode('/', $current_path);
       $end_path = end($path);

       $group_alias = '';
       if ($end_path == 'edit' && is_numeric($path[2]) && $path[1] == 'node') {
         $parent_group = get_parent_group($path[2]);
         $group_alias = get_group_node_alias($parent_group);
	 if ($alias) {
            if(strpos($alias, $group_alias) === 0) {
              $alias_new = str_replace($group_alias."/", "/",$alias);
	      $form['path']['widget'][0]['alias']['#default_value'] = $alias_new;
            }
	 }
	 
       }
     }
    break;
    case 'node_faqs_delete_form':
//            kint($_SERVER);
      $previousUrl = \Drupal::request()->server->get('HTTP_REFERER');
      $fake_request = \Symfony\Component\HttpFoundation\Request::create($previousUrl)
        ->getRequestUri();
//            $url_object = \Drupal::service('path.validator')->getUrlIfValid($fake_request->getRequestUri());
//            kint($fake_request);
      $url = \Drupal\Core\Url::fromUserInput($fake_request);
      $form_state->setRedirectUrl($url);
//            kint($form_state->getRedirect());
      break;
  }
  $form['revision_log']['#access'] = FALSE;
  $form['revision']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;


  // This section alters the Ckeditor image add dialog popup.
  if ($form_id == 'editor_image_dialog') {
    // This sets the default value of alt to "" (two double quotes), which
    // signifies empty alt text.
    // For more details, see Drupal\editor\Form\EditorImageDialog::buildForm
    //$form['attributes']['alt']['#default_value'] = '""';
    //$form['attributes']['alt']['#required'] = FALSE;
    // Retrieve the image element's attributes from form state.
    $image_element = $form_state->get('image_element') ?: [];

    $form['attributes']['width'] = [
      '#title' => t('width'),
      '#type' => 'number',
      '#default_value' => isset($image_element['width']) ? $image_element['width'] : '',
      '#min' => 1,
    ];

    $form['attributes']['height'] = [
      '#title' => t('height'),
      '#type' => 'number',
      '#default_value' => isset($image_element['height']) ? $image_element['height'] : '',
      '#min' => 1,
    ];
  }

  // Altering the actions available for a node form, either add or edit.
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['base_form_id']) && $build_info['base_form_id'] == 'node_form') {
    $form_object = $form_state->getFormObject();
    $entity = $form_object->getEntity();
    $bundle = $entity->bundle();

    // Any bundle key added here will not have unpublish option.
    $disallowed_bundles = [
      'planning_files',
    ];

    if (in_array($bundle, $disallowed_bundles)) {
      unset($form['actions']['unpublish']);
    }
  }

  if ($form_id == 'node_revision_revert_confirm') {
    // Provide a control to send notifications for revert operation.
    $form['notification'] = array(
      '#type' => 'fieldset',
      '#weight' => 99,
    );
    $form['notification']['node_notification_checkbox'] = send_notification_form_element();
    /*
    $form['notification']['node_notification_checkbox'] = array(
      '#type' => 'radios',
      '#options' => [0 => 'No', 1 => 'Yes'],
      '#required' => TRUE,
      //'#title' => t('Do not send notifications for this update.'),
    );
    */
  }

  //Sending the group id to browser for IMCE to request folder structure within the group
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (in_array($route_name, ['entity.node.edit_form', 'entity.group.edit_form', 'entity.group_content.create_form'])) {
    $group = \Drupal\cust_group\CustGroupHelper::getGroupFromRouteMatch();
    $form['#attached']['drupalSettings']['group_context'] = $group ? $group->id() : null;
  }

  if ($form_id == 'group_content_open-group_membership_edit_form') {
    $form['actions']['submit']['#submit'][] = 'invalidate_group_admin_cache';
    $user = \Drupal\hzd_release_management\HzdreleasemanagementStorage::CurrentUserData();
    $userData = \Drupal::service('user.data');
    $rw_comments_permission = $userData->get('cust_group', $user->id(), 'rw_comments_permission');

    $group = \Drupal::routeMatch()->getParameter('group');
    if (is_object($group)) {
      $group = $group->id();
    }
    if ($group == RELEASE_MANAGEMENT) {
      $form['rw_comments_permission'] = [
        '#type' => 'checkbox',
        '#title' => t('Allow this user to Read/Write comment with inprogress releases.'),
        '#default_value' => $rw_comments_permission,
        '#weight' => 99,
      ];
      array_unshift($form['actions']['submit']['#submit'], 'rw_comments_permission_submit_handler');
    }
  }

}

function membership_reject_submit_handler(&$form, $form_state) {
  $group = \Drupal::routeMatch()->getParameter('group');
  $groupContent = \Drupal::routeMatch()->getParameter('group_content');

  $grouplabel = $group->label();
  $subject = t("Membership Request for a Group - @groupLabel has been rejected", ['@groupLabel' => $grouplabel]);
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'cust_group';
  $key = 'immediate_notifications';
  $params['subject'] = $subject;
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $send = TRUE;
  $user = $groupContent->referencedEntities()[1];
  $params['message'] = t('Dear @user,<br><br>Membership Request for Group @groupLabel has been rejected.', [
      '@user' => $user->getDisplayName(),
      '@groupLabel' => $grouplabel
  ]);
  $result = $mailManager->mail($module, $key, $user->getEmail(), $langcode, $params, NULL, $send);
  if ($result['result']) {
    \Drupal::messenger()->addMessage(t('Mail sent.'), 'status');
  }

  \Drupal::logger('group_content')->notice('@type: rejected %title.', [
    '@type' => $group->bundle(),
    '%title' => $group->label(),
  ]);
  $groupContent->delete();
}
function invalidate_group_admin_cache(&$form, $form_state) {
  \Drupal\cust_group\CustGroupHelper::invalidate_groupAdministation_blockCache();
}

/**
 * @param $form
 * @param $form_state
 */
function rw_comments_permission_submit_handler(&$form, $form_state) {
  $user = \Drupal\hzd_release_management\HzdreleasemanagementStorage::CurrentUserData();
  $userData = \Drupal::service('user.data');
  $userData->set('cust_group', $user->id(), 'rw_comments_permission', $form_state->getValue('rw_comments_permission'));
}

//function permission_cache_submit_handler(&$form, $form_state) {
//  \Drupal\Core\Cache\Cache::invalidateTags(array('grant_permission_all_cached'));
//}

function requst_submit_handler(&$form, $form_state) {
  $data['group'] = \Drupal::routeMatch()->getParameter('group');
  $form_state->setRedirect('view.all_groups.page_1');


  $data['message'] = $form_state->getValue('message');

  $data['module'] = 'cust_group';
  $data['key'] = 'immediate_notifications';

  mailToGroupAdmins($data);
}

function mailToGroupAdmins($data = []) {

  $data['subject'] = t("Membership Request for a Group - @label", ['@label' => $data['group']->label()]);
  $data['link'] = \Drupal\Core\Link::createFromRoute(t('View Pending Requests'), 'view.hzd_group_members.pending', ['group' => $data['group']->id()], ['absolute' => TRUE])
    ->toString();
  $groupAdmins = \Drupal::entityTypeManager()->getStorage('group_content')
    ->loadByGroup($data['group'], 'group_membership', [
      'group_roles' => [
        'moderate-admin',
        'moderate_private-admin'
      ]
    ]);
  $mailManager = \Drupal::service('plugin.manager.mail');
  $send = TRUE;
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $params['subject'] = $data['subject'];

  $current_user_id = \Drupal::currentUser()->id();
  $options = ['absolute' => TRUE];
  $url = Url::fromRoute('entity.user.canonical', ['user' => $current_user_id], $options);
  $requester_link = Link::fromTextAndUrl(\Drupal::currentUser()->getDisplayName(), $url)->toString();

  foreach ($groupAdmins as $admin) {
    $userEntity = $admin->entity_id->entity;
    if ($userEntity->isActive() && !hzd_user_inactive_status_check($userEntity->id())) {
      $params['message'] = t('Dear @user,<br><br>There is a new Membership Request from @requester for Group @groupLink <br><br>@message<br><br>@link', [
        '@user' => $userEntity->getDisplayName(),
        '@requester' => $requester_link,
        '@groupLink' => $data['group']->toLink($data['group']->label(), 'canonical', ['absolute' => TRUE])
          ->toString(),
        '@link' => $data['link'],
        '@message' => $data['message']
      ]);

      $result = $mailManager->mail($data['module'], $data['key'], $userEntity->getEmail(), $langcode, $params, NULL, $send);
    }
  }
  //\Drupal::messenger()->addMessage(t('Request has been sucessfully placed.'), 'status');
}

use Drupal\group\Entity\Group;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

function cust_group_views_pre_render($view) {
  // && $view->getDisplay()->display['id'] == 'group_faq_block'
  if ($view->id() == 'group_faqs') {
    $group = \Drupal::routeMatch()->getParameter('group');
//    $group = Group::load($groupId);
    if (is_object($group)) {
      $view->build_info['title'] = $group->label() . " - " . $view->build_info['title'];
    } else {
      $view->build_info['title'] = $group->label . " - " . $view->build_info['title'];
    }
  }
}

function cust_group_file_validate(Drupal\file\FileInterface $file) {
//  drupal_get_messages(null, TRUE);
  \Drupal::messenger()->deleteAll();
  $errors = [];
  $fileName = $file->getFilename();

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node && $node->bundle() == 'im_upload_page') {
    $data = [];
    $attachedFiles = \Drupal::entityQuery('node')
      ->condition('field_im_upload_page_files.entity:file.filename', $fileName)
      ->condition('nid', $node->id())
      ->execute();
  }
  $query = \Drupal::request()->get('upload');
  if (\Drupal::routeMatch()
      ->getRouteName() == 'node.add' && \Drupal::routeMatch()
      ->getParameter('node_type')
      ->id() == 'im_upload_page'
  ) {
    $query = \Drupal::request()->get('field_im_upload_page_files');
  }
  if (\Drupal::request()->get('field_page_files', NULL)) {
    $query = \Drupal::request()->get('field_page_files');
  }
//  $check = \Drupal::entityQuery('file')
//          ->condition('filename', $fileName)
//          ->execute();
  if (!empty($query)) {
    foreach ($query as $tempFile) {
      if (!empty($tempFile['fids'])) {
        $fileEnt = File::load($tempFile['fids']);
        if ($fileName == $fileEnt->getFilename() && !$file->isPermanent() && $file->isNew()) {
//        $errors[] = t("The file's name already exists in database.");
          return [t("The file's name already exists in database.")];
        }
      }
    }
  }

  return $errors;
}

function cust_group_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  //pr($entity->bundle());exit;
  $plannigFileRef = array(
    1048 => "mlrp",
    /*
     *  Changed 2018/07/05 by Robin Schomburg <Robin.Schomburg@hzd.hessen.de>
     *  Page Testkalender has been deleted by accident. A new Testkalender page with the node id 65101 was created.
     *  Old value:   658 => "test calendar",
     */
    65101 => "test calendar",
    1049 => "transcription pp",
    785 => "transcription fmk"
  );
  if (array_key_exists($entity->id(), $plannigFileRef)) {
    $items = get_planning_file_data($plannigFileRef[$entity->id()]);
    $build['planning_file_data'] = [
      '#prefix' => '<h1 class="js-quickedit-page-title page-header">' . t('Files') . '</h1>',
      '#items' => $items,
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#weight' => 100,
    ];
  } elseif ('planning_files' == $entity->bundle() && $view_mode != 'mail') {
    $field_planning_file_type = $entity->get('field_planning_file_type')->value;
    $plannigFileRefFlipped = array_flip($plannigFileRef);
    $nodeId = $plannigFileRefFlipped[$field_planning_file_type];
    global $base_url;
    //$base_url . \Drupal::url('entity.node.canonical', ['node' => $nodeId])
    $url = $base_url . Url::fromRoute('entity.node.canonical', ['node' => $nodeId])->toString();
    header('Location: ' . $url);
    exit;
  } elseif ('downtimes' == $entity->bundle()) {
    $db = \Drupal::database();
    $downtimeTypeQuery = $db->select('downtimes', 'd');
    $downtimeTypeQuery->fields('d', ['scheduled_p']);
    $downtimeTypeQuery->condition('downtime_id', $entity->id());
    $downtimeType = $downtimeTypeQuery->execute()->fetchField();
    if ($downtimeType == 0) {
      $title = t('Störung');
    } else {
      $title = t('Blockzeit');
    }
    $build['title'] = ['#markup' => $title];
  }
}


/**
 * hook implementing hook_node_access()
 */
function cust_group_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {

  if ($node->getType() == 'deployed_releases' && $op != "view") {
    $group = \Drupal\group\Entity\Group::load(Zentrale_Release_Manager_Lander);
    $content = $group->getMember($account);
    if (array_intersect($account->getRoles(), ['site_administrator', 'administrator'])) {
      return AccessResult::allowed();
    }
    if ($content && group_request_status($content)) {
      return AccessResult::allowed();
    }
    else {
      return AccessResult::forbidden();
    }
  }

  if ($node->getType() == 'release_comments') {
    if (\Drupal\hzd_release_management\HzdreleasemanagementStorage::RWCommentAccess()) {
      return AccessResult::allowed();
    } else {
      return AccessResult::forbidden();
    }
  }

  $plannigFileRef = array(
    1048 => "mlrp",
    65101 => "test calendar",
    1049 => "transcription pp",
    785 => "transcription fmk"
  );
  $group_id = 1;
  if ($node->bundle() === 'page' && $op == 'delete' && array_key_exists($node->id(), $plannigFileRef)) {
    //$items = get_planning_file_data($plannigFileRef[$node->id()]);
    $is_group_admin = \Drupal\cust_group\Controller\CustNodeController::isGroupAdmin($group_id);
    if ($is_group_admin) {
      return Drupal\Core\Access\AccessResult::forbidden()->cachePerPermissions()->cachePerUser();
    }
  }
  $pagesFor_anonymous = [335 => 'impressum', 439 => 'hilfe', 84888 => 'datenschutz'];
  switch ($op) {
    case 'view':
      if ($account->isAnonymous()) {
        if ($node->getType() == 'downtimes' || $node->getType() == 'services') {
          return AccessResult::allowed();
        }

        if (array_key_exists($node->id(), $pagesFor_anonymous)) {
          return AccessResult::allowed();
        }
        return AccessResult::forbidden();
      }
      if($account->isAuthenticated() && $node->getType() == 'page') {
        $group_contents = \Drupal\group\Entity\GroupContent::loadByEntity($node);
        if(!empty($group_contents)){
          if(!current($group_contents)->getGroup()->getMember($account)) {
            return AccessResult::forbidden();
          }
        }
      }
    default:
      if ($account->isAnonymous()) {
        return AccessResult::forbidden();
      }
  }

  // @todo Zurückbauen (Nicht kompatibel mit Meldetool).
  // if ($node->getType() == 'deployed_releases') {
  //   $group_id = 5;
  //   $is_group_admin = \Drupal\cust_group\Controller\CustNodeController::isGroupAdmin($group_id);
  //   if (!$is_group_admin) {
  //       switch ($op) {
  //       case 'view':
  //           return AccessResult::allowed();
  //       case 'edit':
  //           return AccessResult::forbidden();
  //       default:
  //           if ($account->isAnonymous()) {
  //               return AccessResult::forbidden();
  //           }
  //       }
  //       return AccessResult::forbidden();
  //   }
  // }

}

/**
 * hook implementing hook_node_insert()
 */
function cust_group_node_insert($entity) {
  $plannigFileRef = array(
    1048 => "mlrp",
    65101 => "test calendar",
    1049 => "transcription pp",
    785 => "transcription fmk"
  );
  if ($entity->bundle() == 'planning_files') {
    $type = strtolower($entity->get('field_planning_file_type')->value);
    $key = array_search($type, $plannigFileRef);
    \Drupal\Core\Cache\Cache::invalidateTags(array('node:' . $key));
  }

  if ($entity->bundle() == 'services') {
    $newname = strtolower($entity->get('field_problem_name')->value);
    $config = \Drupal::configFactory()->getEditable('problem_management.settings');
    if ($config->get('prballservice') == TRUE) {
      if (!empty($newname)) {
        $query = \Drupal::database()
          ->insert('group_problems_view')
          ->fields(array('group_id' => PROBLEM_MANAGEMENT, 'service_id' => $entity->id()))
          ->execute();
      }
    }
  }
}


/**
 * hook implementing hook_node_update()
 */
function cust_group_node_update($entity) {
  $plannigFileRef = array(
    1048 => "mlrp",
    65101 => "test calendar",
    1049 => "transcription pp",
    785 => "transcription fmk"
  );

  if ($entity->bundle() == 'services') {
    $newname = strtolower($entity->get('field_problem_name')->value);
    $oldname = strtolower($entity->original->get('field_problem_name')->value);
    $config = \Drupal::configFactory()->getEditable('problem_management.settings');
    if ($config->get('prballservice') == TRUE) {
      if (empty($oldname) && !empty($newname)) {
        $query = \Drupal::database()
          ->insert('group_problems_view')
          ->fields(array('group_id' => PROBLEM_MANAGEMENT, 'service_id' => $entity->id()))
          ->execute();
      }
    }
    if (!empty($oldname) && empty($newname)) {
      $query = \Drupal::database()
        ->delete('group_problems_view')
        ->condition('group_id', PROBLEM_MANAGEMENT, '=')
        ->condition('service_id', $entity->id())
        ->execute();
    }
  }

  if ($entity->bundle() == 'planning_files') {
    $oldtype = strtolower($entity->original->get('field_planning_file_type')->value);
    $newtype = strtolower($entity->get('field_planning_file_type')->value);
    $oldfile = strtolower($entity->original->get('field_upload_planning_file')->target_id);
    $newfile = strtolower($entity->get('field_upload_planning_file')->target_id);

    if ($oldfile !== $newfile) {
      $key = array_search($newtype, $plannigFileRef);
      \Drupal\Core\Cache\Cache::invalidateTags(array('node:' . $key));
    }

    if ($oldtype !== $newtype) {
        $key = array_search($oldtype, $plannigFileRef);
        \Drupal\Core\Cache\Cache::invalidateTags(array('node:' . $key));
        $key = array_search($newtype, $plannigFileRef);
        \Drupal\Core\Cache\Cache::invalidateTags(array('node:' . $key));
    }
  }
}

/**
 * hook implementing hook_node_delete()
 */
function cust_group_node_delete($entity) {
  $plannigFileRef = array(
    1048 => "mlrp",
    65101 => "test calendar",
    1049 => "transcription pp",
    785 => "transcription fmk"
  );
  if ($entity->bundle() == 'planning_files') {
    $type = strtolower($entity->get('field_planning_file_type')->value);
    $key = array_search($type, $plannigFileRef);
    \Drupal\Core\Cache\Cache::invalidateTags(array('node:' . $key));
  }

  if ($entity->bundle() == 'services') {
    $newname = strtolower($entity->get('field_problem_name')->value);
    if (!empty($newname)) {
      $query = \Drupal::database()
        ->delete('group_problems_view')
        ->condition('group_id', PROBLEM_MANAGEMENT, '=')
        ->condition('service_id', $entity->id())
        ->execute();
    }
  }
}

function get_hzd_states_by_id($id = NULL) {
  if (empty($id)) {
    return;
  }
  $states = [
    'bw' => 'Baden-Württemberg',
    'by' => 'Bayern',
    'be' => 'Berlin', //Berlin (BE)
    'bb' => 'Brandenburg', //Brandenburg (BB)
    'hb' => 'Bremen', //Bremen (HB)
    'bu' => 'Bund', //Bund (BU)
    'hh' => 'Hamburg', //Hamburg (HH)
    'he' => 'Hessen', //Hessen (HE)
    'mv' => 'Mecklenburg-Vorpommern', //Mecklenburg-Vorpommern (MV)
    'ni' => 'Niedersachsen', //Niedersachsen (NI)
    'nw' => 'Nordrhein-Westfalen', //Nordrhein-Westfalen (NW)
    'rp' => 'Rheinland-Pfalz', //Rheinland-Pfalz (RP)
    'sl' => 'Saarland', //Saarland (SL)
    'sn' => 'Sachsen', //Sachsen (SN)
    'st' => 'Sachsen-Anhalt', //Sachsen-Anhalt (ST)
    'sh' => 'Schleswig-Holstein', //Schleswig-Holstein (SH)
    'th' => 'Thüringen', //Thüringen (TH)
  ];
  return $states[$id];
}

function get_planning_file_data($type) {
  $plannigFileNodeIds = \Drupal::entityQuery('node')
    ->condition('field_planning_file_type', $type)
    ->condition('field_upload_planning_file.%delta.display', 1)
    ->sort('changed', 'ASC')
    ->execute();
  $planningFileNodes = \Drupal\node\Entity\Node::loadMultiple(array_values($plannigFileNodeIds));
  $filenames = [];
  foreach ($planningFileNodes as $node) {
    $file = $node->get('field_upload_planning_file')->referencedEntities();
    if (!empty($file[0])) {
      $fileUrl = $file[0]->createFileUrl(FALSE);
      $date = \Drupal::service('date.formatter')
        ->format($node->getChangedTime(), 'short');
      $filenames[] = [
        '#markup' => \Drupal::service('link_generator')
            ->generate($file[0]->getFilename(), Url::fromUri($fileUrl))
            ->__toString() . ' (' . $date . ')',
        '#type' => 'markup'
      ];
      //$filenames[] = ['file'=>Link::fromTextAndUrl($file[0]->getFilename(),  Url::fromUri($fileUrl)),
      //'text'=>'sjdbd'];
    }
  }
  //pr($filenames);exit;
  return $filenames;
  //$filesData =
}

function cust_group_cron() {
  ImAttachmentReminder::PrepareMailsToImAuthers();
}

function cust_group_user_delete($user) {
  $connection = Database::getConnection();
  $groupContent = \Drupal::entityQuery('group_content')
    ->condition('entity_id', $user->id())
    ->condition('type', '%' . $connection->escapeLike('group_membership') . '%', 'LIKE')
    ->execute();

  $groupUsers = \Drupal\group\Entity\GroupContent::loadMultiple($groupContent);
  foreach ($groupUsers as $gUser) {
    /*if( $gUser->get("type")->getValue()[0]['target_id'] == "open-group_membership") {}*/
    $gUser->delete();
  }
}

function cust_group_preprocess_node(&$variables) {
  $variables['page'] = 1;
}

function cust_group_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->getEntityTypeId() == 'group_content' &&
      $entity->getContentPlugin()->getPluginId() == 'group_membership_request'
  ) {

      /*
  if ($entity->getEntityTypeId() == 'group_content' &&
      $entity->getContentPlugin()->getPluginId() == 'group_membership' &&
      $entity->getGroup()->getMemberRequestStatus($entity->getEntity()) == 0
  ) {
      */
//    pr(($entity->getGroup()->getMemberRequestStatus($entity->getEntity())));
//    exit;
    $group = $entity->getGroup()->id();
    $group_content = $entity->id();
    $operations['edit']['#access'] = FALSE;
    unset($operations['edit']);
    $operations['approve_request'] = array(
      'title' => t('Approve Request'),
      'url' => \Drupal\Core\Url::fromRoute('entity.group_content.group_approve_membership', [
        'group' => $group,
        'group_content' => $group_content
      ]),
      'weight' => -51,
    );
    $operations['reject_request'] = array(
      'title' => t('Reject Request'),
      'url' => \Drupal\Core\Url::fromRoute('entity.group_content.group_reject_membership', [
        'group' => $group,
        'group_content' => $group_content
      ]),
      'weight' => -50,
    );
//    pr(array_keys($operations));
//    exit;
  }
}

/**
 * Implements hook_file_download().
 *
 * implementation to serve all the private files which are migrated from d6
 *
 */
function cust_group_file_download($uri) {
  $scheme = StreamWrapperManager::getScheme($uri);
  //$scheme = \Drupal::service('file_system')->uriScheme($uri);
  if (\Drupal::currentUser()->isAnonymous() && $scheme == 'private') {
    return -1;
  }
  else {
    $target = StreamWrapperManager::getTarget($uri);
    //$target = file_uri_target($uri);

    $path_parts = explode('/', $target);
    if (count($path_parts) > 1 && $path_parts[0] == 'gruppen' && isset($path_parts[1])) {

        //Always return true for quickinfo's for the Logged in Users
        if ($path_parts[2] == 'quickinfo') {
          return 1;
        }

        $group_id = getGroupIdFromFolderName($path_parts[1]);
        if ($group_id) {
            return hzdGroupFileAccess($group_id);
        }
    }
    if (stripos($target, 'al-edv') !== FALSE) {
      if (is_dir($uri)) {
        return -1;
      }
      return al_edvFileAccess($uri);
    }
    return 1;
  }
}

function hzdGroupFileAccess($group_id) {
  $member = \Drupal::currentUser();
  // All siteadmins should be able to access aledv
  if (in_array('site_administrator', $member->getRoles())) {
    return 1;
  }
  $user_groups = \Drupal\cust_group\CustGroupHelper::hzd_user_groups_list($member->id());
  if (isset($user_groups[$group_id])) {
      return 1;
  }
  else {
      return -1;
  }
}

function getGroupIdFromFolderName($folder_name) {
  $sql = "select id from {groups_field_data} where replace(REPLACE(label,' - ',' '), ' ', '-') = :folder_name";
  return $group_id = \Drupal::database()->query($sql, array(':folder_name' => $folder_name))->fetchField();
}

function al_edvFileAccess($uri){
  $member = \Drupal::currentUser();

  // All siteadmins should be able to access aledv
  if (in_array('site_administrator', $member->getRoles())) {
    return 1;
  }

  // rschomburg: method doesn't deliver ids from unpublished groups
  // $user_groups = \Drupal\hzd_notifications\HzdNotificationsHelper::hzd_user_groups_list($uid);
  $al_edv_group_id = \Drupal::config('cust_group.arbeitsanleitungen.settings')->get('arbeitsanleitungen_id');
  $group = \Drupal\group\Entity\Group::load($al_edv_group_id);

  if ($group && $group->getMember($member)) {
    return 1;
  }
  else {
    return -1;
  }
}

/**
 * Implements hook_schema().
 */
function cust_group_schema() {
  $schema = [];

  return $schema;
}

/**
 * Implements hook_ENTITY_TYPE_insert to update menu link from node entity to group entity.
 */
/* function cust_group_menu_link_content_insert($menu) {
  $nodeid = explode('/', $menu->link->uri)[1];
  $groupcontent = \Drupal\cust_group\CustGroupHelper::getGroupNodeFromNodeId($nodeid);
  if ($nodeid && $groupcontent) {
  $finalpath = $groupcontent->toUrl()->getInternalPath();
  $menu->link->uri = 'internal:/' . $finalpath;
  $menu->save();

  $pgroupid = $groupcontent ? $groupcontent->gid->target_id : "";
  $gcontentid = $groupcontent ? $groupcontent->id() : "";
  $title = $groupcontent ? $groupcontent->label->value : "";
  $aliasCleaner = \Drupal::service('pathauto.alias_cleaner');
  $title = $aliasCleaner->cleanstring($title);
  $langcode = $menu->langcode->value;
  if ($menu->getParentId()) {
  $parent = $menu->getParentId();
  $menu_uuid = explode(':', $parent)[1];
  $menu_content = \Drupal::entityManager()
  ->getStorage('menu_link_content')
  ->loadByProperties(array('uuid' => $menu_uuid));
  $menu_content = array_shift($menu_content);
  $parent_path = explode(':', $menu_content->link->uri)[1];
  $parent_alias = \Drupal::service('path_alias.manager')
  ->getAliasByPath($parent_path, $langcode);

  $system_path = '/' . $groupcontent->toUrl()->getInternalPath();
  $path_alias = $parent_alias . '/' . $title;
  create_path_alias($system_path, $path_alias);
  // \Drupal::service('path_alias.repository')->save($system_path, $path_alias, $langcode);
  }
  else {
  $system_path = '/' . $groupcontent->toUrl()->getInternalPath();
  $groupalias = \Drupal::service('path_alias.manager')
  ->getAliasByPath('/group/' . $pgroupid, $langcode);
  $path_alias = $groupalias . '/' . $title;
  create_path_alias($system_path, $path_alias);
  //\Drupal::service('path_alias.repository')->save($system_path, $path_alias, $langcode);
  }
  }
  } */

/* function cust_group_preprocess_swiftmailer(&$variables) {
  global $base_url;
  $variables['base_url'] = $base_url;
  } */

/**
 * Implements hook_block_access().
 */
/* function cust_group_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ($block->id() == 'views_block__groups_faq_block_1' && $operation == 'view') {
  $group = Drupal\cust_group\CustGroupHelper::getGroupFromRouteMatch();
  if($group instanceof Group){
  if(\Drupal\cust_group\Controller\CustNodeController::isGroupAdmin($group->id())){
  return \Drupal\Core\Access\AccessResult::allowed();
  }
  }
  return \Drupal\Core\Access\AccessResult::forbidden();
  }
  } */

function cust_group_user_format_name_alter(&$name, $account) {
  if ($account->id()) {
    $userQuery = \Drupal::database()->select('cust_profile', 'cp');
    $userQuery->condition('cp.uid', $account->id(), '=')
      ->fields('cp', array('firstname', 'lastname'));
    $userData = $userQuery->execute()->fetchAssoc();
    if(is_array($userData) && !empty($userData)){
      $name = $userData['firstname'] . ' ' . $userData['lastname'];
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function cust_group_entity_base_field_info(Drupal\Core\Entity\ContentEntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $fields = [];
    // Add a field that shows a link to the user's current company.
    $fields['downtime_description'] = \Drupal\Core\Field\BaseFieldDefinition::create('downtime_description')
      ->setName('Downtime Description')
      ->setLabel(t('Downtime Description'))
      ->setComputed(TRUE)
      ->setClass('\Drupal\cust_group\DowntimeDescriptionItemList')
      ->setDisplayConfigurable('view', TRUE);

    return $fields;
  }
}

function cust_group_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  $status = FALSE;
  if (!isset($view->field['draggableviews'])) {
    return;
  }
  if (\Drupal::currentUser()->hasPermission('access draggableviews')) {
    $status = TRUE;
  }
  $group = \Drupal\cust_group\CustGroupHelper::getGroupFromRouteMatch();
  if ($group) {
    if (!is_object($group)) {
      $group = \Drupal\group\Entity\Group::load($group);
    }
    $groupMember = $group->getMember(\Drupal::currentUser());
    if ($groupMember && group_request_status($groupMember)) {
      $roles = $groupMember->getRoles();
      if (\Drupal\cust_group\Controller\CustNodeController::isGroupAdmin($group->id())) {
        $status = TRUE;
      } else {
        $status = FALSE;
      }
    }
  }
  if ($status == FALSE) {
    unset($view->field['draggableviews']);
  }
}

function cust_group_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
  if ($context['module'] == 'node'
    && $context['bundle'] == "quickinfo"
    && $context['data']['node']->isPublished() == FALSE
  ) {
    $pattern->setPattern('[node:group_raw]/rz-schnellinfos/[node:title]');
  }
}

/**
 * Implements hook_entity_update().
 * Updating quick info node path alias when node update
 */
function cust_group_entity_update(EntityInterface $entity) {
  if ($entity->bundle() == 'quickinfo' && $entity->isPublished()) {
    $source = '/' . $entity->toUrl()->getInternalPath();
    delete_path_alias($source);

    $path = '/' . $entity->toUrl()->getInternalPath();
    $alias = '/release-management/rz-schnellinfos/' . $entity->get('field_unique_id')->value;
    create_path_alias($path, $alias);
   // \Drupal::entityTypeManager()->getStorage('path_alias')->save('/' . $entity->toUrl()->getInternalPath(), $path_alias, 'de');
  }
}

//Doesn't make any effect using this so marking @todo
/* function cust_group_user_load(&$entities) {
  foreach ($entities as &$entity) {
  $status = \Drupal::database()->select('inactive_users', 'inf')
  ->fields('inf')
  ->condition('uid', $entity->id())
  ->execute()
  ->fetchCol();
  //    pr($status);exit;
  if(!empty($status) ){
  $entity->set('status',0);
  //      pr($entity->get('status')->value);exit;
  }
  }
  } */

function cust_group_preprocess_block(&$vars) {
  if (isset($vars['plugin_id']) && $vars['plugin_id'] == 'system_menu_block:primary-links') {
    $vars['#cache'] = ['max-age' => 0];
  }
}

// Imce related feature starts here
function cust_group_field_widget_third_party_settings_form(WidgetInterface $widget, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $form['group_files'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow files only from the relative group directories (disable IMCE widget for this to work)'),
    '#default_value' => $widget->getThirdPartySetting('cust_group', 'group_files'),
  ];
  return $form;
}

/**
 * Implements hook_field_widget_form_alter().
 * Alters widget forms that have groups files.
 */
function cust_group_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {

  if ($context['widget']->getThirdPartySetting('cust_group', 'group_files')) {
    // pr($context['widget']->isApplicable());
    // exit;
    $scheme = $context['items'][$context['delta']]->getFieldDefinition()->getSetting('uri_scheme');
    $element['#scheme'] = $scheme;
    $class = 'Drupal\imce\ImceFileField';
    $element['#process'][] = ['Drupal\cust_group\CustGroupHelper', 'process'];
    // Make sure default value callbacks are added
    if (empty($element['#file_value_callbacks'])) {
      $info = \Drupal::service('element_info')->getInfo($element['#type']);
      if (!empty($info['#file_value_callbacks'])) {
        $element['#file_value_callbacks'] = $info['#file_value_callbacks'];
      }
    }
    $element['#file_value_callbacks'][] = [$class, 'setWidgetValue'];
  }
  // pr($element);
}


function cust_group_library_info_alter(&$libraries, $extension) {
  if ($extension == 'imce' && isset($libraries['drupal.imce.input'])) {
    $new_path = '/' . drupal_get_path('module', 'cust_group') . '/js/imce.input.js';
    unset($libraries['drupal.imce.input']['js']['js/imce.input.js']);
    $libraries['drupal.imce.input']['js'][$new_path] = [];
  }
}

function cust_group_page_attachments_alter(array &$page) {
    $page['#attached']['library'][] = 'cust_group/cust_group';
}

function filesCompareByName($file1, $file2) {
  return strcasecmp($file1["file"], $file2["file"]);
}

/**
 *  Create Directory if not exists
 */
function checkAndCreateFolder($path) {
  if (!is_dir($path)) {
    shell_exec("mkdir -p " . $path);
  }
}

function get_grequest_status($group) {
  if ($group->hasField('grequest_status')) {
    $group_request = $group->get('grequest_status')->getValue();
    if (isset($group_request[0]['value'])) {
      return $group_request[0]['value'];
    }
  }
  return FALSE;
}


function group_request_status($groupContent) {
	 //    dump($groupContent->getGroupContent());
    //if ($groupContent->getGroupContent()->get('request_status')->value == 1) {
    return 1;
    //}
    //return 0;
}

function cust_group_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#id'])) {
    $id_item = str_replace('-', '_', $element['#id']);
    if (isset($variables['element']['#id'])) {
      if ($variables['element']['#id'] == 'edit-path-0-alias') {
        $suggestions[] = 'input__alias__form-control__' . $element['#type'];
      }
    }
  }
}

/*
 * Get Parent Group NODE ALIAS
*/
function get_group_node_alias($gid) {
  $group_node_path = '/group/'.$gid; 
  return $result = \Drupal::service('path_alias.manager')->getAliasByPath($group_node_path);
}	 

/*
 * Get Parent Group ID
 * Assumption : Node is related with single Group
*/
function get_parent_group($nid) {
  $ids = \Drupal::entityQuery('group_content')
    ->condition('entity_id', $nid)
    ->execute();
  $relations = \Drupal\group\Entity\GroupContent::loadMultiple($ids);
  foreach ($relations as $rel) {
    if ($rel->getEntity()->getEntityTypeId() == 'node') {
      return $rel->getGroup()->id();
    }
  }
  return false;
}

function cust_group_entity_presave(Drupal\Core\Entity\EntityInterface $entity){
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();

  if (!in_array('site_administrator', $current_user->getRoles())) {
    if ($entity->getEntityTypeId() == 'node') {
      // Do not create pathauto for deployed releases.
      if ($entity->bundle() === "deployed_releases") {
        return;
      }
      $token_type = \Drupal::service('token.entity_mapper');
      $data = [$token_type->getTokenTypeForEntityType($entity->getEntityTypeId()) => $entity,];

      $token = Drupal::token();
      $group_alias = $token->replace('[node:group_raw]', $data);
      $node_alias = false;
      if(isset($entity->path->getValue('list')[0]['alias'])){
        $node_alias = $entity->path->getValue('list')[0]['alias'];
      }

      $pathurl_state = $entity->get('path')->first()->get('pathauto')->getValue();
      if ($pathurl_state) {
          $entity->path = [
            'pathauto' => PathautoState::CREATE,
          ];
      }
      else {
          if ($group_alias && $node_alias) {
              $cleanedtitle = custom_url_cleaner($node_alias);
              $new_alias = "/".$group_alias.'/'. $cleanedtitle;
              $entity->path = [
                  'alias' => $new_alias,
                  'pathauto' => PathautoState::SKIP,
              ];
          }
          else {
              $entity->path = [
                  'pathauto' => PathautoState::CREATE,
              ];
          }// END OF groupAlias
      }
    }
  }
  else {
      if ($entity->getEntityTypeId() == 'node') {
          $node_alias = false;
          if(isset($entity->path->getValue('list')[0]['alias'])){
              $node_alias = $entity->path->getValue('list')[0]['alias'];
          }

          if ($node_alias) {
              $cleanedtitle = custom_url_cleaner($node_alias);
              $new_alias = "/". $cleanedtitle;
              $entity->path = [
                  'alias' => $new_alias,
                  'pathauto' => PathautoState::SKIP,
              ];
          }
          else {
              $entity->path = [
                  'pathauto' => PathautoState::CREATE,
              ];
          }
      }
  }
}

/*
function content_type_pattern($type) {
  switch($type) {
    case 'release':
      return 'release-management/release/[node:nid]';
    case 'quickinfo':
      return 'release-management/rz-schnellinfos/[node:field_unique_id]';
    case 'early_warnings':
      return 'release-management/early-warnings/[node:field_earlywarning_release_title]/[node:title]';
    case 'downtimes':
      return 'incident-management/stoerung/[node:nid]';
    case 'measure':
      return '/risikomanagement-betrieb/massnahme/[node:field_risk_id]';
    case 'risk':
      return '/risikomanagement-betrieb/risiko/[node:field_risk_id]';
    case 'risk_cluster':
      return '/risikomanagement-betrieb/risikocluster/[node:field_risk_id]';
    case 'problem':
      return 'problem-management/problem/[node:nid]';
    case 'page':
      return '[node:group_raw]/[node:menu-link:parents:join-path]/[node:title]';
    case 'forum':
      return '[node:group_raw]/forum/[node:title]';
  }
}
*/

/*
function update_group_alias($path_alias) {
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();

 // if (!in_array('site_administrator', $current_user->getRoles())) {
    $path = explode('/', $path_alias->getPath());
    $group_alias = '';
    if ($path[1] == 'node' && is_numeric($path[2])) {
      $parent_group = get_parent_group($path[2]);
      $group_alias = get_group_node_alias($parent_group);
    }
    if ($path_alias) {
       $alias = $path_alias->get('alias')->getValue()[0]['value'];
       if(strpos($alias, $group_alias) === 0) {
 
       }
      else {
        $alias_new = $group_alias . $alias;
	$updated_alias = \Drupal::entityTypeManager()->getStorage('path_alias')->load($path_alias->id());
        $updated_alias->setAlias($alias_new);
        $updated_alias->save();
      }
      }
  //}
}


function cust_group_path_alias_insert(Drupal\path_alias\PathAliasInterface $path_alias) {
   update_group_alias($path_alias);
}

function cust_group_path_alias_update(Drupal\path_alias\PathAliasInterface $path_alias) {
   update_group_alias($path_alias);
}
*/

function create_path_alias($path, $alias) {
  $path_alias_manager = \Drupal::entityTypeManager()->getStorage('path_alias');

  $path_alias = $path_alias_manager->create([
    'path' => $path,
    'alias' => $alias,
    'langcode' => 'de',
  ]);
  $path_alias->save();
}

function delete_path_alias($source) {
  $path_alias_manager = \Drupal::entityTypeManager()->getStorage('path_alias');
  $alias_objects = $path_alias_manager->loadByProperties(['path' => $source]);
  foreach ($alias_objects as $alias_object) {
    $alias_object->delete();
  }
}
