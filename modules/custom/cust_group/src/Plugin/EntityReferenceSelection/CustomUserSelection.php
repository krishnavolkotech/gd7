<?php

namespace Drupal\cust_group\Plugin\EntityReferenceSelection;

use Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection;
use Drupal\group\Entity\Group;

//use Drupal\user\Plugin\EntityReferenceSelection\UserSelection;

/**
 * Provides specific access control for the user entity type.
 *
 * @EntityReferenceSelection(
 *   id = "group:user",
 *   label = @Translation("Custom User selection"),
 *   entity_types = {"user"},
 *   group = "group",
 *   weight = 1
 * )
 */
class CustomUserSelection extends DefaultSelection {
  
  
  /**
   * {@inheritdoc}
   */
  protected function buildEntityQuery($match = NULL, $match_operator = 'CONTAINS') {
    $db = \Drupal::database();
    $target_type = $this->configuration['target_type'];
    $query = $this->entityManager->getStorage($target_type)->getQuery();
    $query->condition('mail',$match,$match_operator);
    $query->condition('status',1,'=');
    $que = $db->select('cust_profile', 'cp')
      ->fields('cp', ['uid']);
    $or = $que->orConditionGroup()
      ->condition('firstname', '%' . $match . '%', 'LIKE')
      ->condition('lastname', '%' . $match . '%', 'LIKE');
    $que = $que->condition($or)->execute()->fetchCol();
    if (!empty($que)) {
      $orp = $query->orConditionGroup()->condition('uid', (array) $que, 'IN');
      $query->condition($orp);
    }
    $query->condition('uid', [0], 'NOT IN');
    return $query;
  }
  
  
  public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
    $options = parent::getReferenceableEntities($match, $match_operator, $limit);
    // TODO: Change the autogenerated stub
    $target_type = $this->configuration['target_type'];
    $entities = $this->entityManager->getStorage($target_type)
      ->loadMultiple(array_keys($options[$target_type]));
    $users = [];
    $group = $this->configuration['handler_settings']['hzd_group'];
    foreach ($entities as $entity) {
      $que = \Drupal::database()->select('inactive_users', 'inf')
        ->fields('inf')
        ->condition('uid',$entity->id())
        ->execute()
      ->fetchCol();
      if($group->getMember($entity) || !empty($que)){
        continue;
      }
      $bundle = $entity->bundle();
      $users[$bundle][$entity->id()] = $entity->getDisplayName() . '(' . $entity->getEmail() . ')';
    }
    return $users;
  }
  
  
}
