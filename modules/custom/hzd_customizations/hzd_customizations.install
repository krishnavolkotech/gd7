<?php

/**
 * @file
 */

/**
 * Implements hook_uninstall().
 */

/**
 *
 */
function hzd_customizations_uninstall() {
  \Drupal::configFactory()->getEditable('planning.settings')->delete();
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8002.
 */
function hzd_customizations_update_8002(&$sandbox) {
  $sql = "SELECT uid 
          FROM {users_field_data} 
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership') 
                  and uid != 0 and uid <= 1500 ";
  $users = db_query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  drupal_set_message('Module hzd_customizations Update # 8002 () was executed successfully.');
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8004.
 */
function hzd_customizations_update_8003(&$sandbox) {
  $sql = "SELECT uid 
          FROM {users_field_data} 
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership') 
                  and uid != 0 and uid between 1500 and 2500";
  $users = db_query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  drupal_set_message('Module hzd_customizations Update # 8003 () was executed successfully.');
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8004.
 */
function hzd_customizations_update_8004(&$sandbox) {
  $sql = "SELECT uid 
          FROM {users_field_data} 
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership') 
                  and uid != 0 and uid between 2499 and 3500";
  $users = db_query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  drupal_set_message('Module hzd_customizations Update # 8004 () was executed successfully.');
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8004.
 */
function hzd_customizations_update_8005(&$sandbox) {
  $sql = "SELECT uid 
          FROM {users_field_data} 
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership') 
                  and uid != 0 and uid between 3499 and 10000";
  $users = db_query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  drupal_set_message('Module hzd_customizations Update # 8005 () was executed successfully.');
}


function hzd_customizations_update_8006(&$sandbox) {
  $sql = "SELECT uid from users u  
          LEFT OUTER JOIN {nsm_user_role} nur on u.uid = nur.user_id 
          WHERE  nur.user_id IS NULL";
  $users = db_query($sql)->fetchAll();
  foreach($users as $user) {
    insert_nsm_role($user->uid);
  }
  drupal_set_message('Module hzd_customizations Update # 8006 is executed successfully.');
}

function hzd_customizations_update_8012(&$sandbox) {
    $gid = 83;
    if (!isset($sandbox['total'])) {
        $sql = "SELECT uid 
          FROM {users_field_data} 
          WHERE uid != 0";
        $users = db_query($sql, array(':gid' => $gid))->fetchAll();
        $sandbox['total'] = count($users);
        $sandbox['current'] = 0;
    }


    $increment = 10;
    $startLimit = $sandbox['current'];
    $endLimit = $sandbox['current'] + $increment;
    
    $select = "SELECT uid  FROM {users_field_data} ";
    $where = " WHERE uid != 0 ";

    $limit = ' limit ' . $startLimit . "  , ". $endLimit;
    $sql = $select . $where . $limit;
    $users = db_query($sql, array(':gid' => $gid))->fetchAll();

    if (count($users) > 0) {
        foreach($users as $uid) {
            $user = \Drupal\user\Entity\User::load($uid->uid);
            $group = \Drupal\group\Entity\Group::load($gid);
            $group->addMember($user);
            
            error_log(" Current : ". $sandbox['current']. "  UID  : ". $uid->uid . "  GID  ". $gid);
            $sandbox['current']++;
        }
    }

    drupal_set_message($sandbox['current'] . ' Users Processed.');
    if ($sandbox['total'] == 0) {
        $sandbox['#finished'] = 1;
    }
    else {
        $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    }
}


function hzd_customizations_update_8013(&$sandbox) {
    $gid = 83;
    if (!isset($sandbox['total'])) {
        $sql = "SELECT uid 
          FROM {users_field_data} 
          WHERE uid != 0 ";
        $sandbox['users'] = $users = db_query($sql, array(':gid' => $gid))->fetchAll();
        $sandbox['total'] = count($users);
        $sandbox['current'] = 0;
    }

    $increment = 1;
    $startLimit = $sandbox['current'];
    $endLimit = $sandbox['current'] + $increment;
    
    $sql_users = "SELECT uid 
          FROM {users_field_data} 
          WHERE uid != 0 ";
    $limit = ' limit ' . $startLimit . "  , ". $endLimit;
    $sql = $sql_users . $limit;

    $users = db_query($sql, array(':gid' => $gid))->fetchAll();
    if (count($users) > 0) {
        foreach($users as $uid) {
            Drupal\hzd_notifications\HzdNotificationsHelper::save_group_default_notifications($uid->uid, $gid, 0);
	    error_log(" Notification Current : ". $sandbox['current']. "  UID  : ". $uid->uid . "  GID  ". $gid);
	    //drupal_set_message(" Current : ". $sandbox['current']. "  UID  : ". $uid->uid . "  GID  ". $gid);
        $sandbox['current']++;
        }
    }
    //drupal_set_message($sandbox['current'] . ' Notficaions Processed.');
        
    if ($sandbox['total'] == 0) {
        $sandbox['#finished'] = 1;
    }
    else {
        $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    }
    
}

function hzd_customizations_update_8014() {
  $field_storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('boolean')
    ->setLabel(t('Menu Separator'))
    ->setDescription(t('Displays Separator Line on top of Menu Item'))
    ->setReadOnly(TRUE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);
  
  \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition('menu_separator', 'menu_link_content', 'menu_link_content', $field_storage_definition);
}