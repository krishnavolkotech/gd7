<?php

/**
 * @file
 */



/**
 * Implements hook_uninstall().
 */

/**
 *
 */
function hzd_customizations_uninstall() {
  \Drupal::configFactory()->getEditable('planning.settings')->delete();
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8002.
 */
function hzd_customizations_update_8002(&$sandbox) {
  $sql = "SELECT uid
          FROM {users_field_data}
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership')
                  and uid != 0 and uid <= 1500 ";
  $users = \Drupal::database()->query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  \Drupal::messenger()->addMessage('Module hzd_customizations Update # 8002 () was executed successfully.');
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8004.
 */
function hzd_customizations_update_8003(&$sandbox) {
  $sql = "SELECT uid
          FROM {users_field_data}
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership')
                  and uid != 0 and uid between 1500 and 2500";
  $users = \Drupal::database()->query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  \Drupal::messenger()->addMessage('Module hzd_customizations Update # 8003 () was executed successfully.');
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8004.
 */
function hzd_customizations_update_8004(&$sandbox) {
  $sql = "SELECT uid
          FROM {users_field_data}
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership')
                  and uid != 0 and uid between 2499 and 3500";
  $users = \Drupal::database()->query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  \Drupal::messenger()->addMessage('Module hzd_customizations Update # 8004 () was executed successfully.');
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8004.
 */
function hzd_customizations_update_8005(&$sandbox) {
  $sql = "SELECT uid
          FROM {users_field_data}
          WHERE uid NOT IN (SELECT entity_id from {group_content_field_data}
                                           WHERE gid = 77 and type = 'open-group_membership')
                  and uid != 0 and uid between 3499 and 10000";
  $users = \Drupal::database()->query($sql)->fetchAll();
  if (count($users) > 0) {
    foreach($users as $uid) {
      $user = \Drupal\user\Entity\User::load($uid->uid);
      $group = \Drupal\group\Entity\Group::load(77);
      $group->addMember($user);
    }
  }
  \Drupal::messenger()->addMessage('Module hzd_customizations Update # 8005 () was executed successfully.');
}


function hzd_customizations_update_8006(&$sandbox) {
  $sql = "SELECT uid from users u
          LEFT OUTER JOIN {nsm_user_role} nur on u.uid = nur.user_id
          WHERE  nur.user_id IS NULL";
  $users = \Drupal::database()->query($sql)->fetchAll();
  foreach($users as $user) {
    insert_nsm_role($user->uid);
  }
  \Drupal::messenger()->addMessage('Module hzd_customizations Update # 8006 is executed successfully.');
}

function hzd_customizations_update_8012(&$sandbox) {
    $gid = 83;
    if (!isset($sandbox['total'])) {
        $sql = "SELECT uid
          FROM {users_field_data}
          WHERE uid != 0";
        $users = \Drupal::database()->query($sql, array(':gid' => $gid))->fetchAll();
        $sandbox['total'] = count($users);
        $sandbox['current'] = 0;
    }


    $increment = 10;
    $startLimit = $sandbox['current'];
    $endLimit = $sandbox['current'] + $increment;

    $select = "SELECT uid  FROM {users_field_data} ";
    $where = " WHERE uid != 0 ";

    $limit = ' limit ' . $startLimit . "  , ". $endLimit;
    $sql = $select . $where . $limit;
    $users = \Drupal::database()->query($sql, array(':gid' => $gid))->fetchAll();

    if (count($users) > 0) {
        foreach($users as $uid) {
            $user = \Drupal\user\Entity\User::load($uid->uid);
            $group = \Drupal\group\Entity\Group::load($gid);
            $group->addMember($user);

            error_log(" Current : ". $sandbox['current']. "  UID  : ". $uid->uid . "  GID  ". $gid);
            $sandbox['current']++;
        }
    }

    \Drupal::messenger()->addMessage($sandbox['current'] . ' Users Processed.');
    if ($sandbox['total'] == 0) {
        $sandbox['#finished'] = 1;
    }
    else {
        $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    }
}


function hzd_customizations_update_8013(&$sandbox) {
    $gid = 83;
    if (!isset($sandbox['total'])) {
        $sql = "SELECT uid
          FROM {users_field_data}
          WHERE uid != 0 ";
        $sandbox['users'] = $users = \Drupal::database()->query($sql, array(':gid' => $gid))->fetchAll();
        $sandbox['total'] = count($users);
        $sandbox['current'] = 0;
    }

    $increment = 1;
    $startLimit = $sandbox['current'];
    $endLimit = $sandbox['current'] + $increment;

    $sql_users = "SELECT uid
          FROM {users_field_data}
          WHERE uid != 0 ";
    $limit = ' limit ' . $startLimit . "  , ". $endLimit;
    $sql = $sql_users . $limit;

    $users = \Drupal::database()->query($sql, array(':gid' => $gid))->fetchAll();
    if (count($users) > 0) {
        foreach($users as $uid) {
            Drupal\hzd_notifications\HzdNotificationsHelper::save_group_default_notifications($uid->uid, $gid, 0);
	    error_log(" Notification Current : ". $sandbox['current']. "  UID  : ". $uid->uid . "  GID  ". $gid);
	    //\Drupal::messenger()->addMessage(" Current : ". $sandbox['current']. "  UID  : ". $uid->uid . "  GID  ". $gid);
        $sandbox['current']++;
        }
    }
    //\Drupal::messenger()->addMessage($sandbox['current'] . ' Notficaions Processed.');

    if ($sandbox['total'] == 0) {
        $sandbox['#finished'] = 1;
    }
    else {
        $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    }

}

function hzd_customizations_update_8014() {
  $field_storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('boolean')
    ->setLabel(t('Menu Separator'))
    ->setDescription(t('Displays Separator Line on top of Menu Item'))
    ->setReadOnly(TRUE)
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition('menu_separator', 'menu_link_content', 'menu_link_content', $field_storage_definition);
}
/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8061 changing quickinfo published nodes to release management group.
 */
function hzd_customizations_update_8061() {
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => 'moderate-group_node-quickinfo',
      'gid' => QUICKINFO,
    ]);
  if(!empty($group_contents)){
    foreach($group_contents as $group_content){
      $nodeId = $group_content->getEntity()->id();
      $isNodePublished = $group_content->getEntity()->isPublished();
      if($isNodePublished){
        $group_content->delete();
        /**
         * On quickinfo publish add group content relation with release management
         */
        $releaseManagementGroup = \Drupal\group\Entity\Group::load(RELEASE_MANAGEMENT);
        $quickinfo_gnode_plugin = $releaseManagementGroup->getGroupType()->getContentPlugin('group_node:quickinfo');
        $releaseManagementGroupContentValues = [
          'type' => $quickinfo_gnode_plugin->getContentTypeConfigId(),
          'gid' => RELEASE_MANAGEMENT,
          'entity_id' => $nodeId,
        ];

        $releaseManagementGroupContent = \Drupal::entityTypeManager()
            ->getStorage('group_content')
            ->create($releaseManagementGroupContentValues)
            ->save();
        \Drupal::messenger()->addMessage("Group node id " . $nodeId);
      }
    }
  }
}
/**
 * parallel 8012
 * Implements hook_update_N() on Module hzd_customizarions Update # 8062.
 * Adds All Users who are not member of group 73 (BRMK) yet to the group
 */
function hzd_customizations_update_8062(&$sandbox) {
  $gid = 73;
  if (!isset($sandbox['total'])) {
      $sql = "SELECT uid
        FROM {users_field_data}
        WHERE uid != 0";
      $users = \Drupal::database()->query($sql, array(':gid' => $gid))->fetchAll();
      $sandbox['total'] = count($users);
      $sandbox['current'] = 0;
  }


  $increment = 10;
  $startLimit = $sandbox['current'];
  $endLimit = $sandbox['current'] + $increment;

  $select = "SELECT uid  FROM {users_field_data} ";
  $where = " WHERE uid != 0 ";

  $limit = ' limit ' . $startLimit . "  , ". $endLimit;
  $sql = $select . $where . $limit;
  $users = \Drupal::database()->query($sql, array(':gid' => $gid))->fetchAll();

  if (count($users) > 0) {
      foreach($users as $uid) {
          $user = \Drupal\user\Entity\User::load($uid->uid);
          $group = \Drupal\group\Entity\Group::load($gid);
          $group->addMember($user);

          error_log(" Current : ". $sandbox['current']. "  UID  : ". $uid->uid . "  GID  ". $gid);
          $sandbox['current']++;
      }
  }

  \Drupal::messenger()->addMessage($sandbox['current'] . ' Users Processed.');
  if ($sandbox['total'] == 0) {
      $sandbox['#finished'] = 1;
  }
  else {
      $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8002.
 * Move all existing news nodes to bpk group.
 * Assuming the group id of bpk group is 21.
 */
function hzd_customizations_update_8063(&$sandbox) {
  $gid = 21;
  if (!isset($sandbox['total'])) {
      $sql = "SELECT nid FROM {node_field_data} WHERE type = :type";
      $nodes = \Drupal::database()->query($sql, array(':type' => 'news'))->fetchAll();
      $sandbox['total'] = count($nodes);
      $sandbox['current'] = 0;
  }

  $increment = 10;
  $startLimit = $sandbox['current'];
  $endLimit = $sandbox['current'] + $increment;

  $select = "SELECT nid  FROM {node_field_data} ";
  $where = " WHERE type = :type ";

  $limit = ' limit ' . $startLimit . "  , ". $endLimit;
  $sql = $select . $where . $limit;
  $nodes = \Drupal::database()->query($sql, array(':type' => 'news'))->fetchAll();

  if (count($nodes) > 0) {
      foreach($nodes as $nid) {
          saveNewstoBPK($nid->nid, 'group_node:news', 21);
          error_log(" Current : ". $sandbox['current']. "  UID  : ". $nid->nid . "  GID  ". $gid);
          $sandbox['current']++;
      }
  }

  \Drupal::messenger()->addMessage($sandbox['current'] . ' News Processed(moving existing news to bpk group).');
  if ($sandbox['total'] == 0) {
      $sandbox['#finished'] = 1;
  }
  else {
     $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8002.
 * Changing the legal module weight.
 */
function hzd_customizations_update_8065(&$sandbox) {
   module_set_weight('hzd_user_customizations', 102);	
   module_set_weight('legal', 101);
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8066.
 * Moving all depending deployed Releases to Rlease Management  group (ID : 1)
 */
function hzd_customizations_update_8066(&$sandbox) {
  $gid = 1;
  $sql = "select nid
          from {node_field_data} nfd
	  left join {group_content_field_data} gfc on nfd.nid = gfc.entity_id
	  where nfd.type= :type and gfc.label is null ";
  $nodes = \Drupal::database()->query($sql, array(':type' => 'deployed_releases'))->fetchAll();

  if (count($nodes) > 0) {
      foreach($nodes as $nid) {
          saveNewstoBPK($nid->nid, 'group_node:deployed_releases', $gid);
      }
  }
  \Drupal::messenger()->addMessage('Deployed releases Processed to Group Release Management.');
}

/**
 * Implements hook_update_N() on Module hzd_customizarions Update # 8067.
 * Removing special Charecters from URl Aliases
 */
function hzd_customizations_update_8068(&$sandbox) {
  custom_find_all_alias_special_charecters();
  \Drupal::messenger()->addMessage('Replaced Special charecters in Path alias and added redirect.');
}


function custom_find_all_alias_special_charecters() {
    $db = \Drupal::database();
    $result = $db->select('path_alias', 'pa')
            ->fields('pa', array('id', 'alias', 'path'))
            ->condition('alias', '', '!=');
    $val = $result->execute()->fetchAll();
    $states = array();
    $count = 0;
    $nodes = [];
    foreach ($val as $aliases) {
        if (preg_match('/[\'^£$%&*()}{@#~?><>,|=+¬äöüß]/', $aliases->alias)) {
          $node_id = trim($aliases->path, "/node/");
	  $node = \Drupal\node\Entity\Node::load($node_id);


	  if ($node->getType() == 'page') {
           custom_manual_redirect_save($node_id, $aliases->alias, $node);
           $nodes[$node_id] = $aliases->alias;
	 }
      }
    }
}

function custom_manual_redirect_save($nid, $old_alias, $node) {
  $path_details = explode("/", $old_alias);
  $group = '';
  if (count($path_details) > 1) {
    $group = $path_details[1];
    unset($path_details[0]);
    unset($path_details[1]);
  }

  $alias_string = implode("/", $path_details);
  $cleanedtitle = custom_url_cleaner($alias_string);
  //$cleanedtitle = \Drupal::service("pathauto.alias_cleaner")->cleanString($alias_string);
  $new_alias = $group? "/". $group . "/".$cleanedtitle: "/".$cleanedtitle;

  $path_alias_storage = \Drupal::entityTypeManager()->getStorage('path_alias');
  $alias_objects = $path_alias_storage->loadByProperties([
       'path' => "/node/".$nid,
  ]);


  if (count($alias_objects) > 0) {
    foreach($alias_objects as $alias_object) {
      $alias_object->delete();
    }
  }

   $path_alias = \Drupal::entityTypeManager()->getStorage('path_alias')->create([
    'path' => "/node/" . $nid,
      'alias' => $new_alias,
      'langcode' => "de",
    ]);
    $path_alias->save();
    \Drupal::entityTypeManager()->getStorage('path_alias')->save($path_alias);


  Drupal\redirect\Entity\Redirect::create([
    'redirect_source' => trim($old_alias, '/'),
    'redirect_redirect' => 'internal:'.'/node/'.$nid,
    'language' => 'de',
    'status_code' => '301',
  ])->save();

}
