<?php

/**
 * @file
 */

use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;
use Drupal\hzd_services\HzdservicesStorage;
if(SITE_ADMIN){
    define('SITE_ADMIN', 'site_administrator');
}

define('KONSONS', \Drupal::config('hzd_release_management.settings')->get('konsens_service_term_id'));
define('RELEASE_MANAGEMENT', 32);

/**
 * Implements hook_mail.
 */
function hzd_customizations_mail($key, &$message, $params) {
    $options = array(
        'langcode' => $message['langcode'],
    );
    switch ($key) {
        case 'immediate_notifications':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = $params['subject'];
            $message['body'][] = Html::escape($params['message']);
            $message['headers']['Content-Type'] = ($params['preference'] == 'html') ? 'text/html; charset=UTF-8; format=flowed; delsp=yes' : 'text/plain; charset=UTF-8; format=flowed; delsp=yes';
            break;

        case 'custom_mails':
            $message['subject'] = $params['subject'];
            $message['body'][] = Html::escape($params['body']);
            if ($params['Bcc']) {
                $message['headers']['Bcc'] = $params['Bcc'];
            }
            break;

        case 'inactive_user':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = $params['subject'];
            $message['body'][] = Html::escape($params['message']);
            $message['headers']['Content-Type'] = ($params['preference'] == 'html') ? 'text/html; charset=UTF-8; format=flowed; delsp=yes' : 'text/plain; charset=UTF-8; format=flowed; delsp=yes';
            break;

        case 'hzd_customizations_additional_email':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t($params['subject'], $options);
            $message['body'][] = $params['message'];
            $message['body'][] = $params['pdflink'];
            break;
    }
}

/**
 * Get downtime services in service profile dependent dropdown.
 */
function get_related_downtime_services($type) {
    // Global $user;.
    $user = Drupal::currentUser();
    $user_roles = $user->getRoles();

    if (in_array('site_administrator', $user_roles)) {
        $dependent_Services = HzdservicesStorage::get_related_services($type);
        $request = \Drupal::request()->getRequestUri();
        unset($dependent_Services[$_REQUEST['service']]);
        $current_path = Url::fromRoute('<current>');
        $path = explode("/", $current_path->getInternalPath());
        if ($path['0'] == 'node' && is_numeric($path['1']) && $path['2'] == 'edit') {
            $query = \Drupal::database()->select('node__field_dependent_service', 'nfds');
            $query->addField('nfds', 'field_dependent_service_target_id');
            $query->condition('nfds.entity_id', '1', '=');
            $service_id = $query->execute()->fetchField();
            unset($dependent_Services[$service_id]);
        }
        return $dependent_Services;
    }
    else {
        return array(0 => t("This list is only editable by site admins"));
    }
}

/**
 * Get related file attachments of planning files.
 */
function get_related_files($planning_filename) {
    $fids = db_query("SELECT field_upload_planning_file_target_id fid, field_upload_planning_file_display display FROM {node__field_upload_planning_file} WHERE entity_id in (SELECT entity_id FROM {node__field_planning_file_type} WHERE field_planning_file_type_value =  :planning_filename)", array(':planning_filename' => $planning_filename));
    $files_details = '';
    foreach ($fids as $fid) {
        $fileObject = db_query("SELECT * FROM {file_managed} WHERE fid = :fid", array(':fid' => $fid->fid))->fetchAll();
        if ($fid->display == 1) {
            // $icon = theme('filefield_icon', $fileObject);.
            $files_heading = "<p><b>Dateien:</b></p>";
            $files_details .= '<div class="filefield-file clear-block">';
            // $files_details .= $icon . ' ' . l($fileObject['filename'], file_create_url($fileObject['filepath']), array('attributes' => array('target' => '_blank')));.
            $files_details .= '<a target= "_blank" href="' . file_create_url($fileObject[0]->uri) . '">' . $fileObject[0]->filename;
            $files_details .= " (" . date('d.m.Y H:i:s', $fileObject[0]->changed) . ")";
            $files_details .= '</div>';
        }
    }
    // Return $files;.
    return array('#markup' => $files_heading . $files_details);
}

/**
 * implements hook_form_alter
 */
function hzd_customizations_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $user = Drupal::currentUser();
    if ($form_id == 'node_quickinfo_form' || $form_id == 'node_quickinfo_edit_form' || $form_id == 'node_quickinfo_gnode-form_form') {
        $form['actions']['publish']['#value'] = t('Publish');
        $form['field_custom_title']['#prefix'] = t('<h2>1 Meta-Daten</h2>');
        $form['field_intial_situation']['#prefix'] = t('<h2>2 Fachlich-inhaltliche Angaben</h2>');
        $form['actions']['unpublish']['#value'] = t('Save');
        $form['actions']['publish']['#attributes'] = array('class' => array('node-quickinfo-publish'));
        $form['#attached']['library'][] = 'hzd_customizations/hzd_node_quickinfo';
        $form['field_author_name']['widget'][0]['value']['#value'] = $user->getAccountName();
        $db = \Drupal::database();
        $result = $db->select('cust_profile', 'cp');
        $result->join('states', 's', 'cp.state_id = s.id');
        $result->fields('s', array('state'))
            ->condition('cp.uid', $user->getAccount()->id());
        $state_name = $result->execute()->fetchField();
        $form['field_author_state']['widget'][0]['value']['#value'] = $state_name;
    }
    if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-group-members-lists-page-1') {

        $db = \Drupal::database();
        $result = $db->select('states', 's')
            ->fields('s', array('abbr', 'state'))
            ->condition('s.entity', 1, '!=');
        $val = $result->execute()->fetchAll();
        $states = array();
        foreach($val as $user_states_list) {
            $states[$user_states_list->abbr] = $user_states_list->state;
        }
        $form['abbr'] = array(
            '#type' => 'select',
            '#options' => $states,
            '#default_value' => isset($_GET['abbr']) ? $_GET['abbr'] : '',
        );
    }
    if ($form_id == 'views_exposed_form' && ($form['#id'] == 'views-exposed-form-user-admin-people-page-1' || $form['#id'] == 'views-exposed-form-user-admin-people-page-2')) {
        $db = \Drupal::database();
        $result = $db->query('SELECT SUBSTRING(cust_profile.lastname, 1, 1) AS lname FROM {users_field_data} LEFT JOIN {cust_profile} ON users_field_data.uid = cust_profile.uid GROUP BY lname ORDER BY lname ASC ');
        $glossarydata = array();
        foreach ($result as $gloss) {
            $url = Url::fromUserInput('/admin/people/list/' . strtolower($gloss->lname));
            $glossarydata[] = '<span class="user-group-list">'.\Drupal::l($gloss->lname, $url).'</span>';
        }
        $glossary = implode(' | ', $glossarydata);
        $form['glossarylist'] = array('#markup' => $glossary, '#theme_wrappers' => array('form_element'));
    }
    
    if ($form_id == 'node_deployed_releases_edit_form') {
        $rel = \Drupal::request()->query->get('rel');
        $form['field_earlywarning_release']['widget']['#default_value'] = 13052;
        //  rel
    }
    /**
     *  TO DO 
     */
    
//    if($form_id == "og_confirm_subscribe") {
//         $node_data = node_load($form['gid']['#value']);
//         if($node_data->og_selective == OG_MODERATED) {
//            $form['request']['#required'] = true;
//            $form['#validate'][] = 'og_confirm_subscribe_request_validate';
//         }
//      }
//  
    /**
     * need to check 
     */
    if (($form_id == 'node_non_production_environment_delete_form') || ($form_id == 'node_planning_files_delete_form')) {
      $node = \Drupal\node\Entity\Node::load($form['nid']['#value']);
      if ($node->type == 'non_production_environment') {
        $route_name = 'hzd_customizations.manage_non_production_environment';
        $url = Url::fromRoute($route_name);
        $link = Link::fromTextAndUrl(t('Cancel'), $url);
        $form['#redirect'] = 'admin/config/manage-non-production-environment';
        $form['actions']['cancel']['#value'] = $link;
      }
      if ($node->type == 'planning_files') {
        $route_name = 'hzd_release_management.display_planning_files';
        $url = Url::fromRoute($route_name);
        $link = Link::fromTextAndUrl(t('Cancel'), $url);
        $form['#redirect'] = 'group/' . RELEASE_MANAGEMENT . '/planning-files';
        $form['actions']['cancel']['#value'] = $link; 
      }    
    }
    
    if ($form_id == 'node_non_production_environment_gnode_form_form') {
        if (!$form['nid']['#value']) {
            $form['field_non_production_state']['#default_value'][0]['value'] = \Drupal::request()->query->get('sid');
        }
        $form['#redirect'] = 'admin/settings/manage-non-production-environment';
    }

    if ($form_id == 'node_planning_files_gnode_form_form') {
        $form['book']['#prefix'] = "<div class = 'hide_content'>";
        $form['book']['#suffix'] = '</div>';
        $form['menu']['#prefix'] = "<div class = 'hide_content'>";
        $form['menu']['#suffix'] = '</div>';
        $form['print']['#prefix'] = "<div class = 'hide_content'>";
        $form['print']['#suffix'] = '</div>';
        $form['path']['#prefix'] = "<div class = 'hide_content'>";
        $form['path']['#suffix'] = '</div>';
        $form['options']['#prefix'] = "<div class = 'hide_content'>";
        $form['options']['#suffix'] = '</div>';
        $form['#redirect'] = 'group/' . RELEASE_MANAGEMENT . '/planning-files';
    }
    /**
     * to do 
     */
//    if ($form_id == 'downtimes_node_form') {
//        $form['#submit'][] = 'custom_maintenance_submit';
//    }

// node-service-profile-gnode-form-form
    // hide menu, path and body field in Service profile form
    if ($form_id == 'node_service_profile_form' || $form_id == 'node_service_profile_gnode_form_form') {
        $service = $form_state->getValue('service');
        $query = \Drupal::database()->select('node_field_data', 'nfd');
        $query->Fields('nfd', array('title'));
        $query->condition('nfd.nid', $service);
        $title =  $query->execute()->fetchField();

        $form['title']['#prefix'] = "<div class = 'hide_content'>";
        $form['title']['#suffix'] = '</div>';
        if ($form['nid']['#value'] == '' && $title != '') {
            $form['title']['#default_value'] = t('Service Profile for ' . $title);
            $form['field_dependent_service']['#default_value'][0]['nid'] = \Drupal::request()->query->get('service');
        }
        $form['field_dependent_service']['#prefix'] = "<div class = 'hide_content'>";
        $form['field_dependent_service']['#suffix'] = '</div>';

        //$form['field_dependent_downtimeservices']['#pre_render'] = array('get_related_downtime_services');
        $form['menu']['#prefix'] = "<div class = 'hide_content'>";
        $form['menu']['#suffix'] = '</div>';

        $form['path']['#prefix'] = "<div class = 'hide_content'>";
        $form['path']['#suffix'] = '</div>';

        $form['body_field']['#prefix'] = "<div class = 'hide_content'>";
        $form['body_field']['#suffix'] = '</div>';
    }
    
// group-content-moderate-group-node-quickinfo-delete-form
    if ($form_id == 'node_quickinfo_gnode_form_form' || $form_id == 'node_quickinfo_form') {
      $form['#title'] = (t("Report DC QuickInfo"));

    if ($form['nid']['#value']) {
      $query = \Drupal::database()->select('node__field_unique_id', 'nfui');
      $query->Fields('nfui', array('field_unique_id_value'));
      $query->condition('nfui.nid', $form['nid']['#value']);
      $uniue_id_val =  $query->execute()->fetchField();

    }

    $form['attachments']['#title'] = t('2.13 File attachments');
    $form['attachments']['#prefix'] = '<div class="attachments quickinfo-attachments">';
    $form['field_unique_id']['#prefix'] = '<div class="uniq_id">';
    $form['field_unique_id']['#suffix'] = '</div>';

    $form['field_author_name'][0]['#default_value']['value'] = $user->name;
    $form['field_author_name']['#prefix'] = '<div class="uniq_id">';
    $form['field_author_name']['#suffix'] = '</div>';
       
    
    $query = \Drupal::database()->select('states', 's');
    $query->Fields('s', array('state'));
    $query->condition('s.id', $user->user_state);
    $state = $query->execute()->fetchField();

    $form['quick_info_confirm_message'] = array(
      '#type' => 'item',
      '#prefix' => '<div class="confirm_message"><div>' . t("Are you sure you want to publish this quickinfo?") . '</div><div align="center"><input id = "confirm" type="button" value = ' . t("Publish") . '><input id = "cancel" type="button" value = ' . t("Cancel") . '></div>',
      '#suffix' => '</div><div class="blur-div">&nbps;</div>',
    );

    $form['field_author_state'][0]['#default_value']['value'] = $state;
    $form['field_author_state']['#prefix'] = '<div class="uniq_id">';
    $form['field_author_state']['#suffix'] = '</div>';

    $form['group_meta_data']['field_other_services']['#weight'] = -3;
    $form['group_meta_data']['field_related_transfer_number']['#weight'] = -4;
    $form['group_meta_data']['field_custom_title']['#weight'] = -5;

    $form['group_meta_data']['field_recipients']['#prefix'] = '<div class="field-recipients-checkbox">';
    $form['group_meta_data']['field_recipients']['#suffix'] = '</div>';
    $form['group_meta_data']['field_recipients']['#weight'] = -1;

    $form['group_meta_data']['checkall'] = array(
      '#type' => 'checkbox',
      '#title' => t('Select / Unselect all'),
      '#prefix' => '<div id="CheckboxAll">',
      '#suffix' => '</div>',
      '#weight' => -2,
    );

    $form['attachments']['#collapsed'] = FALSE;
    unset($form['menu']);
    unset($form['path']);
    unset($form['notifications']);

    $form['buttons']['submit']['#submit'][0] = 'cust_quick_info_node_form_publish';
    $form['buttons']['submit']['#value'] = t('Publish');
    $form['buttons']['submit']['#prefix'] = '<div id="publish_content">';
    $form['buttons']['submit']['#suffix'] = '</div>';

    $form['buttons']['publish'] = array(
      '#type' => 'submit',
      '#prefix' => '<div id="save_content">',
      '#suffix' => '</div>',
      '#value' => t('Save'),
      '#submit' => array('cust_quick_info_node_form_submit'),
    );
    $form['#validate'][] = 'custom_quickinfo';
  }


    //return $output;
}

/*
 * Submit function for quickinfo published content.
 */

function cust_quick_info_node_form_publish(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $user = Drupal::currentUser();
   
  $form_state->setValue('status', 1);
  
  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  
  $node = Node::create($node);
  $node->save();
  
  $route_name = 'entity.node';
  $url = Url::fromRoute($route_name, array(
          'node' => $node->nid,
          )
  );
        
  $node_link = Link::fromTextAndUrl(t('view'), $url);  
  
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  
  
  $t_args = array(
    '@type' => node_get_types('name', $node), 
    '%title' => $node->title
      );

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    unset($form_state['rebuild']);
    $form_state->setValue('nid',  $node->nid);
    $form_state->setValue('redirect', 'node/' . $node->nid);

    $absolute_path = 'node/' . RELEASE_MANAGEMENT . '/rz-schnellinfos/'. $node->nid;
    $alias_path = 'release-management/rz-schnellinfos/'. $node->field_unique_id[0]['value'];
    
    db_query("INSERT INTO {url_alias} (src,dst) VALUES ('%s', '%s')", $absolute_path, $alias_path);
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
  }
}


/** 
 * Implements hook_views_query_alter().
 */
function hzd_customizations_views_query_alter(Drupal\views\ViewExecutable $view, Drupal\views\Plugin\views\query\Sql $query) {
    if ($view->id() == 'my_groups') {
        // Traverse through the 'where' part of the query.
        foreach ($query->where as &$condition_group) {
            foreach ($condition_group['conditions'] as &$condition) {
                if (strpos($condition['field'], 'groups_field_data_id')) {
                    $val = $condition['value'][':groups_field_data_id'];
                    if(empty($val)){
                        $val = [-1];
                    }
                    $condition['value'][':groups_field_data_id[]'] = $val;
                    unset($condition['value'][':groups_field_data_id']);
                    $condition['field'] = 'groups_field_data.id IN (:groups_field_data_id[])';
                }
            }
        }
     }
}