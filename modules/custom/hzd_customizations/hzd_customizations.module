<?php

/**
 * @file
 */

use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Utility\Token;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\entity_print\Controller\EntityPrintController;

use Drupal\hzd_services\HzdservicesStorage;
if(SITE_ADMIN){
    define('SITE_ADMIN', 'site_administrator');
}

/**
 * Implements hook_mail.
 */
function hzd_customizations_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'immediate_notifications':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = SafeMarkup::checkPlain($params['message']);
      $message['headers']['Content-Type'] = ($params['preference'] == 'html') ? 'text/html; charset=UTF-8; format=flowed; delsp=yes' : 'text/plain; charset=UTF-8; format=flowed; delsp=yes';
//      $message['headers']['Bcc'] = 'shiva.chevva@gmail.com';
      break;

    case 'custom_mails':
      $message['subject'] = $params['subject'];
      $message['body'][] = SafeMarkup::checkPlain($params['body']);
      if ($params['Bcc']) {
        $message['headers']['Bcc'] = $params['Bcc'];
      }
      break;
  }
}

/**
 * Implements hook_tokens().
 */
function hzd_customizations_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $token_service = \Drupal::token();

  $url_options = array('absolute' => TRUE);
  if (isset($options['langcode'])) {
    $url_options['language'] = \Drupal::languageManager()->getLanguage($options['langcode']);
    $langcode = $options['langcode'];
  }
  else {
    $langcode = NULL;
  }
  $replacements = array();
  if ($type == 'group') {
    $group = \Drupal::routeMatch()->getParameter('group');
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'title':
          $replacements[$original] = isset($group) ? str_replace(' ', '', $group->label()) : '';
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_token_info().
 */
function hzd_customizations_token_info() {
  $type = array(
    'name' => t('Groups'),
    'description' => t('Tokens related to individual groups.'),
    'needs-data' => 'group',
  );

  // Core tokens for group.
  $group['title'] = array(
    'name' => t("Title"),
  );

  return array(
    'types' => array('group' => $type),
    'tokens' => array('group' => $group),
  );
}

/**
 * Get downtime services in service profile dependent dropdown.
 */
function get_related_downtime_services($type) {
  // Global $user;.
  $user = Drupal::currentUser();
  $user_roles = $user->getRoles();

  if (in_array('site_administrator', $user_roles)) {
    $dependent_Services = HzdservicesStorage::get_related_services($type);
    $request = \Drupal::request()->getRequestUri();
    unset($dependent_Services[$_REQUEST['service']]);
    $current_path = Url::fromRoute('<current>');
    $path = explode("/", $current_path->getInternalPath());
    if ($path['0'] == 'node' && is_numeric($path['1']) && $path['2'] == 'edit') {
      $query = \Drupal::database()->select('node__field_dependent_service', 'nfds');
      $query->addField('nfds', 'field_dependent_service');
      $query->condition('nfds.entity_id', '1', '=');
      $service_id = $query->execute()->fetchField();
      unset($dependent_Services[$service_id]);
    }
    return $dependent_Services;
  }
  else {
    return array(0 => t("This list is only editable by site admins"));
  }
}

/**
 * Get related file attachments of planning files.
 */
function get_related_files($planning_filename) {
  $fids = db_query("SELECT field_upload_planning_file_target_id fid, field_upload_planning_file_display display FROM {node__field_upload_planning_file} WHERE entity_id in (SELECT entity_id FROM {node__field_planning_file_type} WHERE field_planning_file_type_value =  :planning_filename)", array(':planning_filename' => $planning_filename));
    $files_details = '';
  foreach ($fids as $fid) {
    $fileObject = db_query("SELECT * FROM {file_managed} WHERE fid = :fid", array(':fid' => $fid->fid))->fetchAll();
    if ($fid->display == 1) {
      // $icon = theme('filefield_icon', $fileObject);.
      $files_heading = "<p><b>Dateien:</b></p>";
      $files_details .= '<div class="filefield-file clear-block">';
      // $files_details .= $icon . ' ' . l($fileObject['filename'], file_create_url($fileObject['filepath']), array('attributes' => array('target' => '_blank')));.
      $files_details .= '<a target= "_blank" href="' . file_create_url($fileObject[0]->uri) . '">' . $fileObject[0]->filename;
      $files_details .= " (" . date('d.m.Y H:i:s', $fileObject[0]->changed) . ")";
      $files_details .= '</div>';
    }
  }
  // Return $files;.
  return array('#markup' => $files_heading . $files_details);
}

/**
 * implements hook_form_alter
 */
function hzd_customizations_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_quickinfo_form' || $form_id == 'node_quickinfo_edit_form') {
    $form['actions']['publish']['#value'] = t('Publish');
    $form['actions']['unpublish']['#value'] = t('Save');
    $form['actions']['publish']['#attributes'] = array('class' => array('node-quickinfo-publish'));
    $form['#attached']['library'][] = 'hzd_customizations/hzd_node_quickinfo';
  }
  return $form;
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function hzd_customizations_node_presave(NodeInterface $node) {
    if ($node->getType() == 'quickinfo' && $node->isPublished()) {
        //$node->upload[] = array('target_id' => 1640, 'display' => 1, ); //for add file
      if (!$node->field_unique_id->value) {
          $quick_info_id = db_query("SELECT max(field_unique_id_value) FROM {node__field_unique_id}")->fetchField();
          $default_unique_id = \Drupal::config('hzd_customizations.settings')->get('quickinfo_default_unique_id', NULL);
          $quick_info_val = empty($quick_info_id) ? $default_unique_id : ($quick_info_id + 1);
          $node->set('field_unique_id', $quick_info_val);
      }
    }
}

/**
 * Implements hook__views_query_alter().
 */
function hzd_customizations_views_query_alter(Drupal\views\ViewExecutable $view, Drupal\views\Plugin\views\query\Sql $query) {
    if ($view->id() == 'my_groups') {
        // Traverse through the 'where' part of the query.
        foreach ($query->where as &$condition_group) {
            foreach ($condition_group['conditions'] as &$condition) {
                if (strpos($condition['field'], 'groups_field_data_id')) {
                    $db = \Drupal::database();
                    $result = $db->select('group_content_field_data', 'gcfd');
                    $result->fields('gcfd', array('gid'))
                        ->condition('gcfd.entity_id', \Drupal::currentUser()->id());
                    $val = $result->execute()->fetchCol();
                    $condition['value'][':groups_field_data_id[]'] = $val;
                }
            }
        }
    }
}

/**
 * Implementation of  hook_form_alter()
 */
/**
function hzd_customizations_form_alter(&$form, $form_state, $form_id) {
/**
  global $user;
  
  if($form_id == "og_confirm_subscribe") {
     $node_data = node_load($form['gid']['#value']);
     if($node_data->og_selective == OG_MODERATED) {
        $form['request']['#required'] = true;
        $form['#validate'][] = 'og_confirm_subscribe_request_validate';
     }
  }
  if ($form_id == 'node_delete_confirm') {
    $node = node_load($form['nid']['#value']);
    if ($node->type == 'non_production_environment_node_form') {
      $form['#redirect'] = 'admin/settings/manage-non-production-environment';
      $form['actions']['cancel']['#value'] = l("Cancel", "admin/settings/manage-non-production-environment");
    }
    if ($node->type == 'planning_files') {
      $form['#redirect'] = 'node/' . RELEASE_MANAGEMENT . '/planning-files';
      $form['actions']['cancel']['#value'] = l("Cancel", "node/" . RELEASE_MANAGEMENT . "/planning-files");
    }    
  }
  if ($form_id == 'non_production_environment_node_form') {
    if (!$form['nid']['#value']) {
      $form['field_non_production_state']['#default_value'][0]['value'] = $_GET['sid'] ? $_GET['sid'] : '';
    }
    $form['#redirect'] = 'admin/settings/manage-non-production-environment';
  }

  if ($form_id == 'planning_files_node_form') {
    $form['book']['#prefix'] = "<div class = 'hide_content'>";
    $form['book']['#suffix'] = '</div>';
    $form['menu']['#prefix'] = "<div class = 'hide_content'>";
    $form['menu']['#suffix'] = '</div>';
    $form['print']['#prefix'] = "<div class = 'hide_content'>";
    $form['print']['#suffix'] = '</div>';
    $form['path']['#prefix'] = "<div class = 'hide_content'>";
    $form['path']['#suffix'] = '</div>';
    $form['options']['#prefix'] = "<div class = 'hide_content'>";
    $form['options']['#suffix'] = '</div>';
    $form['#redirect'] = 'node/' . RELEASE_MANAGEMENT . '/planning-files';
  }
  if ($form_id == 'downtimes_node_form' && $form['downtime_type']['#default_value']) {
    drupal_set_title(t("Create Maintenance"));
    $form['maintenance_result'] = array(
      '#type' => 'hidden',
      '#default_value' => '',
      '#weight' => -1,
    );
    $form['maintenance_type'] = array(
      '#type' => 'hidden',
      '#default_value' => '',
      '#weight' => -1,
    );
    $form['#validate'][] = 'custom_maintenance_validate';
    //$form['#submit'][] = 'custom_maintenance_submit';
    $form['#after_build'][] = 'downtime_maintenance_validation';
    pass_maitenance_value();
  }
  if ($form_id == 'downtimes_node_form') {
    $form['#submit'][] = 'custom_maintenance_submit';    
  }

  // hide menu, path and body field in Service profile form
  if ($form_id == 'service_profile_node_form') {

    $title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $_REQUEST['service']));
    $form['title']['#prefix'] = "<div class = 'hide_content'>";
    $form['title']['#suffix'] = '</div>';
    if ($form['nid']['#value'] == '' && $title != '') {
      $form['title']['#default_value'] = t('Service Profile for ' . $title);
      $form['field_dependent_service']['#default_value'][0]['nid'] = $_GET['service'];
    }
    $form['field_dependent_service']['#prefix'] = "<div class = 'hide_content'>";
    $form['field_dependent_service']['#suffix'] = '</div>';

    //$form['field_dependent_downtimeservices']['#pre_render'] = array('get_related_downtime_services');
    $form['menu']['#prefix'] = "<div class = 'hide_content'>";
    $form['menu']['#suffix'] = '</div>';

    $form['path']['#prefix'] = "<div class = 'hide_content'>";
    $form['path']['#suffix'] = '</div>';

    $form['body_field']['#prefix'] = "<div class = 'hide_content'>";
    $form['body_field']['#suffix'] = '</div>';
  }

  if ($form_id == 'quickinfo_node_form') {
    drupal_set_title(t("Report DC QuickInfo"));

    if ($form['nid']['#value']) {
      $uniue_id_val = db_result(db_query("SELECT field_unique_id_value FROM {content_type_quickinfo} 
                                          WHERE nid = %d", $form['nid']['#value']));
    }

    $form['attachments']['#title'] = t('2.13 File attachments');
    $form['attachments']['#prefix'] = '<div class="attachments quickinfo-attachments">';
    $form['field_unique_id']['#prefix'] = '<div class="uniq_id">';
    $form['field_unique_id']['#suffix'] = '</div>';

    $form['field_author_name'][0]['#default_value']['value'] = $user->name;
    $form['field_author_name']['#prefix'] = '<div class="uniq_id">';
    $form['field_author_name']['#suffix'] = '</div>';

    $state = db_result(db_query("SELECT state FROM {states} WHERE id = %d", $user->user_state));

    $form['quick_info_confirm_message'] = array(
      '#type' => 'item',
      '#prefix' => '<div class="confirm_message"><div>' . t("Are you sure you want to publish this quickinfo?") . '</div><div align="center"><input id = "confirm" type="button" value = ' . t("Publish") . '><input id = "cancel" type="button" value = ' . t("Cancel") . '></div>',
      '#suffix' => '</div><div class="blur-div">&nbps;</div>',
    );

    $form['field_author_state'][0]['#default_value']['value'] = $state;
    $form['field_author_state']['#prefix'] = '<div class="uniq_id">';
    $form['field_author_state']['#suffix'] = '</div>';

    $form['group_meta_data']['field_other_services']['#weight'] = -3;
    $form['group_meta_data']['field_related_transfer_number']['#weight'] = -4;
    $form['group_meta_data']['field_custom_title']['#weight'] = -5;

    $form['group_meta_data']['field_recipients']['#prefix'] = '<div class="field-recipients-checkbox">';
    $form['group_meta_data']['field_recipients']['#suffix'] = '</div>';
    $form['group_meta_data']['field_recipients']['#weight'] = -1;

    $form['group_meta_data']['checkall'] = array(
      '#type' => 'checkbox',
      '#title' => t('Select / Unselect all'),
      '#prefix' => '<div id="CheckboxAll">',
      '#suffix' => '</div>',
      '#weight' => -2,
    );

    $form['attachments']['#collapsed'] = FALSE;
    unset($form['menu']);
    unset($form['path']);
    unset($form['notifications']);

    $form['buttons']['submit']['#submit'][0] = 'cust_quick_info_node_form_publish';
    $form['buttons']['submit']['#value'] = t('Publish');
    $form['buttons']['submit']['#prefix'] = '<div id="publish_content">';
    $form['buttons']['submit']['#suffix'] = '</div>';

    $form['buttons']['publish'] = array(
      '#type' => 'submit',
      '#prefix' => '<div id="save_content">',
      '#suffix' => '</div>',
      '#value' => t('Save'),
      '#submit' => array('cust_quick_info_node_form_submit'),
    );
    $form['#validate'][] = 'custom_quickinfo';
  }

  //print '<pre>' . print_r($form, 1) . '</pre>';
  # We don't want to display any form fields other than the upload field
  # for the content type im_upload_page.
  # droy, 20110511
  if (!in_array('Site Administrator', array_values($user->roles))) {
    if ($form_id == 'im_upload_page_node_form') {
      $form['title']['#access'] = 0;
      $form['menu']['#prefix'] = "<div class = 'hide_content'>";
      $form['menu']['#suffix'] = '</div>';
      $form['body_field']['#access'] = 0;
      $form['path']['#access'] = 0;
      $form['field_page_links']['#access'] = 0;
      $form['options']['#access'] = 0;
      $form['book']['#access'] = 0;
      $form['print']['#access'] = 0;
      $form['menu']['#collapsed'] = 0;
      $form['notifications']['#weight'] = 3;
    }
  }

  if ($form_id == 'user_login') {
    $form['faq_url'] = array(
      '#title' => t('faq url'),
      '#type' => 'hidden',
    );
    $get_uri = explode("/", $_REQUEST['q']);
    if ((in_array('faq', $get_uri)) || (in_array('faqs', $get_uri))) {
      $form['#submit'][] = "faq_url_redirect";
    }
  }

  if ($form_id == 'early_warnings_node_form') {
    $form['field_page_links']['#access'] = 0;
    $form['options']['#access'] = 0;
    $form['book']['#access'] = 0;
    $form['print']['#access'] = 0;
    $form['menu']['#prefix'] = "<div class = 'hide_content'>";
    $form['menu']['#suffix'] = '</div>';
    $form['path']['#access'] = 0;
    $form['notifications']['#access'] = 0;
  }

  if ($form_id == 'page_node_form') {
    $form['field_page_links']['#access'] = 0;
    $form['options']['#access'] = 0;
    $form['book']['#access'] = 0;
    $form['print']['#access'] = 0;
    $form['menu']['#collapsed'] = 0;
    $form['notifications']['#weight'] = 3;
  }

  if ($form_id == 'downtimes_node_form') {
    $form['field_page_links']['#access'] = 0;
    $form['options']['#access'] = 0;
    $form['book']['#access'] = 0;
    $form['print']['#access'] = 0;
    $form['menu']['#collapsed'] = 0;
  }

  if ($form_id == 'faqs_node_form') {
    $form['menu']['#access'] = 0;
    $form['menu']['#prefix'] = "<div class = 'hide_content'>";
    $form['menu']['#suffix'] = '</div>';
    $form['detailed_question']['#access'] = 0;
    $form['path']['#access'] = 0;
    $form['options']['#access'] = 0;
    $form['book']['#access'] = 0;
    $form['print']['#access'] = 0;
  }

  if ($form_id == 'newsletter_node_form') {
    $form['options']['#access'] = 0;
    $form['book']['#access'] = 0;
    $form['print']['#access'] = 0;
  }

  if ($form_id == 'comment_form') {
    $user_name = l($user->user_firstname . ' ' . $user->user_lastname, 'user/' . $user->uid);
    $form['_author']['#value'] = $user_name;

    $form['_author']['#prefix'] = "<div class = 'hide_comment_user'>";
    $form['_author']['#suffix'] = "</div>";

    $form['#submit'][0] = "comment_form_custom_submit";
  }

  if ($form_id == 'contact_mail_user') {
    $user_name = l($user->user_firstname . ' ' . $user->user_lastname, 'user/' . $user->uid);
    $recipient_fullname = l($form['recipient']['#value']->user_firstname . ' ' . $form['recipient']['#value']->user_lastname, 'user/' . $form['recipient']['#value']->uid);
    $recipient_mail = $form['recipient']['#value']->mail;


    $from = $user_name . "&nbsp;&lt;" . $user->mail . "&gt;";
    $to = $recipient_fullname . "&nbsp;&lt;" . $recipient_mail . "&gt;";
    $form['from']['#value'] = $from;
    $form['to']['#value'] = $to;
    drupal_set_title($recipient_fullname);
  }
  if ($form_id == 'search_form') {
    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs[1] = l(t('Search'), 'search');
    $breadcrumbs[2] = t($form['basic']['inline']['keys']['#default_value']);
    drupal_set_breadcrumb($breadcrumbs);
  }

  if ($form_id == 'user_pass') {
    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs[2] = t('Request new password');
    drupal_set_breadcrumb($breadcrumbs);
  }

  if ($form_id == 'user_register') {
    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs[2] = t('Register');
    drupal_set_breadcrumb($breadcrumbs);
    $form['account']['conf_mail']['#title'] = t('Confirm E-mail address');
    $form['account']['conf_mail']['#attributes'] = array('oncopy' => "return false", 'onpaste' => "return false", 'oncut' => "return false");
  }
  if ($form_id == 'user_login') {
    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs[1] = l(t($breadcrumbs[1]), 'user');
    $breadcrumbs[] = t('Login');
    drupal_set_breadcrumb($breadcrumbs);
  }

  if ($form_id == 'menu_edit_menu') {
    $breadcrumbs = drupal_get_breadcrumb();
    $parent = $breadcrumbs[3];
    $title = $breadcrumbs[4];
    $breadcrumbs[3] = l(t('Menus'), 'admin/build/menu');
    $breadcrumbs[4] = $parent;
    $breadcrumbs[5] = t($title);
    drupal_set_breadcrumb($breadcrumbs);
  }
  if ($form_id == 'search_form' && arg(1) == 'node') {
    unset($form['advanced']);
  }
  if ($form_id == 'menu_edit_item') {
    $name = db_result(db_query("select title from {menu_custom} where menu_name = '%s'", $form['menu']['#item']['menu_name']));
    $breadcrumbs = drupal_get_breadcrumb();
    $title = $breadcrumbs[4];
    $breadcrumbs[4] = l(t($name), 'admin/build/menu-customize/' . $form['menu']['#item']['menu_name']);
    $breadcrumbs[] = t($title);
    drupal_set_breadcrumb($breadcrumbs);
  }

  if ($form_id == 'notifications_manage_user_subscriptions') {
    unset($form['admin']['options']['operation']['#options']['Change send method to']['send_method-mail']);
    unset($form['admin']['options']['operation']['#options']['Change send method to']['send_method-mimemail']);
  }
  if ($form_id == 'notifications_user_overview') {

    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs[2] = t('Overview');
    drupal_set_breadcrumb($breadcrumbs);

    $account = $form['account']['#value'];
    $path = 'user/' . $account->uid;

    $path = 'user/' . $account->uid;

    $condtions = db_result(db_query("select count(*) from notifications where status = 1 and uid = %d", $account->uid));
    $user_id = db_result(db_query("SELECT count(*) FROM {notifications} WHERE uid = %d", $account->uid));
    if (empty($condtions) && !empty($user_id)) {
      drupal_set_message(t("You have disabled all your notifications. To enable your notifications click " . l(t('here'), "$path/notifications/update/enable")));
    }

    // Status, send method, interval
    $count = db_query("SELECT status, COUNT(*) AS num FROM {notifications} WHERE uid = %d GROUP BY status", $account->uid);
    $status_list = _notifications_subscription_status();
    while ($current = db_fetch_object($count)) {
      $status[$current->status] = t('You have %count @status subscriptions.', array('%count' => $current->num, '@status' => $status_list[$current->status]));
    }
    if (empty($status)) {
      $status['none'] = t('You don\'t have any subscriptions yet.');
    }
    $send_intervals = _notifications_send_intervals();
    $send_methods = _notifications_send_methods($account);
    if ($method = notifications_user_setting('send_method', $account)) {
      if (isset($send_methods[$method])) {
        $status['method'] = t('Your default sending method for new subscriptions is @send_method', array('@send_method' => $send_methods[$method]));
      }
    }
    $interval = notifications_user_setting('send_interval', $account);
    if (isset($send_intervals[$interval])) {
      $status['interval'] = t('Your default sending interval for new subscriptions is @send_interval', array('@send_interval' => $send_intervals[$interval]));
    }


    // Enable / disable all subscriptions
    if (notifications_access_user($account, 'maintain')) {
      if (!empty($status[NOTIFICATIONS_SUBSCRIPTION_ACTIVE])) {
        $tips['disable'] = l(t('Temporarily disable all your subscriptions'), "$path/notifications/update/disable");
      }
      if (!empty($status[NOTIFICATIONS_SUBSCRIPTION_INACTIVE]) || !empty($status[NOTIFICATIONS_SUBSCRIPTION_BLOCKED])) {
        $tips['enable'] = l(t('Enable all your subscriptions'), "$path/notifications/update/enable");
      }
    }
    $link = notifications_get_link('unsubscribe', array('uid' => $account->uid, 'destination' => TRUE));
    $count = db_result(db_query("select count(*) from {notifications} where uid = %d  and type != '%s' and send_interval != %d", $account->uid, 'nodetype', -1));
    if ($count > 0) {
      $tips['cancel'] = l(t('Cancel all your subscriptions'), $link['href'], $link['options']);
      $form['tips']['#value'] = theme('item_list', $tips);
    }
    else {
      unset($form['tips']);
    }
  }

  if ($form_id == 'user_profile_form') {
    $form['locale']['#prefix'] = "<div class = 'hide_content'>";
    $form['locale']['#suffix'] = '</div>';

    $form['timezone_name']['#prefix'] = "<div class = 'hide_content'>";
    $form['timezone_name']['#suffix'] = '</div>';

    $form['timezone']['#prefix'] = "<div class = 'hide_content'>";
    $form['timezone']['#suffix'] = '</div>';
  }

  if ($form_id == 'inactive_user_custom_settings') {
    unset($form['delete_inactive_user']['inactive_user_auto_delete_warn']);
    unset($form['delete_inactive_user']['inactive_user_delete_warn_mail_subject']);
    unset($form['delete_inactive_user']['inactive_user_delete_warn_text']);
  }

  //rename Apply button in groups page to Search
  if ($form_state['view']->name == 'og') {
    $form['submit']['#value'] = t('Search');
  }

  if ($form_id == 'forum_node_form') {
    $group = og_get_group_context();
    $vid = og_forum_get_vid();
    //set the forum selection drop down box 
    if (arg(2) == 'add' && arg(4)) {
      $term = arg(4);
      $form['taxonomy'][$vid]['#default_value'] = array($term);
    }
  }

  if (!isset($form['#node']->nid) && $form_id == $form['#node']->type . '_node_form') {
    $breadcrumbs = array();
    $breadcrumb[] = l(t('Home'), '');
    if (isset($_SESSION['Group_name'])) {
      $breadcrumb[] = l(t($_SESSION['Group_name']), 'node/' . $_SESSION['Group_id']);
      if ($form['#node']->type != 'quickinfo') {
        $breadcrumb[] = l(t('Add Group Content'), 'node/' . $_SESSION['Group_id'] . '/group_add');
      }
    }
    else {
      $breadcrumb[] = l(t('Create Content'), 'node/add');
    }
    if ($form['#node']->type != 'quickinfo') {
      $breadcrumb[] = t(ucwords($form['#node']->type));
    }
    else {
      $breadcrumb[] = t('RZ-schnellinfo');
    }
    drupal_set_breadcrumb($breadcrumb);
  }

  if (isset($form['#node']) && $form_id == $form['#node']->type . '_node_form') {

    unset($form['body_filter']['format']);
    if ($form['type']['#value'] != 'page') {
      unset($form['log']);
    }

    $user_role = get_user_role();
    if ($form_id == 'downtimes_node_form') {
      if ($user_role != 'site_admin') {
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'downtimes' && (arg(3) == 'create_downtimes' || arg(3) == 'create_maintenance')) {
          $form['notifications']['#prefix'] = "<div class = 'hide_content'>";
          $form['notifications']['#suffix'] = '</div>';
        }
      }
    }
    $form['author']['#prefix'] = "<div class = 'hide_content'>";
    $form['author']['#suffix'] = '</div>';

    $form['og_directory']['#prefix'] = "<div class = 'hide_content'>";
    $form['og_directory']['#suffix'] = '</div>';

    $form['revision_information']['#prefix'] = "<div class = 'hide_content'>";
    $form['revision_information']['#suffix'] = '</div>';

    $form['comment_settings']['#prefix'] = "<div class = 'hide_content'>";
    $form['comment_settings']['#suffix'] = '</div>';

    $form['body_field']['format']['#prefix'] = "<div class = 'hide_content'>";
    $form['body_field']['format']['#suffix'] = '</div>';

    $form['og_register']['#prefix'] = "<div class = 'hide_content'>";
    $form['og_register']['#suffix'] = '</div>';

    $form['og_language']['#prefix'] = "<div class = 'hide_content'>";
    $form['og_language']['#suffix'] = '</div>';
    if ($form_id != 'quickinfo_node_form') {
      $form['attachments']['#prefix'] = "<div class = 'hide_content'>";
      $form['attachments']['#suffix'] = '</div>';
    }
    if ($form_id == 'group_node_form') {
      $form['options']['#prefix'] = "<div class = 'hide_content'>";
      $form['options']['#suffix'] = '</div>';
    }
    unset($form['signup']);

    if (isset($_SESSION['Group_name'])) {
      // group related menu settings
      $menu_name = 'menu-' . $_SESSION['Group_id'];
      // check whether there is a menu for this group, if not create the menu item for the group
      $group_menu = db_result(db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name='%s'", $menu_name));
      if (empty($group_menu)) {
        $menu_title = $_SESSION['Group_name'];
        $link['link_title'] = $menu_title;
        $path = 'admin/build/menu-customize/';
        $link['link_path'] = $path . $menu_name;
        $link['router_path'] = $path . '%';
        $link['module'] = 'menu';
        $link['plid'] = db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s' AND module = '%s'", 'admin/build/menu', 'system'));
        ;
        menu_link_save($link);
        db_query("INSERT INTO {menu_custom} (menu_name, title) VALUES ('%s', '%s')", $menu_name, $menu_title);
      }

      // displaying menu options specific about the group.
      $menus = array();
      $menu_result = db_query("SELECT menu_name, title FROM {menu_custom} WHERE menu_name='%s'", $menu_name);
      while ($r = db_fetch_object($menu_result)) {
        $menus[$r->menu_name] = $r->title;
      }
      $item = $form['#node']->menu;
      $options = menu_parent_options($menus, $item);
      $form['menu']['#collapsed'] = FALSE;
      $form['menu']['#access'] = TRUE;
      $form['menu']['parent']['#options'] = $options;
    }

    if (isset($_SESSION['Group_name'])) {
      $form_state['og_gids'] = array($_SESSION['Group_id']);
      og_form_add_og_audience($form, $form_state);
      $form['og_nodeapi']['visible']['og_groups']['#default_value'][] = $_SESSION['Group_id'];
    }

    $form['og_nodeapi']['#prefix'] = "<div class = 'og_fieldset' style='display:none;'>";
    $form['og_nodeapi']['#suffix'] = '</div>';
  }

  if ($form_id == 'og_confirm_unsubscribe' || $form_id == 'og_confirm_subscribe') {
    $form['actions']['cancel']['#value'] = l(t('Cancel'), 'og');
  }
  if ($form_id == 'og_confirm_unsubscribe') {
    $form['#submit'][] = 'cust_og_confirm_unsubscribe_submit';
  }
*/
  if ($form_id == 'inactive_user_custom_settings') {
    //Adding lesser periods to inactive users reminder email
    $period_options = $form['inactive_user_notification']['inactive_user_notify']['#options'];
    $period_options['60'] = t('1 min');
    $period_options['3600'] = t('1 hour');
    $period_options['7200'] = t('2 hours');
    $period_options['10800'] = t('3 hours');
    ksort($period_options);
    $form['inactive_user_notification']['inactive_user_notify']['#options'] = $period_options;
    $form['inactive_user_notification']['inactive_user_notify_admin']['#options'] = $period_options;

    //Adding lesser periods to Warn before block users reminder email
    $warn_period_options = $form['block_inactive_user']['inactive_user_auto_block_warn']['#options'];
    $warn_period_options['3600'] = t('1 hour');
    $warn_period_options['7200'] = t('2 hours');
    $warn_period_options['10800'] = t('3 hours');
    ksort($warn_period_options);
    $form['block_inactive_user']['inactive_user_auto_block']['#options'] = $period_options;
    $form['block_inactive_user']['inactive_user_auto_block_warn']['#options'] = $warn_period_options;
    $form['delete_inactive_user']['inactive_user_auto_delete']['#options'] = $period_options;
    $form['delete_inactive_user']['inactive_user_auto_delete_warn']['#options'] = $warn_period_options;
    $form['inactive_user_notification']['inactive_user_notify_mail_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject of user notification e-mail'),
      '#default_value' => variable_get('inactive_user_notify_mail_subject', t('[@sitename] Account inactivity', array('@sitename' => variable_get('site_name', 'drupal')))),
      '#required' => TRUE,
      '#weight' => 1,
    );
    $form['inactive_user_notification']['inactive_user_notify_text']['#weight'] = 2;
    $form['block_inactive_user']['inactive_user_block_mail_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject of blocked user acount e-mail'),
      '#default_value' => variable_get('inactive_user_block_mail_subject', t('[@sitename] Account blocked due to inactivity', array('@sitename' => variable_get('site_name', 'drupal')))),
      '#required' => TRUE,
      '#weight' => 1,
    );
    $form['block_inactive_user']['inactive_user_block_notify_text']['#weight'] = 2;
    $form['block_inactive_user']['inactive_user_auto_block_warn']['#weight'] = 3;
    $form['block_inactive_user']['inactive_user_block_warn_mail_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject of user warning e-mail'),
      '#default_value' => variable_get('inactive_user_block_warn_mail_subject', t('[@sitename] Account inactivity', array('@sitename' => variable_get('site_name', 'drupal')))),
      '#required' => TRUE,
      '#weight' => 4,
    );
    $form['block_inactive_user']['inactive_user_block_warn_text']['#weight'] = 5;
    $form['delete_inactive_user']['inactive_user_delete_notify_mail_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject of deleted user account e-mail'),
      '#default_value' => variable_get('inactive_user_delete_notify_mail_subject', t('[@sitename] Account removed', array('@sitename' => variable_get('site_name', 'drupal')))),
      '#required' => TRUE,
      '#weight' => 1,
    );
    $form['delete_inactive_user']['inactive_user_delete_notify_text']['#weight'] = 2;
    unset($form['delete_inactive_user']['inactive_user_auto_delete_warn']);
    unset($form['delete_inactive_user']['inactive_user_delete_warn_mail_subject']);
    unset($form['delete_inactive_user']['inactive_user_delete_warn_text']);
  }
/**
  if ($form_id == 'forum_node_form') {
    if (!user_access('administer forums')) { // Insert your own premission here if needed
      // Hide the forum taxonomy select
      $forum_vid = variable_get('forum_nav_vocabulary', '');
      $taxonomy = array(
        '#type' => 'hidden',
        '#value' => $form['taxonomy'][$forum_vid]['#default_value'][0]
      );
      $form['taxonomy'][$forum_vid] = $taxonomy;
    }
  }
*/
}



/**
 *  check inactive users
 */
function inactive_users() {

    variable_set('inactive_user_timestamp', time());
    $user_list = '';

    // reset notifications if recent user activity
    $users = db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid <> 1'));
    if ($users) {
      foreach ($users as $uid) {
        $u = db_fetch_object(db_query('SELECT access, name FROM {users} WHERE uid = %d', $uid));
        if ($u->access > time() - 604800) {
          // user activity in last week, remove from inactivity table
          db_query('DELETE FROM {inactive_users} WHERE uid = %d', $uid);
          watchdog('user', 'recent user activity: %user removed from inactivity list', array('%user' => $u->name), WATCHDOG_NOTICE, l(t('edit user'), "user/$uid/edit", array('query' => array('destination' => 'admin/user/user'))));
        }
      }
    }

    // notify administrator of inactive user accounts
    notify_admin_inactive_accounts();

    // notify users that their account has been inactive
    notify_user_inactive_accounts();

    // warn users when they are about to be blocked
    warn_to_block_inactive_accounts();
    
    // block user
    block_inactive_accounts();
    
    // warn users when they are about to be deleted
    warn_to_delete_inactive_accounts();

    // automatically delete users    
    delete_inactive_accounts();
    return t("Checked inactive users");
}

// notify administrator of inactive user accounts
function  notify_admin_inactive_accounts() {

    if ($notify_time = variable_get('inactive_user_notify_admin', 0)) {
      $result = db_query('SELECT uid, name, mail, access, created, status FROM {users} WHERE ((access <> 0 AND login <> 0 AND access < (%d - %d)) OR (login = 0 AND created < (%d - %d))) AND uid <> 1 AND status = 1', time(), $notify_time, time(), $notify_time);
      while ($user = db_fetch_object($result)) {
        $inactive_flag = db_result(db_query("SELECT value from {inactive_user_flag} WHERE user_id = %d", $user->uid));
        if ($inactive_flag != 1 && $user->uid && !db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d AND notified_admin = 1', $user->uid)) && ($user->created < (time() - $notify_time))) {
          db_query('UPDATE {inactive_users} SET notified_admin = 1 WHERE uid = %d', $user->uid);
          if (!db_affected_rows()) {
            // must create a new row
            @db_query('INSERT INTO {inactive_users} (uid, notified_admin) VALUES (%d, 1)', $user->uid);
          }
          $user_list .= "$user->name ($user->mail) last active on ". format_date($user->access, 'large') .".\n";
        }
      }
      if (isset($user_list)) {
        _inactive_user_mail(t('[@sitename] Inactive users', array('@sitename' => variable_get('site_name', 'drupal'))), _inactive_user_mail_text('notify_admin_text'), $notify_time, NULL, $user_list);
        unset($user_list);
      }
    }
}

// notify users that their account has been inactive
function  notify_user_inactive_accounts() {

    if ($notify_time = variable_get('inactive_user_notify', 0)) {
      $result = db_query('SELECT * FROM {users} WHERE ((access <> 0 AND login <> 0 AND access < (%d - %d)) OR (login = 0 AND created < (%d - %d))) AND status <> 0 AND uid <> 1', time(), $notify_time, time(), $notify_time);
      while ($user = db_fetch_object($result)) {
        $inactive_flag = db_result(db_query("SELECT value from {inactive_user_flag} WHERE user_id = %d", $user->uid));
        if ($inactive_flag != 1 && $user->uid && !db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE notified_user = 1 AND uid = %d', $user->uid)) && ($user->created < (time() - $notify_time))) {
          db_query('UPDATE {inactive_users} SET notified_user = 1 WHERE uid = %d', $user->uid);
          if (!db_affected_rows()) {
            @db_query('INSERT INTO {inactive_users} (uid, notified_user) VALUES (%d, 1)', $user->uid);
          }
          $inactive_user_notify_mail_subject = variable_get('inactive_user_notify_mail_subject', t('[@sitename] Account inactivity', array('@sitename' => variable_get('site_name', 'drupal'))));
          _inactive_user_mail($inactive_user_notify_mail_subject, variable_get('inactive_user_notify_text', _inactive_user_mail_text('notify_text')), $notify_time, $user, NULL);
          watchdog('user', 'user %user notified of inactivity', array('%user' => $user->name), WATCHDOG_INFO, l(t('edit user'), "user/$user->uid/edit", array('query' => array('destination' => 'admin/user/user'))));
        }
      }
    } 
}

// warn users when they are about to be blocked
function warn_to_block_inactive_accounts() {

    if (($warn_time = variable_get('inactive_user_auto_block_warn', 0)) &&
        ($block_time = variable_get('inactive_user_auto_block', 0))) {
      $result = db_query('SELECT * FROM {users} WHERE ((access <> 0 AND login <> 0 AND access < (%d - %d)) OR (login = 0 AND created < (%d - %d))) AND status <> 0 AND uid <> 1', time(), $block_time, time(), $block_time);
      while ($user = db_fetch_object($result)) {
        $inactive_flag = db_result(db_query("SELECT value from {inactive_user_flag} WHERE user_id = %d", $user->uid));
        if ($inactive_flag != 1 && $user->uid && !db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d AND warned_user_block_timestamp > 0', $user->uid)) && ($user->created < (time() - $block_time))) {
          db_query('UPDATE {inactive_users} SET warned_user_block_timestamp = %d WHERE uid = %d', time() + $warn_time, $user->uid);
          if (!db_affected_rows()) {
            @db_query('INSERT INTO {inactive_users} (uid, warned_user_block_timestamp) VALUES (%d, %d)', $user->uid, time() + $warn_time);
          }
          $inactive_user_block_warn_mail_subject = variable_get('inactive_user_block_warn_mail_subject',t('[@sitename] Account inactivity', array('@sitename' => variable_get('site_name', 'drupal'))));
          _inactive_user_mail($inactive_user_block_warn_mail_subject, variable_get('inactive_user_block_warn_text', _inactive_user_mail_text('block_warn_text')), $warn_time, $user, NULL);
          watchdog('user', 'user %user warned will be blocked due to inactivity', array('%user' => $user->name), WATCHDOG_NOTICE, l(t('edit user'), "user/$user->uid/edit", array('query' => array('destination' => 'admin/user/user'))));
        }
      }
    }
}

// automatically block users
function block_inactive_accounts() {
    if ($block_time = variable_get('inactive_user_auto_block', 0)) {
      $result = db_query('SELECT * FROM {users} WHERE ((access <> 0 AND login <> 0 AND access < (%d - %d)) OR (login = 0 AND created < (%d - %d))) AND status <> 0 AND uid <> 1', time(), $block_time, time(), $block_time);
      while ($user = db_fetch_object($result)) {
        $inactive_flag = db_result(db_query("SELECT value from {inactive_user_flag} WHERE user_id = %d", $user->uid));
        if ($inactive_flag != 1) {
        if($user->uid && variable_get('inactive_user_auto_block_warn',0) == '0' ){
          db_query('UPDATE {users} SET status = 0 WHERE uid = %d', $user->uid);
          //Storing blocked user time into database.
          db_query('INSERT INTO {blocked_users} (uid, blocked_time) VALUES (%d, %d)', $user->uid, time());

          //update the notifications table that block notifications for this user 
          db_query('UPDATE {notifications} SET status = %d WHERE status = %d AND uid = %d', 0, 1, $user->uid);
 	  notifications_queue_clean(array('uid' => $user->uid)); 
          // notify user
          if (variable_get('inactive_user_notify_block', 0)) {
            if (!db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d AND notified_user_block = 1', $user->uid))) {
              db_query('UPDATE {inactive_users} SET notified_user_block = 1 WHERE uid = %d', $user->uid);
              if (!db_affected_rows()) {
                @db_query('INSERT INTO {inactive_users} (uid, notified_user_block) VALUES (%d, 1)', $user->uid);
              }
              $inactive_user_block_mail_subject = variable_get('inactive_user_block_mail_subject',t('[@sitename] Account blocked due to inactivity', array('@sitename' => variable_get('site_name', 'drupal'))));
              _inactive_user_mail($inactive_user_block_mail_subject, variable_get('inactive_user_block_notify_text', _inactive_user_mail_text('block_notify_text')), $block_time, $user, NULL);
              watchdog('user', 'user %user blocked due to inactivity', array('%user' => $user->name), WATCHDOG_NOTICE, l(t('edit user'), "user/$user->uid/edit", array('query' => array('destination' => 'admin/user/user'))));
            }
          }

          // notify admin
          if (variable_get('inactive_user_notify_block_admin', 0)) {
            if (!db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d and notified_admin_block = 1', $user->uid))) {
              db_query('UPDATE {inactive_users} SET notified_admin_block = 1 WHERE uid = %d', $user->uid);
              if (!db_affected_rows()) {
                @db_query('INSERT INTO {inactive_users} (uid, notified_admin_block) VALUES(%d, 1)', $user->uid);
              }
              $user_list .= "$user->name ($user->mail) last active on ". format_date($user->access, 'large') .".\n";
            }
          }
        }

        // don't block user yet if we sent a warning and it hasn't expired
        else if ($user->uid && db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d AND warned_user_block_timestamp < %d', $user->uid, time())) && ($user->created < (time() - $block_time))) {
          db_query('UPDATE {users} SET status = 0 WHERE uid = %d', $user->uid);
          //Storing blocked user time into database.
          db_query('INSERT INTO {blocked_users} (uid, blocked_time) VALUES (%d, %d)', $user->uid, time());

          //update the notifications table that block notifications for this user 
          db_query('UPDATE {notifications} SET status = %d WHERE status = %d AND uid = %d', 0, 1, $user->uid);
 	  notifications_queue_clean(array('uid' => $user->uid)); 

          // notify user
          if (variable_get('inactive_user_notify_block', 0)) {
            if (!db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d AND notified_user_block = 1', $user->uid))) {
              db_query('UPDATE {inactive_users} SET notified_user_block = 1 WHERE uid = %d', $user->uid);
              if (!db_affected_rows()) {
                @db_query('INSERT INTO {inactive_users} (uid, notified_user_block) VALUES (%d, 1)', $user->uid);
              }
              $inactive_user_block_mail_subject = variable_get('inactive_user_block_mail_subject',t('[@sitename] Account blocked due to inactivity', array('@sitename' => variable_get('site_name', 'drupal'))));
              _inactive_user_mail($inactive_user_block_mail_subject, variable_get('inactive_user_block_notify_text', _inactive_user_mail_text('block_notify_text')), $block_time, $user, NULL);
              watchdog('user', 'user %user blocked due to inactivity', array('%user' => $user->name), WATCHDOG_NOTICE, l(t('edit user'), "user/$user->uid/edit", array('query' => array('destination' => 'admin/user/user'))));
            }
          }

          // notify admin
          if (variable_get('inactive_user_notify_block_admin', 0)) {
            if (!db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d and notified_admin_block = 1', $user->uid))) {
              db_query('UPDATE {inactive_users} SET notified_admin_block = 1 WHERE uid = %d', $user->uid);
              if (!db_affected_rows()) {
                @db_query('INSERT INTO {inactive_users} (uid, notified_admin_block) VALUES(%d, 1)', $user->uid);
              }
              $user_list .= "$user->name ($user->mail) last active on ". format_date($user->access, 'large') .".\n";
            }
          }
        }
      }
      }
        if ($user_list) {
          _inactive_user_mail(t('[@sitename] Blocked users', array('@sitename' => variable_get('site_name', 'drupal'))), _inactive_user_mail_text('block_notify_admin_text'), $block_time, NULL, $user_list);
        unset($user_list);
        }
    }
}

// warn users when they are about to be deleted
function warn_to_delete_inactive_accounts() {

    if (($warn_time = variable_get('inactive_user_auto_delete_warn', 0)) &&
        ($delete_time = variable_get('inactive_user_auto_delete', 0))) {
      $result = db_query('SELECT * FROM {users} WHERE ((access <> 0 AND login <> 0 AND access < (%d - %d)) OR (login = 0 AND created < (%d - %d))) AND uid <> 1', time(), $delete_time, time(), $delete_time);
      while ($user = db_fetch_object($result)) {
        $inactive_flag = db_result(db_query("SELECT value from {inactive_user_flag} WHERE user_id = %d", $user->uid));
        if ($inactive_flag != 1 && $user->uid && !db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d AND warned_user_delete_timestamp > 0', $user->uid)) && ($user->created < (time() - $delete_time))) {
          if (variable_get('inactive_user_preserve_content', 1) && _inactive_user_with_content($user->uid)) {
            $protected = 1;
          }
          else {
            $protected = 0;
          }
          db_query('UPDATE {inactive_users} SET warned_user_delete_timestamp = %d AND protected = %d WHERE uid = %d', time() + $warn_time, $protected, $user->uid);
          if (!db_affected_rows()) {
            @db_query('INSERT INTO {inactive_users} (uid, warned_user_delete_timestamp, protected) VALUES (%d, %d, %d)', $user->uid, time() + $warn_time, $protected);
          }
          if (!$protected) {
            $inactive_user_delete_warn_mail_subject = variable_get('inactive_user_delete_warn_mail_subject', t('[@sitename] Account inactivity', array('@sitename' => variable_get('site_name', 'drupal')))); 
            _inactive_user_mail($inactive_user_delete_warn_mail_subject, variable_get('inactive_user_delete_warn_text', _inactive_user_mail_text('delete_warn_text')), $warn_time, $user, NULL);
            watchdog('user', 'user %user warned will be deleted due to inactivity', array('%user' => $user->mail), WATCHDOG_NOTICE, l(t('edit user'), "user/$user->uid/edit", array('query' => array('destination' => 'admin/user/user'))));
          }
        }
      }
    }
}

// automatically delete users
function delete_inactive_accounts() {

    if ($delete_time = variable_get('inactive_user_auto_delete', 0)) {
      $result = db_query('SELECT * FROM {users} WHERE ((access <> 0 AND login <> 0 AND access < (%d - %d)) OR (login = 0 AND created < (%d - %d))) AND uid <> 1', time(), $delete_time, time(), $delete_time);
      while ($user = db_fetch_object($result)) {
        $inactive_flag = db_result(db_query("SELECT value from {inactive_user_flag} WHERE user_id = %d", $user->uid));
        if ($inactive_flag != 1 && $user->uid && ((variable_get('inactive_user_auto_delete_warn', 0) && db_fetch_object(db_query('SELECT uid FROM {inactive_users} WHERE uid = %d AND warned_user_delete_timestamp < %d AND protected <> 1', $user->uid, time()))) || (!variable_get('inactive_user_auto_delete_warn', 0))) && ($user->created < (time() - $delete_time))) {
          if (variable_get('inactive_user_preserve_content', 1) && _inactive_user_with_content($user->uid)) {
            // this is a protected user, mark as such
            db_query('UPDATE {inactive_users} SET protected = 1 WHERE uid = %d', $user->uid);
            if (!db_affected_rows()) {
              @db_query('INSERT INTO {inactive_users} (uid, protected) VALUES (%d, 1)', $user->uid, $protected);
            }
          }
          else {
            // delete the user
            // not using user_delete() so we can send custom emails and watchdog
            $array = (array) $user;
            sess_destroy_uid($user->uid);
            db_query("DELETE FROM {users} WHERE uid = %d", $user->uid);
            db_query("DELETE FROM {inactive_user_flag} WHERE user_id = %d", $user->uid);
            db_query('DELETE FROM {users_roles} WHERE uid = %d', $user->uid);
            db_query("DELETE FROM {authmap} WHERE uid = %d", $user->uid);
            module_invoke_all('user', 'delete', $array, $user);
            if (variable_get('inactive_user_notify_delete', 0)) {
              $inactive_user_delete_notify_mail_subject = variable_get('inactive_user_delete_notify_mail_subject', t('[@sitename] Account removed', array('@sitename' => variable_get('site_name', 'drupal'))));
              _inactive_user_mail($inactive_user_delete_notify_mail_subject, variable_get('inactive_user_delete_notify_text', _inactive_user_mail_text('delete_notify_text')), $delete_time, $user, NULL);
            }
            if (variable_get('inactive_user_notify_delete_admin', 0)) {
              $user_list .= "$user->name ($user->mail) last active on ". format_date($user->access, 'large') .".\n";
            }
            watchdog('user', 'user %user deleted due to inactivity', array('%user' => $user->name));
          }
        }
      }
      if ($user_list) {
        _inactive_user_mail(t('[@sitename] Deleted accounts', array('@sitename' => variable_get('site_name', 'drupal'))), _inactive_user_mail_text('delete_notify_admin_text'), $delete_time, NULL, $user_list);
        unset($user_list);
      }
    }
}



