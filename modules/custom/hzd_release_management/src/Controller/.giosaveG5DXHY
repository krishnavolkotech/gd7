<?php
/**
 * @file
 * Contains \Drupal\hzd_release_management\Controller\ReadexcelController
 */

namespace Drupal\hzd_release_management\Controller;

use Drupal\Core\Database\Database;
use Drupal\Core\Controller\ControllerBase;
use Drupal\Core\Url;
use Drupal\hzd_release_management\HzdreleasemanagementHelper;

define('RELEASE_MANAGEMENT', 339);
define('KONSONS', \Drupal::config('hzd_release_management.settings')->get('konsens_service_term_id'));

/**
 * Class ReadexcelController
 * @package Drupal\hzd_release_management\Controller
 */
class HzdReleases extends ControllerBase {

  public function released() {
    $type = 'released';
    $output[] =  \Drupal::formBuilder()->getForm('Drupal\hzd_release_management\Form\ReleaseFilterForm', $type);
    $output[] = $this->releases_display_table($type);
    return $output;
  }
  
  public function documentation($service_id, $release_id) {
    $output[] = $this->documentation_page_link($service_id, $release_id);
    return $output;
  }
  
  public function getTitle($service_id, $release_id) {
    $release_name = db_query("SELECT title FROM {node_field_data} where nid= :nid", array(":nid" => $release_id))->fetchField();
    $release_product = explode("_", $release_name);
    $release_versions = explode("-", $release_product[1]);
    $releases_title = $release_product[0] . "_" . $release_versions[0];
  
    return "Documentation for " . $releases_title;
  }

  public function inprogress() {
    $type = 'progress';
    $output[] = \Drupal::formBuilder()->getForm('Drupal\hzd_release_management\Form\ReleaseFilterForm', $type);
    $output[] = $this->releases_display_table($type);
    return $output;
  }

  public function locked() {
    $type = 'locked';
    $output[] =  \Drupal::formBuilder()->getForm('Drupal\hzd_release_management\Form\ReleaseFilterForm', $type);
    $output[] = $this->releases_display_table($type);
    return $output;
  }
  
  public function deployed() {
    $type = 'deployed';
    $output[] =  \Drupal::formBuilder()->getForm('Drupal\hzd_release_management\Form\ReleaseFilterForm', $type);
    $output[] = $this->releases_display_table($type);
    return $output;
  }

  public function releases_display_table($type) {
    $header = $this->hzd_get_release_tab_headers($type);

    $gid = $_SESSION['Group_id'] ? $_SESSION['Group_id'] : RELEASE_MANAGEMENT;
    $tid = KONSONS;
    $release_type = get_release_type($type);
    $release_query = $this->hzd_release_query($release_type, $tid, $gid);
     foreach($release_query as $releases) {
       if ($releases->documentation_link) {
         $link = $this->hzd_get_release_documentation_link($releases->documentation_link, $releases->service, $releases->release_id);
       }
       else {
         if ($type == 'progress' || $type == 'released') {
           $link = t('No Download link available');
         }
         else {
           $link = '';
         }
       }
       
       if($releases->link) {
         //$download_imgpath = drupal_get_path('module', 'hzd_release_management') . '/images/download_icon.png';
         //$download = "<img src = '/" . $download_imgpath . "'>"; 
         //$link_path = "<a target = '_blank'  class='download_img_icon' href = '" . $releases->link . "'>" . $download . "</a>";
         
         $url = Url::fromUri($releases->link);
         $link_path = \Drupal::l('Download-link', $url);
       }
       else {
         $link_path = '';
       }
       //$link = $link_path . " " . $link;
       $link = t('@link_path @link', array('@link_path' => $link_path, '@link' => $link));
       $row = array();
       $service_name = db_query("SELECT title FROM node_field_data WHERE nid = :nid", array(":nid" => $releases->service))->fetchField();
       $row = array('service' => $service_name, 'release' => $releases->title);
       if ($type != 'released') {
         $row[] = $releases->status;
       }
       $row[] = $releases->date != NULL ? date('d.m.Y H:i:s', $releases->date) : '';
       
       if($type == 'released' || $type == 'progress') {
         if(isset($_SESSION['Group_id'])) {
           $early_warnings = $this->hzd_release_early_warnings($releases->service, $releases->release_id, $type);
           $earlywarnings_cell = array('data' => $early_warnings, 'class' => 'earlywarnings-cell');
           $row[] = $earlywarnings_cell;
         }
         $row[] = $link;
       }
       if($type == 'locked') {
         $row[] = $releases->comment;
       }
       $rows[] = $row;
     }

    $output['inprogress'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $header,
    );
    
    $output['pager'] = array(
      '#type' => 'pager',
      '#quantity' => 5,
    );
    
    return $output;
  }

  public function hzd_release_query($release_type, $tid, $gid) {
    $limit = 15;
    $release_query = db_select('node_field_data', 'n');
    $release_query->leftJoin('node__field_release_comments', 'nfrc', 'n.nid = nfrc.entity_id');
    $release_query->leftJoin('node__field_link', 'nfl', 'n.nid = nfl.entity_id');
    $release_query->leftJoin('node__field_documentation_link', 'nfdl', 'n.nid = nfdl.entity_id');
    $release_query->leftJoin('node__field_relese_services', 'nfrs', 'n.nid = nfrs.entity_id');
    $release_query->leftJoin('node__field_status', 'nfs', 'n.nid = nfs.entity_id');
    $release_query->leftJoin('node__field_date', 'nfd', 'n.nid = nfd.entity_id');
    $release_query->join('node__field_release_type', 'nfrt', 'n.nid = nfrt.entity_id');
    $release_query->join('group_releases_view', 'GRV', 'nfrs.field_relese_services_target_id = GRV.service_id');
    $release_query->join('node__release_type', 'nrt', 'GRV.service_id = nrt.entity_id');
    
    $release_query->condition('GRV.group_id', $gid, '=')
                  ->condition('nrt.release_type_target_id', $tid, '=')
                  ->condition('nfrt.field_release_type_value', $release_type, '=');
    
    $count_query = clone $release_query;
    $count_query->addExpression('Count(n.nid)');

    $paged_query = $release_query->extend('Drupal\Core\Database\Query\PagerSelectExtender');
    $paged_query->limit($limit);
    $paged_query->setCountQuery($count_query);
    
    $paged_query->addField('n', 'nid', 'release_id');
    $paged_query->addField('nfrc', 'field_release_comments_value', 'comment');
    $paged_query->addField('nfl', 'field_link_value', 'link');
    $paged_query->addField('nfdl', 'field_documentation_link_value', 'documentation_link');
    $paged_query->addField('nfrs', 'field_relese_services_target_id', 'service');
    $paged_query->addField('nfs', 'field_status_value', 'status');
    $paged_query->addField('nfd', 'field_date_value', 'date');
    $paged_query->fields('n', array('title'))
                ->orderBy('nfd.field_date_value', 'DESC');
                

    return $paged_query->execute()->fetchAll();
  }
  
  public function hzd_get_release_tab_headers($type) {
    if($type == 'released') {
      $header = array(t('Service'), t('Release'), t('Date'));
      if(isset($_SESSION['Group_id'])) {
        $header[] = t('Early Warnings');
      }
      $header[] = t('D/L');
    }
    if($type == 'progress' || $type == 'locked') {
      $header = array(t('Service'), t('Release'), t('Status'), t('Date'));
      if($type == 'progress') {
        if(isset($_SESSION['Group_id'])) {
          $header[] = t('Early Warnings');
        }
        $header[] = t('D/L');
      }
      if($type == 'locked') {
        $header[] = t('Comment');
      }
    }
    return $header;
  }

  public function hzd_get_release_documentation_link($doc_link, $service_id, $release_id) {
    $download_imgpaths = drupal_get_path('module', 'hzd_release_management') . '/images/document-icon.png';
    $download = '<img src = "/' . $download_imgpaths . '">';

    $secure_downloads = array_search('secure-downloads', explode('/', $doc_link));
    if ($secure_downloads) {
      $url = Url::fromUserInput('/node/' . $_SESSION['Group_id'] . '/releases/documentation/' . $service_id . '/' . $release_id);
      //$link = \Drupal::l($download, $url);
      $link = \Drupal::l('Document-link', $url);
    }
    else {
      $url = Url::fromUserInput('/node/' . $_SESSION['Group_id'] . '/releases/documentation/' . $service_id . '/' . $release_id);
      //$link = \Drupal::l($download, $url);
      $link = \Drupal::l('Document-link', $url);
    }
    return $link;
  }
  
  function hzd_release_early_warnings($service_id, $release_id, $type) {

    // Early Warning create icon
    $create_icon_path = drupal_get_path('module', 'hzd_release_management') . '/images/create-icon.png';
    $create_icon = '<img height=15 src = "/' . $create_icon_path . '">';

    //Early Warnigs count for specific service and release
    $query = db_select('node_field_data', 'n');
    $query->join('node__field_earlywarning_release', 'nfer', 'n.nid = nfer.entity_id');
    $query->join('node__field_release_service', 'nfrs', 'n.nid = nfrs.entity_id');
    $query->condition('n.type', 'early_warnings', '=')
          ->condition('nfer.field_earlywarning_release_value', $release_id, '=')
          ->condition('nfrs.field_release_service_value', $service_id, '=');
    $earlywarnings_count = $query->countQuery()->execute()->fetchField();

    if ($earlywarnings_count > 0) {
      $warningclass = ($earlywarnings_count >= 10 ? 'warningcount_second' : 'warningcount');
      $view_earlywarning_url = Url::fromUserInput('/node/' . $_SESSION['Group_id'] . '/view-early-warnings', array('html' => TRUE, 'query' => 'ser=' . $service_id .'&type='. $type . '&rel= '. $releases['release_id'] . ' &rel_type='.$service_release_type, 'attributes' => array('class' => 'view-earlywarning', 'title' => t('Read Early Warnings for this release'))));
      $view_earlywarning = \Drupal::l("<span class = '". $warningclass ."'>" . $earlywarnings_count . "</span> ", $view_earlywarning_url);
    } 
    else {
      $view_earlywarning = '<span class="no-warnigs"></span>';
    }
   
    //Redirection array after creation of early warnings
    $redirect = array('released' => 'releases', 'progress' => 'releases/in_progress', 'locked' => 'releases/locked');

    $url = Url::fromUserInput('/node/'. $_SESSION['Group_id'] . '/add/early-warnings');
    $create_earlywarning = \Drupal::l($create_icon, $url);
    return $create_earlywarning;
  }
  
  public function documentation_page_link($service_id, $release_id) {
  
    /*$build = array();
    $build['#markup'] = 'Hello Drupal';
    return $build;*/
    
    $query = db_query("SELECT field_documentation_link_value FROM {node__field_documentation_link} where entity_id = :eid and field_documentation_link_value <> 'NULL'", array(":eid" => $release_id))->fetchField();
    $query_explode = explode('/', $query);
    $query_explode_search = array_search('secure-downloads', $query_explode);

    // Check secure-downloads string in documentaion link
    if ($query_explode_search) {
      $output = \Drupal::config('hzd_release_management.settings')->get('secure_download_text')['value'];
      $output .= "<h4><a target = '_blank' href ='$query'>" . t("Please click this secure download link to download the documentation as a ZIP file directly from the DSL (authentication required)") . "</a></h4>";
      return $output;
    }
    else {
    $doc_values = HzdreleasemanagementHelper::get_document_args($service_id, $release_id);
    $arr = $doc_values['arr'];
    $files = $doc_values['files'];

    $major_directory = $release_product . "_" . max($arr);
    unset($files[0]);
    unset($files[1]);

    // Check the documentation link download or not. if not failed download link will display.
    /*if (!empty($files)) {
      $host_path = "http://" . $_SERVER[HTTP_HOST] . "/files/releases/" . strtolower($doc_values['service_name']) . "/" . $doc_values['product'];
      unset($arr[0]);
      unset($arr[1]);

     // get the count and release versions.
     $version_count = get_release_version_count($doc_values['releasess'], $arr);

      // display zip file path for specific release

      module_load_include('inc', 'release_management', 'release_management');
      $args = array("get_product" => $doc_values['get_product'], "count" => $version_count['count'], "arr" => $version_count['arr'], "dir" => $doc_values['dir'], "host_path" => $host_path , "product" => $doc_values['product'], "service_name" => $doc_values['service_name'], "upper_product" => $doc_values['upper_product'], "zip_link" => $doc_values['zip_link']);
      $cache = cache_get('release_doc_import_'.$release_id);
      $output = l(t("Please click here to download all documents for this release as a ZIP file."),'documentation_link_zip/'. $service_id . '/' . $release_id, array('attributes' => array('class' => 'document-link')));
      if (!$cache) {

        // display documentation table for specific release.

        $output .= "<table border='1'><tr><th>" . t('Folder') . "</th><th>" . t('Documents') . "</th></tr>";
        $sub_doc_folders = array("afb","benutzerhandbuch","betriebshandbuch","releasenotes","sonstige","zertifikat");
        foreach ($sub_doc_folders as $values) {
          $output .= display_doc_folders($args,$values);
        }
        $output .= "</table>";
        cache_set('release_doc_import_'.$release_id, $output, 'cache', CACHE_PERMANENT);
      } else {
        $output = $cache->data;
      }
      return $output;
    }

    // display failed download text

    else {
      $output = variable_get('failed_download_text', NULL);
      $string = t('Please click here to download the documentation as a ZIP file directly from the DSL (authentication required)');
      $output .= "<h4><a target = '_blank' href='$query'>" . t("Please click here to download the documentation as a ZIP file directly from the DSL (authentication required)") . "</a></h4>";
      return $output;
    }*/
  }
  }

}
