<?php
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Url;


function getErlywarningServies() {
  $group_id = get_group_id();
  
  $current_url = Url::fromRoute('<current>');
  $path = $current_url->toString();
  $current_path = explode("/", $path);
  $node = \Drupal::routeMatch()->getParameter('node');
  $nid = NULL;
  if ($node) {
    $nid = $node->id();
  }
  $query = \Drupal::database()->select('node_field_data', 'nfd');
  $query->Fields('nfd', array('type'));
  $query->condition('nfd.nid', $nid, '=');
  $type = $query->execute()->fetchField();
  
  if ($type == 'deployed_releases') {
    $services_releases = Drupal\hzd_release_management\HzdreleasemanagementHelper::released_deployed_releases();
    return $services_data = $services_releases['services'];
  }
  
  $group_id = ($group_id ? $group_id : RELEASE_MANAGEMENT);
  
  
  /**
   * $services_obj = db_query("SELECT title , n.nid FROM {node} n, {group_releases_view} grv
   * WHERE n.nid = grv.service_id and grv.group_id = %d ORDER by title ", $group_id);
   */
  
  //$services['none'] = " < " . t('Service') . ' > ';
  
  $query = \Drupal::database()->select('node_field_data', 'nfd');
  $query->join('group_releases_view', 'grv', 'nfd.nid = grv.service_id');
  $query->Fields('nfd', array('title', 'nid'));
  $query->condition('grv.group_id', $group_id, '=');
  $query->orderBy('title');
  $services_obj = $query->execute()->fetchAll();
  foreach ($services_obj as $services_data) {
    $services[$services_data->nid] = $services_data->title;
  }
  
  return $services;
}

/**
 * implements hook_form_alter
 */
function hzd_earlywarnings_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_early_warnings_form') {
    $service = \Drupal::request()->query->get('services');
    $rel = \Drupal::request()->query->get('releases');
    $form['field_release_service']['widget']['#default_value'] = $service;
    $form['field_earlywarning_release']['widget']['#default_value'] = $rel;
    if ($rel && $service) {
      $form['field_release_service']['#attributes']['readonly'] = 'readonly';
      $form['field_earlywarning_release']['#attributes']['readonly'] = 'readonly';
      $form['field_release_service']['#disabled'] = TRUE;
      $form['field_earlywarning_release']['#disabled'] = TRUE;
    }
    $form['field_release_service']['widget']['#ajax'] = [
      'callback' => 'hzd_early_warnings_service_change',
      'wrapper' => 'hzd-release-early-warnings',
    ];
    $form['field_earlywarning_release']['widget']['#prefix'] = '<div id="hzd-release-early-warnings">';
    $form['field_earlywarning_release']['widget']['#sufix'] = '</div>';
  }
  
  return $form;
}

function earlywarning_form_submit(&$form, FormState $formState) {
  $group = \Drupal::routeMatch()->getParameter('group');
  
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function hzd_earlywarnings_node_insert(EntityInterface $entity) {
  if ($entity->getType() == 'early_warnings') {
    $group = \Drupal::routeMatch()->getParameter('group');
    $plugin = $group->getGroupType()
      ->getContentPlugin('group_node:early_warnings');
    
    $values = [
      'type' => $plugin->getContentTypeConfigId(),
      'gid' => $group->id(),
      'entity_id' => $entity->id(),
    ];
    $group_content = \Drupal::entityTypeManager()
      ->getStorage('group_content')
      ->create($values)
      ->save();
  }
}

function hzd_early_warnings_service_change(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $service = $form_state->getValue('field_release_service')[0]['value'];
  $deployed_releses_options = released_deployed_releases($service)['releases'];
  natcasesort($deployed_releses_options);
  $form['field_earlywarning_release']['widget']['#options'] = $deployed_releses_options;
  return $form['field_earlywarning_release']['widget'];
}

function hzd_earlywarnings_comment_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->hasField('field_do_not_send_notifications')) {
    $do_not_send_notifications = $entity->get('field_do_not_send_notifications')->value;
    if (!$do_not_send_notifications) {
      send_earlywarning_comment_notifications($entity, 'update');
    }
  }
  // Update the entity's entry in a fictional table of this type of entity.
}

function hzd_earlywarnings_comment_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->hasField('field_do_not_send_notifications')) {
    $do_not_send_notifications = $entity->get('field_do_not_send_notifications')->value;
    if (!$do_not_send_notifications) {
      send_earlywarning_comment_notifications($entity, 'insert');
    }
  }
  // Insert the new entity into a fictional table of all entities.
}

function send_earlywarning_comment_notifications($entity, $action) {
//    $commententity = \Drupal::entityTypeManager()->getStorage('comment')->load($entity->id());
  
  $nodeentity = $entity->getCommentedEntity();
  $entity_bundle = $nodeentity->bundle();
  if($entity_bundle == 'early_warnings') {
    $service_id = $entity->getCommentedEntity()->get('field_release_service')->value;
    $result = hzd_get_immediate_notification_user_mails($service_id, 'early_warnings');
    // pr($result);exit;
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId());



      // sendCommentNotificationMail($message_body, $result, $action);
    //We are sending the early warning entity view as configured not just coment view.
    /*    $comment_author = $commententity->get('name')->value;
        $comment_email = $commententity->get('mail')->value;
        $comment_body = $commententity->get('comment_body')->value;*/
    
    if (is_array($result) && count($result) > 0) {
      foreach ($result as $values) {
        $body = [];
      $body[] = $view_builder->view($entity, 'mail', 'de');
        $preference = $values->field_message_preference_value ? $values->field_message_preference_value : 'html';
        $mail = $values->mail;
        $data['node'] = $nodeentity;
        $data['user'] = user_load_by_mail($mail);
        // $mailContent = getNodeMailContentFromConfig($data,'update');

        $config = \Drupal::config('hzd_customizations.mailtemplates')->get($entity_bundle);
        $token_service = \Drupal::token();
        // Replace the token for subject.
        // $token_sub = $config['subject_update'];
        // $subject = $token_service->replace($token_sub, array( 'node' => $nodeentity));
        if($action == 'insert') {
          $subject = t('New comment on Early warnings.');
        } else {
          $subject = t('Updated comment on Early warnings.');
        }
        
        $body[] = [
        '#markup' => $token_service->replace( $config['mail_footer'], array('node' => $data['node'],'user'=>$data['user']))
        ];
      
        $message_body = \Drupal::service('renderer')->render($body);
        send_immediate_notifications($subject, $message_body, $mail, $preference);
      }
    }
  } else if($entity_bundle == 'forum') {

    $groupContentId = \Drupal\cust_group\Controller\CustNodeController::getNodeGroupId($nodeentity);
    if ($groupContentId) {
      $group = $groupContentId->getGroup()->id();
    }
    if (!empty($group) && $group && (in_array($nodeentity->bundle(), ['forum']))) {
      $getUserMailList = getGroupMemberList($group);
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId());
      foreach ($getUserMailList as $to) {
        $body = [];
        $body[] = $view_builder->view($entity, 'mail', 'de');
        $data['node'] = $nodeentity;
        
        $config = \Drupal::config('hzd_customizations.mailtemplates')->get('group_content');
        $token_service = \Drupal::token();
        // Replace the token for subject.
        // $token_sub = $config['subject_update'];
        // $params['subject'] = $token_service->replace($token_sub, array( 'node' => $nodeentity));
        if($action == 'insert') {
          $params['subject'] = t('New comment on Forum.');
        } else {
          $params['subject'] = t('Updated comment on Forum.');
        }
        $result = array();
        $mailManager = \Drupal::service('plugin.manager.mail');
        $module = 'cust_group';
        $key = 'immediate_notifications';
        $langcode = \Drupal::currentUser()->getPreferredLangcode();
        $send = TRUE;
        $data['user'] = user_load_by_mail($to);
        $body[] = [
        '#markup' => $token_service->replace( $config['mail_footer'], array('node' => $data['node'],'user'=>$data['user']))
        ];
        $params['message'] = \Drupal::service('renderer')->render($body);
        $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
      }
    }
  }
}


