<?php

/**
 * @file
 * Contains hzd user customizations.
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

// development functions
function __hzd($object) {
    if (empty($object)) {
        $object = new stdClass();
    }
    pr(get_class_methods(get_class($object)));
    exit;
}

// development functions
function pr($data) {
    echo "<pre>";
    print_r($data);
    echo "</pre>";
}
function prk($data) {
    echo "<pre>";
    print_r(array_keys($data));
    echo "</pre>";
}

/**
 * implements hook_form_alter
 */
function hzd_user_customizations_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_register_form' || $form_id == 'user_form') {
    	$val = [];
	$user_states = hzd_states();
	asort($user_states);
	//sort($user_states);
        if ($form_id == 'user_register_form') {
            $form['desc'] = [
                '#weight' => -100,
                '#type' => 'markup',
                '#markup' => "<p>Herzlich Willkommen beim Betriebsportal KONSENS. Es sind jetzt nur noch wenige Schritte bis zu Ihrer Freischaltung.</p>
<p><strong><span class='text-danger'>Bitte beachten Sie bei der Registrierung folgende Hinweise:</span></strong></p>
<p>Das Betriebsportal dient als zentrale Anlaufstelle für betriebliche Fragen. Bitte geben Sie hierzu Ihre vollständigen dienstlichen Kontaktdaten an. Ihre Daten werden selbstverständlich nicht weitergegeben und sind nur für registrierte Benutzer des Betriebsportals sichtbar.</p>
<p>Nach erfolgter Anmeldung ist Ihr Account aktiv.</p>
<p>Wenn Sie sich länger als ein Jahr nicht am BpK anmelden, wird Ihr Account nach vorheriger Ankündigung&nbsp;automatisch deaktiviert. Sie erhalten danach keine Emailbenachrichtigungen mehr. Durch einen erneuten Login wird Ihr Account automatisch wieder reaktiviert.</p>",
            ];
            $form_state->set('isUserRegistration',1);
            $form['account']['confirm_mail'] = $form['account']['mail'];
            $form['account']['confirm_mail']['#weight'] = 1;
            $emailLabel = $form['account']['mail']['#title'];
            $form['account']['confirm_mail']['#title'] = t('Confirm @email',['@email'=>$emailLabel]);
            $form['account']['mail']['#weight'] = 0;
            $form['account']['name']['#weight'] = 3;
            $form['account']['pass']['#weight'] = 2;
/*            pr(array_keys($form['account']));
//exit;
            pr(($form['account']['pass']['#weight']));exit;*/
        }

        $disabled = [];
        if ($form_id == 'user_form') {
            $account = $form_state->getFormObject()->getEntity();
            $userid = $account->id();
            $db = \Drupal::database();
            $result = $db->select('cust_profile', 'cp')
                ->fields('cp', array('firstname', 'lastname', 'phone', 'position', 'state_id'))
                ->condition('cp.uid', $userid);
            $val = $result->execute()->fetchAssoc();

            $disabled =  ['disabled' => 'disabled'];
            $member = \Drupal::currentUser();
            if ($member->id() == 1 || in_array('site_administrator', $member->getRoles())) {
                $disabled = [];
            }
        }


        $form['profile'] = array(
            '#type' => 'fieldset',
            '#title' => t('Personal Information'),
        );
        $form['profile']['user_firstname'] = array(
            '#type' => 'textfield',
            '#title' => t('First Name'),
            '#default_value' => isset($val['firstname']) ? $val['firstname'] : '',
            '#size' => 60,
            '#maxlength' => 128,
            '#required' => TRUE,
        );
        $form['profile']['user_lastname'] = array(
            '#type' => 'textfield',
            '#title' => t('Last Name'),
            '#default_value' => isset($val['lastname']) ? $val['lastname'] : '',
            '#size' => 60,
            '#maxlength' => 128,
            '#required' => TRUE,
        );
        $form['profile']['user_position'] = array(
            '#type' => 'textfield',
            '#title' => t('Position'),
            '#default_value' => isset($val['position']) ? $val['position'] : '',
            '#size' => 60,
            '#maxlength' => 128,
            '#required' => TRUE,
        );
        $form['profile']['user_phone'] = array(
            '#type' => 'textfield',
            '#title' => t('Phone'),
            '#default_value' => isset($val['phone']) ? $val['phone'] : '',
            '#size' => 60,
            '#maxlength' => 128,
            '#required' => TRUE,
        );


        $form['profile']['user_state'] = array(
            '#type' => 'select',
            '#title' => t('State'),
            '#options' => $user_states,
            '#default_value' => isset($val['state_id']) ? $val['state_id'] : '',
            '#attributes' => $disabled,
            '#required' => TRUE,
        );
        
        if ($form_id == 'user_register_form') {
            $gids = \Drupal::entityQuery('group')->condition('type', ['open'], 'IN')->condition('status',1)->sort('label')->execute();
            //sort($gids);
            $groupsList = \Drupal\group\Entity\Group::loadMultiple($gids);
            $groups = [];
            foreach ($groupsList as $group) {
                $groupName = $group->label();
//                if ($group->bundle() == 'moderate') {
//                    $groupName .= " <span style='color:red'>(Freischaltung durch Admin erforderlich)</span>";
//                }
                $groups[$group->id()] = t($groupName);
            }
            //pr($groups);exit;
            $form['groups'] = array(
                '#type' => 'checkboxes',
                '#title' => t('@grp',['@grp'=>t('Groups')]),
                '#options' => $groups,
                '#default_value' => array(RELEASE_MANAGEMENT, INCIDENT_MANAGEMENT, PROBLEM_MANAGEMENT,
                SERVICE_LEVEL_MANAGEMENT, BETRIEBSPORTAL_KONSENS, KAPAZITATSMANAGEMENT, VERFUGBARKEITSMANAGEMENT, COVID_INFO),
                //'#required' => true
            );
            $form['groups'][RELEASE_MANAGEMENT] = array( '#disabled' => TRUE, );
            $form['groups'][INCIDENT_MANAGEMENT] = array( '#disabled' => TRUE, );
            $form['groups'][PROBLEM_MANAGEMENT] = array( '#disabled' => TRUE, );
            $form['groups'][SERVICE_LEVEL_MANAGEMENT] = array( '#disabled' => TRUE, );
            $form['groups'][BETRIEBSPORTAL_KONSENS] = array( '#disabled' => TRUE, );
            $form['groups'][KAPAZITATSMANAGEMENT] = array( '#disabled' => TRUE, );
            $form['groups'][VERFUGBARKEITSMANAGEMENT] = array('#disabled' => TRUE, );
            $form['groups'][COVID_INFO] = array('#disabled' => TRUE, );
        }
        $form['#validate'][] = 'hzd_user_register_form_validate';
        $form['actions']['submit']['#submit'][] = 'hzd_user_register_form_submit';
    }
    return $form;
}

/**
 * custom validate function to validate user state
 */
function hzd_user_register_form_validate(array &$form, FormStateInterface $form_state) {
    $state = $form_state->getValue('user_state');
    if ($state == 1) {
        $form_state->setErrorByName('user_state', 'select state');
    }
    if (!\Drupal::service('email.validator')->isValid($form_state->getValue('mail'))) {
        $form_state->setErrorByName('mail', t('Ungültige E-Mail'));
    }
    if ($form_state->getValue('mail') != $form_state->getValue('confirm_mail') && $form_state->get('isUserRegistration') == 1) {
        $form_state->setErrorByName('confirm_mail', t('Emails donot match'));
    }
    $routeuser = \Drupal::routeMatch()->getParameter('user');
    $routeusername = $routeuser ? $routeuser->getAccountName() : '';
    $name = $form_state->getValue('name');
    if($routeusername != $name){
        $user= \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name'=>$name]);
        if($user){
            $form_state->setErrorByName('name', t('The username %value is already taken.',['%value'=>$name]));
        }
    }
}

/**
 * custom submit function to save user details
 */
function hzd_user_register_form_submit(array &$form, FormStateInterface $form_state) {
    $account = $form_state->getFormObject()->getEntity();
    $userid = $account->id();
    $firstname = $form_state->getValue('user_firstname');
    $lastname = $form_state->getValue('user_lastname');
    $position = $form_state->getValue('user_position');
    $phone = $form_state->getValue('user_phone');
    $state = $form_state->getValue('user_state');
    db_merge('cust_profile')
        ->key(array('uid' => $userid))
        ->fields(array('firstname' => $firstname, 'lastname' => $lastname, 'phone' => $phone, 'position' => $position, 'state_id' => $state))
        ->execute();
}

/**
 * hook implementing hook_user_insert()
 */
function hzd_user_customizations_user_insert($user) {
    insert_nsm_role($user->id());
    $preselected = array(
        RELEASE_MANAGEMENT => RELEASE_MANAGEMENT,
        INCIDENT_MANAGEMENT => INCIDENT_MANAGEMENT,
        PROBLEM_MANAGEMENT => PROBLEM_MANAGEMENT,
        SERVICE_LEVEL_MANAGEMENT => SERVICE_LEVEL_MANAGEMENT,
        BETRIEBSPORTAL_KONSENS => BETRIEBSPORTAL_KONSENS,
        KAPAZITATSMANAGEMENT => KAPAZITATSMANAGEMENT,
        VERFUGBARKEITSMANAGEMENT => VERFUGBARKEITSMANAGEMENT,
        COVID_INFO => COVID_INFO,
    );

    $covid_group = \Drupal\group\Entity\Group::load(COVID_INFO);
    if (isset($covid_group)) {
      $preselected[COVID_INFO] = COVID_INFO;
    }
   
    if(!empty($_POST['groups'])) {
        $groupData = $_POST['groups'];
        $finalgroups = array_merge($groupData, $preselected);
    } else {
        $finalgroups = $preselected;
    }  
    if($finalgroups) {
        foreach ($finalgroups as $gid) {
            $group = \Drupal\group\Entity\Group::load($gid);
            if ($group->bundle() == 'open') {
                $group->addMember($user);
            } elseif ($group->bundle() == 'moderate') {
                $plugin = $group->getGroupType()->getContentPlugin('group_membership');
                $group_content = \Drupal\group\Entity\GroupContent::create([
                    'type' => $plugin->getContentTypeConfigId(),
                    'gid' => $group->id(),
                    'entity_id' => $user->id(),
                    'request_status' => 0,
                ])->save();
              mailToGroupAdmins(['group'=>$group,'module'=>'cust_group','key'=>'immediate_notifications','message'=>'']);
            }
        }
    }
    //Insert default Notification Subscription for COVID INFO GROUP
    if (isset($covid_group)) {
      Drupal\hzd_notifications\HzdNotificationsHelper::save_group_default_notifications($user->id(), COVID_INFO, 0);
    }
}

function insert_nsm_role($uid) {
  \Drupal::database()->insert('nsm_user_role')
                     ->fields(array(
                         'user_id' => $uid,
                         'nsm_role_id' => 1,
                     ))->execute();
}

/**
 * hook implementing hook_user_update()
 */
function hzd_user_customizations_user_update($account) {
  \Drupal\Core\Cache\Cache::invalidateTags(array('user:' . $account->id(),
      'grantpermission_view:' . $account->id(),
      'grantpermission_update_delete:' . $account->id()));
}

/**
 * get list of hzd states
 */
function hzd_states() {
    $db = \Drupal::database();
    $result = $db->select('states', 's')
        ->fields('s', array('id', 'state'))
        ->condition('s.entity', 1, '!=');
    $val = $result->execute()->fetchAll();
    $states = array();
    foreach ($val as $user_states_list) {
        $states[$user_states_list->id] = $user_states_list->state;
    }
    return $states;
}

/**
 * get list of hzd states abbreviations
 */
function hzd_states_abbr() {
    $db = \Drupal::database();
    $result = $db->select('states', 's')
        ->fields('s', array('id', 'abbr'))
        ->condition('s.entity', 1, '!=');
    $val = $result->execute()->fetchAll();
    $states = array();
    foreach ($val as $user_states_list) {
        $states[$user_states_list->id] = $user_states_list->abbr;
    }
    return $states;
}

/**
 * get list of hzd states
 */
function hzd_group_list($uid, $no_html = false) {
    $db = \Drupal::database();
    $result = $db->select('groups_field_data', 'gfd');
    $result->join('group_content_field_data', 'gcfd', 'gfd.id = gcfd.gid');
    $result->fields('gfd', array('id', 'label'))
        ->condition('gcfd.entity_id', $uid)
        ->condition('request_status', 1)
        ->orderBy('label', 'ASC');
    $val = $result->execute()->fetchAll();
    if (!$no_html) {
        $groups = '<div class="user-groups"><h2 class="title">' . t("My Groups") .' </h2>';
        foreach ($val as $group) {
            $url = Url::fromUserInput('/group/' . $group->id);
            $groups .= '<div class="user-group-list">' . \Drupal::l(t($group->label), $url) . '</div>';
        }
        $groups .= '</div>';
        return $groups;
        //return array('#markup' => $groups,'#cache'=>['max-age'=>0]);
    } else {
        return $val;
    }
}
