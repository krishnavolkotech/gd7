<?php 

/**
 * implements hook_mail
 */
use Drupal\Component\Utility\SafeMarkup;

function problem_management_mail($key, &$message, $params = array()) {
 // echo '<pre>'; print_r($message); 
 // echo '<pre>'; print_r($params);
 // exit; 

  $options = array(
                   'langcode' => $message['langcode'],
                   );
 // pr($message);exit;
  switch ($key) {
    case 'problem_management_read_csv':
  //  $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['from'] = $message['from'];
    $message['subject'] = $params['subject'];
    //$message['body'][] = $params['message'];
   //  $message['body'][] = SafeMarkup::checkPlain($params['message']);
     $message['body'][] = $params['message'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    break;

   case 'release_read_csv':
  //  $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['from'] = $message['from'];
    $message['subject'] = $params['subject'];
    //$message['body'][] = $params['message'];
   //  $message['body'][] = SafeMarkup::checkPlain($params['message']);
     $message['body'][] = $params['message'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    break;

    case 'read_arbeitsanleitungen_zipfile':
      $message['from'] = $message['from'];
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
  }
}


// Default cron-function, configurable through /admin/config/system/cron

function problem_management_cron() {
  //Disabled as we are going to run through crontab
/*  $readExcel = new Drupal\problem_management\Controller\ReadexcelController();
  $readExcel->read_problem_csv();*/
}

// Define custom cron functions.
/**
function problem_management_cronapi($op, $job = NULL) {
  return array(
    'problem_management_cronjob_2' => array(
      'title' => 'Cron-2 Handler',
      'callback' => 'problem_management_run_importcsv',
      'scheduler' => array(
        'name' => 'crontab',
        'crontab' => array(
          'rules' => array('00 01,13 * * *'),
        ),
      ),
    ),
  );
}

*/
// Custom cron-function
function problem_management_run_importcsv($job) {
/**

  // global $base_url;
  // $currency_value_url =  $base_url . '/currecy_values';
  // $request = Drupal::httpClient()->get($currency_value_url);
  // $request->addHeader('If-Modified-Since', gmdate(DATE_RFC1123, $last_fetched));
  try {
    $currencyvalue =  new CurrencyValuesController();
    // print_r($currencyvalue); exit;
    $currencyvalue->CurrencyValues();
    // $request->send();
    // $response = $request->send();
    // Expected result.
    // $data = $response->getBody(TRUE);
  } catch (RequestException $e) {
    watchdog_exception('grn_custom', $e);
  }
*/
  return $this->redirect('');
  // Do some stuff ...
}




/*
* Get the no of problems for the node
*/
/**
function default_problem_no($nid = NULL) {
  if ($nid) {
    $sno =  \Drupal::database()->result( \Drupal::database()->query("select max(field_s_no_value) from {content_type_problem} where nid = %d", $nid));
    return $sno;
  }
  else {
    $sno =  \Drupal::database()->result( \Drupal::database()->query("select max(field_s_no_value) from {content_type_problem} "));
  }
  if (!$sno) {
    return 1;
  }
  return $sno;
}
 * 
 */

/**
 * function get the 'group' parameter from url and if group value is object
 * fetch id from group object else return group
 * @return integer
 *   current group id.
 */
function get_group_id() {
  $group = \Drupal::routeMatch()->getParameter('group');
    if (is_object($group)) {
      $groupId = $group->id();
      return $groupId;
    }
    return $group;
}



/**
 *
 */
//the sort order is not working
//function problem_management_query_problems_entity_query_alter($query){
//    $order = &$query->getOrderBy();
//    $order = ['STR_TO_DATE(node__field_processing.field_processing_value,"%d.%m.%Y")'=>'DESC'];
////    $order = $query->getOrderBy('node__field_processing.field_processing_value','desc');
//    debug($query);
//}

/**
 * Implements hook_schema().
 */
function problem_management_schema() {
  $schema = [];
  $schema['group_problems_view'] = [
    'description' => 'Table for Problems and groups mappings',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'group_id' => array(
        'type' => 'int',
        'length' => 11,
      ),
      'service_id' => array(
        'type' => 'int',
        'length' => 11,
      ),
    ),
    'primary key' => array('id'),
  ];

  $schema['problem_import_history'] = array(
    'description' => 'Storing problem import history information.',
    'fields' => array(
      'id' => array(
        'description' => 'Storing planning notification id value.',
        'type' => 'serial',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'problem_date' => array(
        'description' => 'Storing problem date value.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'import_status' => array(
        'description' => 'Storing import status value.',
        'type' => 'varchar',
        'length' => 32,
        'default' => '',
      ),
      'error_message' => array(
        'description' => 'Storing import error message.',
        'type' => 'varchar',
        'length' => 100,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),

  );
  
  return $schema;
}
