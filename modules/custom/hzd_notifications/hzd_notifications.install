<?php
use Drupal\hzd_notifications\HzdNotificationsHelper;

/**
 * Implements hook_schema().
 */
function hzd_notifications_schema() {
  $schema['service_notifications'] = array(
    'description' => 'Stores the service immediate notifications',
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'service_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      
      'send_interval' => array(
        'type' => 'int',
      ),
      
      'uids' => array(
        'type' => 'blob',
        'not null' => TRUE,
      ),
      
    ),
    'primary key' => array('sid'),
  );
  
  $schema['planning_files_notifications'] = array(
    'description' => 'Stores the planning files notifications',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'send_interval' => array(
        'type' => 'int',
      ),
      'uids' => array(
        'type' => 'blob',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['quickinfo_notifications'] = array(
    'description' => 'Stores the quickinfo notifications',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'cck' => array(
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
      ),
      'send_interval' => array(
        'type' => 'int',
      ),
      'uids' => array(
        'type' => 'blob',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['group_notifications'] = array(
    'description' => 'Stores the Group notifications',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'group_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'group_name' => array(
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
      ),
      'send_interval' => array(
        'type' => 'int',
      ),
      'uids' => array(
        'type' => 'blob',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['group_notifications_user_default_interval'] = array(
    'description' => 'Stores the Group notifications default interval',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'group_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      //group id is sufficient as this doesnt trigger on group update
/*      'group_name' => array(
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
      ),*/
      'default_send_interval' => array(
        'type' => 'int',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['service_notifications_override'] = array(
    'description' => 'Override service notifications',
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'service_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      
      'send_interval' => array(
        'type' => 'int',
      ),
      
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      
      'rel_type' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      
    ),
    'primary key' => array('sid'),
  );

  $schema['planning_files_notifications_default_interval'] = array(
    'description' => 'Storing internal planning files notifications.',
    'fields' => array(
      'id' => array(
        'description' => 'Storing planning notification id value.',
        'type' => 'serial',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Storing NSM user id value.',
        'type' => 'int',
      ),
      'planning_file_type' => array(
        'description' => 'Storing planning type file name.',
        'type' => 'varchar',
        'length' => 100,
      ),
      'default_send_interval' => array(
        'description' => 'Storing default send interval information.',
        'type' => 'int',
      ),
    ),
    'primary key' => array('id'),

  );

  $schema['quickinfo_notifications_user_default_interval'] = array(
    'description' => 'Storing quickinfo notifications.',
    'fields' => array(
      'id' => array(
        'description' => 'Storing quickinfo notifications id value.',
        'type' => 'int',
      ),
      'uid' => array(
        'description' => 'Storing quickinfo notifications user id value.',
        'type' => 'int',
      ),
      'affected_service' => array(
        'description' => 'Storing quickinfo notifiations effected value.',
        'type' => 'varchar',
        'length' => 50,
      ),
      'default_send_interval' => array(
        'description' => 'Storing quickinfo notifications default send interval value.',
        'type' => 'int',
      ),
    ),

  );

  $schema['service_notifications_user_default_interval'] = array(
    'description' => 'Storing service notification user values.',
    'fields' => array(
      'id' => array(
        'description' => 'Storing service notification serial value.',
        'type' => 'serial',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'uid' => array(
        'description' => 'Storing service notification user id value.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'service_type' => array(
        'description' => 'Storing import status value.',
        'type' => 'varchar',
        'length' => 32,
        'default' => '',
        'not null' => TRUE,
      ),
      'default_send_interval' => array(
        'description' => 'Storing default send value.',
        'type' => 'int',
      ),
      'rel_type' => array(
        'description' => 'Storing rel value.',
        'type' => 'int',
      ),
    ),
    'primary key' => array('id'),

  );

  return $schema;
}

function hzd_notifications_update_8008() {
  $query = db_select('node_field_data', 'n');
    $query->leftJoin('node__field_release_name', 'nfrn', 'n.nid = nfrn.entity_id');
    $query->leftJoin('node__field_problem_name', 'nfpn', 'n.nid = nfpn.entity_id');
    $query->leftJoin('node__field_enable_downtime', 'nfed', 'n.nid = nfed.entity_id');
    $query->leftJoin('node__release_type', 'nrt', 'n.nid = nrt.entity_id');
    $query->condition('n.type', 'services', '=')
          ->fields('n', array('nid'))
          ->fields('nfrn', array('field_release_name_value'))
          ->fields('nfpn', array('field_problem_name_value'))
          ->fields('nrt', array('release_type_target_id'))
          ->fields('nfed', array('field_enable_downtime_value'));
    $result = $query->execute()->fetchAll();
    foreach($result as $services_info) {
      if($services_info->field_enable_downtime_value && $services_info->release_type_target_id == 459) {
          insert_service_notifications('downtimes', $services_info->nid);
      }
      if($services_info->field_problem_name_value && $services_info->release_type_target_id == 459) {
          //$problem_record = array('service_id' => $services_info->nid, 'type' => 'problem', 'send_interval' => 0, 'uids' => 0);
	        //db_insert('service_immediate_notifications')->fields($problem_record)->execute();
	        insert_service_notifications('problem', $services_info->nid);
      }
      if($services_info->field_release_name_value) {
        //$release_record = array('service_id' => $services_info->nid, 'type' => 'release', 'send_interval' => 0, 'uids' => 0);
        //db_insert('service_immediate_notifications')->fields($release_record)->execute();
        insert_service_notifications('release', $services_info->nid);
      }
      insert_service_notifications('early_warnings', $services_info->nid);
      //$early_warnings_record = array('service_id' => $services_info->nid, 'type' => 'early_warnings', 'send_interval' => 0, 'uids' => 0);
      //db_insert('service_immediate_notifications')->fields($early_warnings_record)->execute();
    }
}

function insert_service_notifications($type, $nid) {
  
  $interval = HzdNotificationsHelper::hzd_notification_send_interval();
  foreach($interval as $vals) {
    $record = array('service_id' => $nid, 'type' => $type, 'send_interval' => $vals, 'uids' => 0);
	  db_insert('service_notifications')->fields($record)->execute();
  }
}

/*function hzd_notifications_update_8009() {
  // migrate planning file notifications.
  $interval = array('-1', 0, 86400, 604800);
  foreach($interval as $vals) {
    $record = array('send_interval' => $vals, 'uids' => 0);
	  db_insert('planning_files_notifications')->fields($record)->execute();
  }
}*/

function hzd_notifications_update_8010() {
  // migrate quickinfo notifications.
  $interval = HzdNotificationsHelper::hzd_notification_send_interval();
  foreach($interval as $vals) {
    $uids = db_query("SELECT n.uid FROM {notifications} n, {notifications_fields} nf WHERE n.sid = nf.sid and nf.value = :val AND send_interval = :intval", array(":val" => 'planning_files', "intval" => $vals))->fetchCol();
    $serialized_uids = serialize($uids);
    $record = array('send_interval' => $vals, 'uids' => $serialized_uids);
	  db_insert('planning_files_notifications')->fields($record)->execute();
  }
}

// migrate quickinfo notifications
function hzd_notifications_update_8012() {
  $options = \Drupal\field\Entity\FieldStorageConfig::loadByName('node','field_other_services')->getSetting('allowed_values');
  $interval = HzdNotificationsHelper::hzd_notification_send_interval();
  foreach($options as $content_key => $content) {
    foreach($interval as $vals) {
      $uids = db_query("SELECT n.uid FROM {notifications} n, {notifications_fields} nf WHERE n.sid = nf.sid and nf.value = :val and n.send_interval = :intval", array(":val" => $content, ":intval" => $vals))->fetchCol();
      $serialized_uids = serialize($uids);
      $record = array('cck' => $content, 'send_interval' => $vals, 'uids' => $serialized_uids);
	    db_insert('quickinfo_notifications')->fields($record)->execute();
    }
  }
}

// update user group notifications default interval
function hzd_notifications_update_8015() {
  $user_ids = db_query("SELeCT uid FROM users where uid <>0")->fetchCol();
  foreach($user_ids as $uid) {
    $default_groups_send_interval = array();
    $default_groups_query  = db_query("SELECT DISTINCT value , send_interval FROM {notifications} s, {notifications_fields} nf 
                             WHERE s.sid = nf.sid and  field = :field and uid = :uid", array(":field" => 'group', ":uid" => $uid))->fetchAll();
    foreach($default_groups_query as $default_groups_info) {
      $default_groups_send_interval[$default_groups_info->value] = $default_groups_info->send_interval;
    }
    
    $user_groups_query = db_query("SELECT gfd.id, gfd.label FROM {groups_field_data} gfd, {group_content_field_data} gcfd 
                   WHERE gfd.id = gcfd.gid AND gcfd.entity_id = :eid", array(":eid" => $uid))->fetchAll();
    $user_groups = array();
    foreach($user_groups_query as $groups_list) {
      $user_groups[$groups_list->id] = $groups_list->label;
    }
    
    if(count($user_groups) > 0) {
      foreach($user_groups as $gid => $label) {
        // old ref
        $old_ref = db_query("SELECT field_old_reference_value FROM {group__field_old_reference} 
                   WHERE entity_id = :eid", array(":eid" => $gid))->fetchField();
        if($old_ref && $default_groups_send_interval[$old_ref]) {
          $int_val = $default_groups_send_interval[$old_ref] ? $default_groups_send_interval[$old_ref] : 0;
          $record = array('uid' => $uid, 'group_id' => $gid, 'group_name' => $label, 'default_send_interval' => $int_val);
	        db_insert('group_notifications_user_default_interval')->fields($record)->execute();
        }
      }
    }

  }
}

/*function hzd_migrate_group_notifications() {
  $groups = db_query("SELECT id FROM {groups}")->fetchCol();
  $interval = array('-1', 0, 86400, 604800);
  foreach($groups as $id) {
    // get the list of users for each greoup and interval
    foreach($interval as $vals) {
      $uids = db_query()->fetchAll();
    }
  }
}*/
