<?php

/**
 * Implements callback_batch_operation().
 */
function migrate_each_user($uid, $rel_type, &$context) {
  $default_interval = hzd_get_default_interval($uid, $rel_type);
  // get all services
  $services = hzd_get_all_services($rel_type);
  // user all services interval
  foreach($services as $services_info) {
    if($services_info->field_enable_downtime_value && $services_info->release_type_target_id == KONSONS) {
      if(isset($default_interval['downtimes'])) {
        $user_notifications[$services_info->nid]['downtimes'] =  $default_interval['downtimes'];
      }
    }
    if($services_info->field_problem_name_value && $services_info->release_type_target_id == KONSONS) {
      if(isset($default_interval['problem'])) {
        $user_notifications[$services_info->nid]['problem'] =  $default_interval['problem'];
      }
    }
    if($services_info->field_release_name_value) {
      if(isset($default_interval['release'])) {
        $user_notifications[$services_info->nid]['release'] =  $default_interval['release'];
      }
    }
    if(isset($default_interval['early_warnings'])) {
      $user_notifications[$services_info->nid]['early_warnings'] =  $default_interval['early_warnings'];
    }
  }

  // get priority of user services.
  $get_override_services = db_query("SELECT service_id, send_interval, type FROM {service_notifications_override} 
                           WHERE uid = :uid and rel_type = :rel_type", array(":uid" => $uid, ":rel_type" => $rel_type))->fetchAll();
  if(count($get_override_services) > 0) {
    foreach($get_override_services as $get_override_services_vals) {
      $user_notifications[$get_override_services_vals->service_id][$get_override_services_vals->type] = $get_override_services_vals->send_interval;
    }
  }

  foreach($services as $service_vals) {
    if($service_vals->field_enable_downtime_value && $service_vals->release_type_target_id == KONSONS) {
      insert_user_service_notifications('downtimes', $service_vals->nid, $uid, $user_notifications);
    }
    if($service_vals->field_problem_name_value && $service_vals->release_type_target_id == KONSONS) {
      insert_user_service_notifications('problem', $service_vals->nid, $uid, $user_notifications);
    }
    if($service_vals->field_release_name_value) {
      insert_user_service_notifications('release', $service_vals->nid, $uid, $user_notifications);
    }
    insert_user_service_notifications('early_warnings', $service_vals->nid, $uid, $user_notifications);
  }
}

/**
 * get default intervals of user
 */
function hzd_get_default_interval($uid, $rel_type) {
  $default_intval_per_user = db_query("SELECT service_type, default_send_interval FROM {service_notifications_user_default_interval} 
                               WHERE uid = :uid and rel_type = :type", array(":uid" => $uid, ":type" => $rel_type))->fetchAll();
  $default_interval = array();
  foreach($default_intval_per_user as $val) {
    $default_interval[$val->service_type] = $val->default_send_interval;
  }
  return $default_interval;
}

/**
 * get all services of a release type
 */
function hzd_get_all_services($rel_type) {
  $query = db_select('node_field_data', 'n');
  $query->leftJoin('node__field_release_name', 'nfrn', 'n.nid = nfrn.entity_id');
  $query->leftJoin('node__field_problem_name', 'nfpn', 'n.nid = nfpn.entity_id');
  $query->leftJoin('node__field_enable_downtime', 'nfed', 'n.nid = nfed.entity_id');
  $query->leftJoin('node__release_type', 'nrt', 'n.nid = nrt.entity_id');
  $query->condition('n.type', 'services', '=')
        ->condition('nrt.release_type_target_id', $rel_type, '=')
        ->fields('n', array('nid'))
        ->fields('nfrn', array('field_release_name_value'))
        ->fields('nfpn', array('field_problem_name_value'))
        ->fields('nrt', array('release_type_target_id'))
        ->fields('nfed', array('field_enable_downtime_value'));
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * insert user notifications in service notifications table
 */
function insert_user_service_notifications($type, $nid, $uid, $user_notifications) {  
  $interval = array('-1', 0, 86400, 604800);
  foreach($interval as $vals) {
    $uids_list = array();
    $uids_query = db_query("SELECT uids FROM {service_notifications} WHERE service_id = :sid AND type = :type AND send_interval = :intval", 
                 array(":sid" => $nid, ":type" => $type, ":intval" => $vals))->fetchField();
    $uids_list = unserialize($uids_query);    
    if(($key = array_search($uid, $uids_list)) !== false) {
      unset($uids_list[$key]);
    }
    if(isset($user_notifications[$nid][$type]) && ($user_notifications[$nid][$type] == $vals)) {
      $uids_list[] = $uid;
    }  
    $serialized_uid = serialize($uids_list);  
	  db_update('service_notifications')->fields(array('uids' => $serialized_uid))
	    ->condition('service_id', $nid)
	    ->condition('type', $type)
	    ->condition('send_interval', $vals)
      ->execute();
	    
  }
}
