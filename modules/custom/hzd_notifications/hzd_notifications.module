<?php

use Drupal\cust_group\Controller\CustNodeController;
use Drupal\cust_group\CustGroupHelper;
use Drupal\hzd_notifications\Controller\HzdNotifications;
use Drupal\hzd_notifications\HzdNotificationsHelper;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Language\LanguageInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;
use Drupal\hzd_notifications\NotificationManager;
use Drupal\group\Entity\GroupContent;

define('ENTITY_OP_UPDATE', 'update');
define('ENTITY_OP_INSERT', 'insert');
define('NOTIFICATION_SCHEDULE_TABLE', 'notifications_scheduled');

/**
 * Implements callback_batch_operation().
 */
function migrate_each_user($uid, $rel_type, &$context) {
  $default_interval = hzd_get_default_interval($uid, $rel_type);
  // get all services
  $services = hzd_get_all_services($rel_type);
  // user all services interval
  foreach ($services as $services_info) {
    if ($services_info->field_enable_downtime_value && $services_info->release_type_target_id == KONSONS) {
      if (isset($default_interval['downtimes'])) {
        $user_notifications[$services_info->nid]['downtimes'] = $default_interval['downtimes'];
      }
    }
    if ($services_info->field_problem_name_value && $services_info->release_type_target_id == KONSONS) {
      if (isset($default_interval['problem'])) {
        $user_notifications[$services_info->nid]['problem'] = $default_interval['problem'];
      }
    }
    if ($services_info->field_release_name_value) {
      if (isset($default_interval['release'])) {
        $user_notifications[$services_info->nid]['release'] = $default_interval['release'];
      }
    }
    if (isset($default_interval['early_warnings'])) {
      $user_notifications[$services_info->nid]['early_warnings'] = $default_interval['early_warnings'];
    }
  }

  // get priority of user services.
  $get_override_services = db_query("SELECT service_id, send_interval, type FROM {service_notifications_override} 
                           WHERE uid = :uid and rel_type = :rel_type", array(
    ":uid" => $uid,
    ":rel_type" => $rel_type
  ))->fetchAll();
  if (count($get_override_services) > 0) {
    foreach ($get_override_services as $get_override_services_vals) {
      $user_notifications[$get_override_services_vals->service_id][$get_override_services_vals->type] = $get_override_services_vals->send_interval;
    }
  }

  foreach ($services as $service_vals) {
    if ($service_vals->field_enable_downtime_value && $service_vals->release_type_target_id == KONSONS) {
      insert_user_service_notifications('downtimes', $service_vals->nid, $uid, $user_notifications);
    }
    if ($service_vals->field_problem_name_value && $service_vals->release_type_target_id == KONSONS) {
      insert_user_service_notifications('problem', $service_vals->nid, $uid, $user_notifications);
    }
    if ($service_vals->field_release_name_value) {
      insert_user_service_notifications('release', $service_vals->nid, $uid, $user_notifications);
    }
    insert_user_service_notifications('early_warnings', $service_vals->nid, $uid, $user_notifications);
  }
}

/**
 * get default intervals of user
 */
function hzd_get_default_interval($uid, $rel_type) {
  $default_intval_per_user = db_query("SELECT service_type, default_send_interval FROM {service_notifications_user_default_interval} 
                               WHERE uid = :uid and rel_type = :type", array(
    ":uid" => $uid,
    ":type" => $rel_type
  ))->fetchAll();
  $default_interval = array();
  foreach ($default_intval_per_user as $val) {
    $default_interval[$val->service_type] = $val->default_send_interval;
  }
  return $default_interval;
}

/**
 * get all services of a release type
 */
function hzd_get_all_services($rel_type = NULL) {
  $query = db_select('node_field_data', 'n');
  $query->leftJoin('node__field_release_name', 'nfrn', 'n.nid = nfrn.entity_id');
  $query->leftJoin('node__field_problem_name', 'nfpn', 'n.nid = nfpn.entity_id');
  $query->leftJoin('node__field_enable_downtime', 'nfed', 'n.nid = nfed.entity_id');
  $query->leftJoin('node__release_type', 'nrt', 'n.nid = nrt.entity_id');
  $query->condition('n.type', 'services', '=');
  if ($rel_type) {
    $query->condition('nrt.release_type_target_id', $rel_type, '=');
  }
  $query->fields('n', array('nid'))
    ->fields('nfrn', array('field_release_name_value'))
    ->fields('nfpn', array('field_problem_name_value'))
    ->fields('nrt', array('release_type_target_id'))
    ->fields('nfed', array('field_enable_downtime_value'));
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * insert user notifications in service notifications table
 */
function insert_user_service_notifications($type, $nid, $uid, $user_notifications) {
  $interval = HzdNotificationsHelper::hzd_notification_send_interval();
  foreach ($interval as $vals) {
    $uids_list = array();
    $uids_query = db_query("SELECT uids FROM {service_notifications} WHERE service_id = :sid AND type = :type AND send_interval = :intval",
      array(
        ":sid" => $nid,
        ":type" => $type,
        ":intval" => $vals
      ))->fetchField();
    $uids_list = unserialize($uids_query);
    if (($key = array_search($uid, $uids_list)) !== FALSE) {
      unset($uids_list[$key]);
    }
    if (isset($user_notifications[$nid][$type]) && ($user_notifications[$nid][$type] == $vals)) {
      $uids_list[] = $uid;
    }
    $serialized_uid = serialize($uids_list);
    db_update('service_notifications')->fields(array('uids' => $serialized_uid))
      ->condition('service_id', $nid)
      ->condition('type', $type)
      ->condition('send_interval', $vals)
      ->execute();

  }
}

/**
 * Implements callback_batch_operation().
 */
function migrate_group_each_user($uid, &$context) {
  $default_groups_send_interval = array();
  $default_groups_query = db_query("SELECT DISTINCT value , send_interval FROM {notifications} s, {notifications_fields} nf 
                             WHERE s.sid = nf.sid and  field = :field and uid = :uid", array(
    ":field" => 'group',
    ":uid" => $uid
  ))->fetchAll();
  foreach ($default_groups_query as $default_groups_info) {
    $default_groups_send_interval[$default_groups_info->value] = $default_groups_info->send_interval;
  }

  $user_groups_query = db_query("SELECT gfd.id, gfd.label FROM {groups_field_data} gfd, {group_content_field_data} gcfd 
                       WHERE gfd.id = gcfd.gid AND gcfd.entity_id = :eid", array(":eid" => $uid))->fetchAll();
  $user_groups = array();
  foreach ($user_groups_query as $groups_list) {
    $user_groups[$groups_list->id] = $groups_list->label;
  }

  if (count($user_groups) > 0) {
    foreach ($user_groups as $gid => $label) {
      // old ref
      $old_ref = db_query("SELECT field_old_reference_value FROM {group__field_old_reference} 
                 WHERE entity_id = :eid", array(":eid" => $gid))->fetchField();
      if ($old_ref && $default_groups_send_interval[$old_ref]) {
        $int_val = $default_groups_send_interval[$old_ref] ? $default_groups_send_interval[$old_ref] : 0;
        $record = array(
          'uid' => $uid,
          'group_id' => $gid,
          'group_name' => $label,
          'default_send_interval' => $int_val
        );
        db_insert('group_notifications_user_default_interval')
          ->fields($record)
          ->execute();
      }
    }
  }
}

function migrate_date_field($nid, $date, &$context) {
  $node = \Drupal\node\Entity\Node::load($nid);
  $node->set('field_date_deployed', date('Y-m-d', $date));
  $node->save();
}

function custom_date_deployed_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t("Date field in Deployed releases content type was migrated"));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args', array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

/**
 * implements hook_form_alter
 */
function hzd_notifications_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_type_add_form' || $form_id == 'node_type_edit_form') {
    $form['notification'] = array(
      '#type' => 'details',
      '#title' => t('Notifications settings'),
      '#open' => FALSE,
      // Controls the HTML5 'open' attribute. Defaults to FALSE.
      '#group' => 'additional_settings',
    );
    $form['notification']['notification_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('Notifications'),
      '#default_value' => \Drupal::config('node.settings')
        ->get('notification_checkbox_' . $form['type']['#default_value']) ?: 0,
    );
    $form['actions']['submit']['#submit'][] = 'hzd_notifications_form_submit';
    $form['actions']['save_continue']['#submit'][] = 'hzd_notifications_form_submit';
  }


//   if (isset($group_id))  {
//       $allowed_formids = array(
//      'resolve_form',
//      'cancel_form'
//    );
//    $current_user = \Drupal::service('current_user');
//    $current_user_roles = $current_user->getRoles();
//
//    if (!in_array('site_administrator', $current_user_roles) && (CustNodeController::isGroupAdmin($group_id) == TRUE) && in_array($form_id, $allowed_formids)) {
//      $form['notification'] = array(
//        '#type' => 'details',
//        '#title' => t('Notifications settings'),
//        '#open' => FALSE, // Controls the HTML5 'open' attribute. Defaults to FALSE.
//        '#group' => 'advanced',
//      );
//      $form['notification']['node_notification_checkbox'] = array(
//        '#type' => 'checkbox',
//        '#title' => t('Do not send notifications for this update.'),
//      );
//    }
//    else if ( !in_array('site_administrator', $current_user_roles) && $group->getMember($current_user) && in_array($form_id, $allowed_formids)) {
//      $form['notification'] = array(
//        '#type' => 'details',
//        '#title' => t('Notifications settings'),
//        '#open' => FALSE, // Controls the HTML5 'open' attribute. Defaults to FALSE.
//        '#group' => 'advanced',
//      );
//      $form['notification']['node_notification_checkbox'] = array(
//        '#type' => 'checkbox',
//        '#title' => t('Do not send notifications for this update.'),
//      );
//    }
//  }
}

/**
 * implements custom form submit
 */
function hzd_notifications_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
//  dpm($form_state->getValue('type'), $form_state->getValue('notification_checkbox'));
  \Drupal::configFactory()->getEditable('node.settings')
    ->set('notification_checkbox_' . $form_state->getValue('type'), $form_state->getValue('notification_checkbox'))
    ->save();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hzd_notifications_form_group_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//echo 132;exit;
  $current_user = \Drupal::service('current_user');
  $current_user_roles = $current_user->getRoles();
  $group = \Drupal::routeMatch()->getParameter('group');
  if (!is_object($group)) {
    $group = \Drupal\group\Entity\Group::load($group);
  }
  if (isset($group) && \Drupal\cust_group\Controller\CustNodeController::isGroupAdmin($group->id())
    || in_array('site_administrator', $current_user_roles)
  ) {
    $form['notification'] = array(
      '#type' => 'details',
      '#title' => t('Notifications settings'),
      '#open' => TRUE,
      // Controls the HTML5 'open' attribute. Defaults to FALSE.
      '#group' => 'advanced',
      '#weight' => 33
    );
    $form['notification']['node_notification_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not send notifications for this update.'),
    );
    $form['actions']['#weight'] = 34;
  }

}

function hzd_notifications_preprocess_form_element(&$variables) {
  $element = &$variables['element'];
  if (isset($element['#id']) && $element['#id'] == 'edit-path-0-pathauto') {
    $current_user = \Drupal::service('current_user');
    $current_user_roles = $current_user->getRoles();
    if (!in_array('site_administrator', $current_user_roles)) {
      $variables['description']['content'] = t('Uncheck this to create a custom alias below. Configure URL alias patterns.');
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hzd_notifications_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  //Validate content type.
  $type = $form_state->getFormObject()->getEntity()->getType();
  $form_id = $form_state->getBuildInfo()['form_id'];
  if (\Drupal::config('node.settings')->get('notification_checkbox_' . $type)) {
    $current_user = \Drupal::service('current_user');
    $current_user_roles = $current_user->getRoles();
    $group = \Drupal::routeMatch()->getParameter('group');
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!isset($group) && isset($node)) {
      if (is_object($node)) {
        $node_id = $node->id();
      }
      else {
        $node_id = $node;
      }
      $group_content = CustGroupHelper::getGroupNodeFromNodeId($node_id);
      if ($group_content) {
        $group = $group_content->getgroup();
        $group_id = $group->id();
        $group = \Drupal\group\Entity\Group::load($group_id);
      }
    }
    else {
      if (is_object($group)) {
        $group_id = $group->id();
      }
      else {
        $group_id = $group;
        $group = \Drupal\group\Entity\Group::load($group_id);
      }
    }

    /**
     * @todo Make it configrable to enable configration access
     */
    if (isset($group_id)) {
      $for_admin_formids = array(
        'node_page_form',
        'node_page_edit_form',
        'node_faqs_form',
        'node_faqs_edit_form',
        'node_faqs_gnode-form_form',
        'node_downtimes_form',
        'node_downtimes_edit_form',
        'node_deployed_releases_edit_form',
        'node_type_edit_form',
        'node_planning_files_edit_form',
        'node_planning_files_form',
        'node_forum_form',
        'node_forum_edit_form',
        'node_planning_files_form',
        'node_planning_files_edit_form',
        'node_early_warnings_form',
        'node_early_warnings_edit_form',
      );
      $for_groupadmin_formids = array(
        'node_page_form',
        'node_page_edit_form',
        'node_faqs_form',
        'node_faqs_edit_form',
        'node_faqs_gnode-form_form',
        'node_downtimes_edit_form',
        'node_deployed_releases_edit_form',
        'node_planning_files_edit_form',
        'node_planning_files_form',
        'node_forum_form',
        'node_forum_edit_form',
        'node_planning_files_form',
        'node_planning_files_edit_form',
        'node_early_warnings_form',
        'node_early_warnings_edit_form',
      );
      $for_groupmemeber_formids = array(
        'node_downtimes_edit_form',
      );

      if (in_array('site_administrator', $current_user_roles) && in_array($form_id, $for_admin_formids)) {
        $form['notification'] = array(
          '#type' => 'fieldset',
          '#weight' => 99,
          //'#title' => t('Notifications settings'),
          //'#open' => FALSE, // Controls the HTML5 'open' attribute. Defaults to FALSE.
          //'#group' => 'advanced',
        );
        $form['notification']['node_notification_checkbox'] = array(
          '#type' => 'checkbox',
          '#title' => t('Do not send notifications for this update.'),
        );
      }
      else {
        if ((CustNodeController::isGroupAdmin($group_id) == TRUE) && in_array($form_id, $for_groupadmin_formids)) {
          $form['notification'] = array(
            '#type' => 'fieldset',
            '#weight' => 99,
            //'#title' => t('Notifications settings'),
            //'#open' => FALSE, // Controls the HTML5 'open' attribute. Defaults to FALSE.
            //'#group' => 'advanced',
          );
          $form['notification']['node_notification_checkbox'] = array(
            '#type' => 'checkbox',
            '#title' => t('Do not send notifications for this update.'),
          );
        }
        else {
          if (($group->getMember($current_user) && $group->getMember($current_user)
                ->getGroupContent()
                ->get('request_status')->value == 1) && in_array($form_id, $for_groupmemeber_formids)
          ) {
            $form['notification'] = array(
              '#type' => 'fieldset',
              '#weight' => 99,
              //'#title' => t('Notifications settings'),
              //'#open' => FALSE, // Controls the HTML5 'open' attribute. Defaults to FALSE.
              //'#group' => 'advanced',
            );
            $form['notification']['node_notification_checkbox'] = array(
              '#type' => 'checkbox',
              '#title' => t('Do not send notifications for this update.'),
            );
          }
        }
      }
    }
  }
}

//function notifiction_field_render_in_node_form() {
//  $form = array();
//  $form['notification'] = array(
//    '#type' => 'details',
//    '#title' => t('Notifications settings'),
//    '#open' => FALSE, // Controls the HTML5 'open' attribute. Defaults to FALSE.
//    '#group' => 'advanced',
//  );
//  $form['notification']['node_notification_checkbox'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Do not send notifications for this update.'),
//  );
//  return $form;
////        if (isset($node) && $node->id()) {
////            $form['actions']['publish']['#submit'][]  = 'hzd_notifications_form_update_node_form_submit';
////        }
////        else {
////            $form['actions']['publish']['#submit'][]  = 'hzd_notifications_form_add_node_form_submit';
////        }
//}      
/**
 * implements custom form submit
 */
//function hzd_notifications_form_update_node_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
//    dpm('update');
//}
//
//function hzd_notifications_form_add_node_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
//    dpm('inset');
//}


function hzd_notifications_user_insert($entity) {

//  pr(\Drupal::request()->request->get('groups'));exit;
  $user = $entity->id();
  $data = \Drupal::state()->get('NotificationDefaults');
  $notificationController = new HzdNotifications(\Drupal::routeMatch(), \Drupal::database());
  $notificationController->isNewUser = TRUE;
  $notificationController->setDefaultForQuickInfoNotifications($user, $data['quickinfo']);
  $notificationController->setDefaultForGroupNotifications($user, $data['group']);
  foreach (['downtimes', 'problem', 'release', 'early_warnings'] as $type) {
    $notificationController->setDefaultForServiceTypeNotifications($type, $user, $data[$type]);
  }
//echo $entity->id();exit;
}

/**
 * Implements hook_token_info().
 */
function hzd_notifications_token_info() {
  $type = array(
    'name' => t('Node update status'),
    'description' => t('Tokens related to node updated status message.'),
    'needs-data' => 'node',
  );

  // Core tokens for nodes.
  $node['nodecreatedupdatedstatus'] = array(
    'name' => t("Node update status message"),
    'description' => t('Displays node updte message as created or updated'),
  );

  $node['group_raw'] = array(
    'name' => t("Group title"),
    'description' => t('path aliased group title'),
  );

  $node['downtime_states'] = array(
    'name' => t("Downtime States"),
    'description' => t('Downtime comma seperated states '),
  );

  $node['downtime_services'] = array(
    'name' => t("Downtime Services"),
    'description' => t('Downtime comma seperated services'),
  );
  $node['downtime_type'] = array(
    'name' => t("Downtime Type"),
    'description' => t('Downtime type (Incident or maintenance)'),
  );
  $node['downtime_status'] = array(
    'name' => t("Downtime Status"),
    'description' => t('Downtime Status'),
  );

  $node['content_group_title'] = array(
    'name' => t("Group content's Group title"),
    'description' => t('Title of group of the group_content node belongs to'),
  );

  $node['field_earlywarning_release_title'] = array(
    'name' => t("Release title"),
    'description' => t('Release title referenced from field_earlywarning_release'),
  );

  return array(
    'types' => array('node' => $type),
    'tokens' => array('node' => $node),
  );
}

/**
 * Implements hook_tokens().
 */
function hzd_notifications_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $token_service = \Drupal::token();

  $url_options = array('absolute' => TRUE);
  if (isset($options['langcode'])) {
    $url_options['language'] = \Drupal::languageManager()
      ->getLanguage($options['langcode']);
    $langcode = $options['langcode'];
  }
  else {
    $langcode = LanguageInterface::LANGCODE_DEFAULT;
  }
  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case 'nodecreatedupdatedstatus':
          $replacements[$original] = isset($node->original) ? 'updated' : 'created';
          break;
        case 'group_raw':
          $groupContent = CustGroupHelper::getGroupNodeFromNodeId($node->id());
          if ($groupContent) {
            $group = $groupContent->getGroup();
          }
          else {
            $group = \Drupal::routeMatch()->getParameter('group');
          }
          $label = NULL;
          if ($group instanceof \Drupal\group\Entity\Group) {
            $label = $group->label();
          }
          $replacements[$original] = \Drupal::service('pathauto.alias_cleaner')
            ->cleanString($label);;
          break;
        //title of group of the group_content node belongs to.
        case 'content_group_title':
          $groupContent = CustGroupHelper::getGroupNodeFromNodeId($node->id());
          if ($groupContent) {
            $group = $groupContent->getGroup();
          }
          else {
            $group = \Drupal::routeMatch()->getParameter('group');
          }
          $label = NULL;
          if ($group instanceof \Drupal\group\Entity\Group) {
            $label = $group->label();
          }
          $replacements[$original] = $label;
          break;
        case 'field_earlywarning_release_title':
          $nodeId = $node->get('field_earlywarning_release')->value;
          $release = \Drupal\node\Entity\Node::load($nodeId);
          $label = NULL;
          if ($release) {
            $label = $release->label();
          }
          $replacements[$original] = \Drupal::service('pathauto.alias_cleaner')
            ->cleanString($label);
          break;
        case 'downtime_states':
          $statesQuery = \Drupal::database()->select('downtimes', 'd');
          $statesQuery->fields('d', ['state_id']);
          $statesQuery->condition('downtime_id', $node->id());
          $states = $statesQuery->execute()->fetchField();
          $states = explode(',', $states);
          $stateAbbrsQuery = \Drupal::database()->select('states', 's');
          $stateAbbrsQuery->fields('s', ['abbr']);
          $stateAbbrsQuery->condition('id', $states, 'IN');
          $stateAbbrs = $stateAbbrsQuery->execute()->fetchCol();

          $replacements[$original] = implode(',', $stateAbbrs);
          break;
        case 'downtime_services':
          $servicesQuery = \Drupal::database()->select('downtimes', 'd');
          $servicesQuery->fields('d', ['service_id']);
          $servicesQuery->condition('downtime_id', $node->id());
          $services = $servicesQuery->execute()->fetchField();
          $services = explode(',', $services);
          $serviceEntities = Node::loadMultiple($services);
          $servicesLabels = array_map(function ($entity) {
            return $entity->label();
          }, $serviceEntities);
          $replacements[$original] = implode(',', $servicesLabels);
          break;
        case 'downtime_type':
          $downtimeQuery = \Drupal::database()->select('downtimes', 'd');
          $downtimeQuery->fields('d', ['scheduled_p']);
          $downtimeQuery->condition('downtime_id', $node->id());
          $type = $downtimeQuery->execute()->fetchField();
          $replacements[$original] = $type == 0 ? t('Incident') : t('Maintenance');
          break;
        case 'downtime_status':
          $downtimeQuery = \Drupal::database()->select('downtimes', 'd');
          $downtimeQuery->fields('d', ['resolved', 'cancelled']);
          $downtimeQuery->condition('downtime_id', $node->id());
          $status = $downtimeQuery->execute()->fetchObject();
          if ($status->cancelled == 1) {
            $res = t('Cancelled');
          }
          elseif ($status->resolved == 1) {
            $res = t('Resolved');
          }
          else {
            $res = t('Updated');
          }
          $replacements[$original] = $res;
          break;
      }
    }
  }
  if ($type == 'user' && !empty($data['user'])) {
    /** @var \Drupal\user\Entity\User $user */
    $user = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'user-notification-settings-url-absolute':
          $route = 'hzd_notifications.notifications';
          $route_params = [
            'user' => $user->id(),
          ];

          /**
           * The below approach is used instead of passing absolute true in options.
           * passing absolute doesn't provide path alias. This is due to
           * Drupal\subpathauto\PathProcessor in sub path auto module.
           */
          $url = \Drupal\Core\Url::fromRoute($route, $route_params)->toString();

          global $base_url;
          $notif_change_link = $base_url . $url;
          $replacements[$original] = $notif_change_link;
          break;
        case 'user-notification-settings-url-relative':
          $route = 'hzd_notifications.notifications';
          $route_params = [
            'user' => $user->id(),
          ];
          
          $url = \Drupal\Core\Url::fromRoute($route, $route_params)->toString();
          $replacements[$original] = $url;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_token_info_alter().
 */
function hzd_notifications_token_info_alter(&$data) {
  $data['tokens']['user']['user-notification-settings-url-absolute'] = [
    'name' => t("user notification settings - absolute link"),
    'description' => t("The absolute link to change user notification settings."),
  ];

  $data['tokens']['user']['user-notification-settings-url-relative'] = [
    'name' => t("user notification settings - relative link"),
    'description' => t("The relative link to change user notification settings."),
  ];
}

function _notify_users($entity, $action, $user_data){
  $notification_scheduler = \Drupal::service('hzd_notifications.scheduler');

  $dont_send_notification = \Drupal::request()->request->get('node_notification_checkbox'); // form param
  if (!isset($dont_send_notification) || $dont_send_notification != 1) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId());
    $enView = $view_builder->view($entity, 'mail', 'de');
    $body = \Drupal::service('renderer')->render($enView);

    if ($entity->getEntityTypeId() == 'group') {
      $type = 'group';
    }
    elseif (in_array($entity->bundle(), [
      'event',
      'forum',
      'page',
      'faqs'
    ])) {
      $type = 'group_content';
    }
    else {
      $type = $entity->bundle();
    }
    $config = \Drupal::config('hzd_customizations.mailtemplates')
      ->get($type);
    $token_service = \Drupal::token();
    // Replace the token for subject.
    $token_sub = $config['subject_' . $action];
    $subject = $token_service->replace($token_sub, array($entity->getEntityTypeId() => $entity));
    // These bundles have condition for notifications.
    $notification_scheduler->schedule($entity, $action, (array)$user_data, $body, $subject);
  }
  
}

function _get_subscribed_users($entity){
  /* @var \Drupal\hzd_notifications\NotificationManagerInterface $notification_manager */
  $notification_manager = \Drupal::service('hzd_notifications.manager');
  return $notification_manager->getSubscribedUsers($entity);
}


function hzd_notifications_node_update($node){
  if($node->isPublished()){
    $users = [];
    if(in_array($node->bundle(), NotificationManager::$groupBundles)){
      $groupContent = \Drupal\cust_group\CustGroupHelper::getGroupNodeFromNodeId($node->id());
      // pr($groupContent);exit;
      if($groupContent instanceof GroupContent){
        $users = _get_subscribed_users($groupContent);
      }else{
        return;
      }
    }else{
      $users = _get_subscribed_users($node);
    }
    //Notify only if release is released
    if($node->bundle() == 'release' && $node->get('field_release_type')->value != 1){
      return;
    }
    
    _notify_users($node, ENTITY_OP_UPDATE, $users);
  }
  
  // Services bundle is not altered for now. 
  if($node->getType() == 'services'){
    update_service_notifications($node);
  }
}


function hzd_notifications_node_insert($entity){
  if($entity->isPublished() && in_array($entity->bundle(), array_merge(NotificationManager::$service_bundles, NotificationManager::$special_bundles))){
    $users = _get_subscribed_users($entity);
    //Notify only if release is released
    if($entity->bundle() == 'release' && $entity->get('field_release_type')->value != 1){
      return;
    }
    _notify_users($entity, ENTITY_OP_INSERT, $users);
  }

  if ($entity->getType() == 'services') {
    $nid = $entity->id();
    $rel_type = $entity->get('release_type')->getValue()[0]['target_id'];
    $downtime = $entity->get('field_enable_downtime')->value;
    $problem = $entity->get('field_problem_name')->value;
    $release = $entity->get('field_release_name')->value;

    if ($downtime && $rel_type == KONSONS) {
      insert_new_service_notifications('downtimes', $nid);
    }
    if ($problem != '' && $rel_type == KONSONS) {
      insert_new_service_notifications('problem', $nid);
    }
    if ($release != '') {
      insert_new_service_notifications('release', $nid);
    }
    insert_new_service_notifications('early_warnings', $nid);
  }
}


function hzd_notifications_group_content_insert($groupContent){
  if(in_array($groupContent->getEntity()->bundle(), NotificationManager::$groupBundles)){
    $users = _get_subscribed_users($groupContent);
    _notify_users($groupContent->getEntity(), ENTITY_OP_INSERT, $users);
  }
}


function hzd_notifications_group_update($group){
  $users = _get_subscribed_users($group);
  _notify_users($group, ENTITY_OP_UPDATE, $users);
}


function hzd_notifications_comment_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->hasField('field_do_not_send_notifications')) {
    $do_not_send_notifications = $entity->get('field_do_not_send_notifications')->value;
    if (!$do_not_send_notifications) {
      send_earlywarning_comment_notifications($entity, 'update');
    }
  }
  // Update the entity's entry in a fictional table of this type of entity.
}

function hzd_notifications_comment_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->hasField('field_do_not_send_notifications')) {
    $do_not_send_notifications = $entity->get('field_do_not_send_notifications')->value;
    if (!$do_not_send_notifications) {
      send_earlywarning_comment_notifications($entity, 'insert');
    }
  }
  // Insert the new entity into a fictional table of all entities.
}

function send_earlywarning_comment_notifications($entity, $action) {
  $nodeentity = $entity->getCommentedEntity();
  $entity_bundle = $nodeentity->bundle();
  if($entity_bundle == 'early_warnings') {
    $users = _get_subscribed_users($nodeentity);
    $notification_scheduler = \Drupal::service('hzd_notifications.scheduler');
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId());
    $enView = $view_builder->view($entity, 'mail', 'de');
    $body = \Drupal::service('renderer')->render($enView);
    if($action == 'insert') {
      $subject = t('New Comment on Early Warning');
    } else {
      $subject = t('Updated Comment on Early Warning');
    }
    $notification_scheduler->schedule($entity, $action, (array)$users, $body, $subject);
  } else if($entity_bundle == 'forum') {
    $groupContent = \Drupal\cust_group\Controller\CustNodeController::getNodeGroupId($nodeentity);
    $users = _get_subscribed_users($groupContent);
    $notification_scheduler = \Drupal::service('hzd_notifications.scheduler');
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId());
    $enView = $view_builder->view($entity, 'mail', 'de');
    $body = \Drupal::service('renderer')->render($enView);
    if($action == 'insert') {
      $subject = t('New Comment on Forum');
    } else {
      $subject = t('Updated Comment on Forum');
    }
    $notification_scheduler->schedule($entity, $action, (array)$users, $body, $subject);
  }
}


/**
 * Implements hook_cron().
 */
function hzd_notifications_cron() {
  /* @var \Drupal\hzd_notifications\MailNotificationDispatcher $notification_dispatcher */
  $notification_dispatcher = \Drupal::service('hzd_notifications.mail_dispatcher');
  $notification_dispatcher->getNotificationsAndDispatch();
}


/**
 * Implements hook_mail.
 */
function hzd_notifications_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'immediate_notifications':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];

      //@todo for now sending all html mails only
//      $message['headers']['Content-Type'] = ($params['preference'] == 'html') ? 'text/html; charset=UTF-8; format=flowed; delsp=yes' : 'text/plain; charset=UTF-8; format=flowed; delsp=yes';
//      $message['body'][] = $params['preference'] == 'html'?$params['message']:\Drupal\Core\Mail\MailFormatHelper::htmlToText($params['message']);


//      $message['headers']['Content-Type'] =  'text/html; charset=UTF-8; format=flowed; delsp=yes';
      $message['body'][] = $params['message'];

      break;
  }
}

use Drupal\field\Entity\FieldStorageConfig;
/**
 *
 */
function hzd_get_immediate_qi_notification_user_mails($services) {

  $options = FieldStorageConfig::loadByName('node', 'field_other_services')
    ->getSetting('allowed_values');
  $affetced_services = array();
  foreach ($services as $val) {
    $affetced_services[] = $options[$val['value']];
  }

  $query = db_select('quickinfo_notifications', 'q')
    ->fields('q', array('uids'))
    ->condition('q.cck', $affetced_services, 'IN')
    ->condition('q.send_interval', 0, '=');

  $results = $query->execute()->fetchCol();

  $uids_list = array();
  foreach ($results as $serialized_uids) {
    $uids = unserialize($serialized_uids);
    $uids_list = array_unique(array_merge($uids_list, $uids));
  }
  return $uids_list;
}