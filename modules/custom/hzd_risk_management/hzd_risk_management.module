<?php

/**
 * @file
 * Contains hzd_risk_management.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\NodeType;


define('RISK_MANAGEMENT',73);

/**
 * Implements hook_help().
 */
function hzd_risk_management_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the hzd_risk_management module.
    case 'help.page.hzd_risk_management':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Managing group Risk Management') . '</p>';
      return $output;

    default:
  }
}


function computed_field_field_risk_category_compute($entity_type_manager, $entity, $fields, $delta) {
  $value = 'Invalid';
  $riskValue = $entity->get('field_probability_of_occurrence')->value * $entity->get('field_risk_impact')->value;
  // pr($entity->toArray());exit;
  return calculateRiskCategory($riskValue);
}

function calculateRiskCategory($riskValue) {
  if ($riskValue >= 7.5) {
    return 'A';
  }
  elseif ($riskValue >= 2.5 && $riskValue < 7.5) {
    return 'B';
  }
  elseif ($riskValue < 2.5) {
    return 'C';
  }
  else {
    return "Invalid Value";
  }
/*  switch($riskValue){
    case 9:
      $value = 'A';
      break;
    case 6:
    case 4:
    case 3:
      $value = 'B';
      break;
    case 2:
    case 1:
      $value = 'C';
      break;
    default:
      $value = "Invalid Value";
      break;
  }
  return $value;*/
}

function calculateRisk($value) {
  $value = round($value);
  switch ($value) {
    case 3:
      $value = 'Hoch';
      break;
    case 2:
      break;
      $value = 'Mittel';
    case 1:
      $value = 'Niedrig';
      break;
    default:
      $value = 'Invalid Value';
  }
  pr($value);
  return $value;
}

function hzd_risk_management_form_alter(array &$form, $formState, $formId){
//echo $formId;exit;
  $current_path = \Drupal::service('path.current')->getPath();
  if ($formId == 'views_exposed_form' && ($current_path == '/group/73/massnahme'
      || $current_path == '/group/73/massnahme/archive')) {
    $form['order_date']['#type'] = 'textfield';
    $form['order_date']['#attributes']['class'][] = 'datepicker-text';
    $form['order_date']['#attributes']['placeholder'] = 'dd.mm.yyyy';

    $form['target_date']['#type'] = 'textfield';
    $form['target_date']['#attributes']['class'][] = 'datepicker-text';
    $form['target_date']['#attributes']['placeholder'] = 'dd.mm.yyyy';
    $form['#attached']['library'][] = 'hzd_risk_management/hzd_risk_management_date';
    $form['#validate'][] = 'reset_date_format';
  }

  if($formId == 'views_exposed_form' && isset($form['combine'])){
    $form['combine']['#attributes']['data-bef-auto-submit-exclude'] = '';
  }
  if($formId == 'views_exposed_form' && isset($form['measure'])){
    $form['measure']['#type'] = 'hidden';
  }
  if($formId == 'views_exposed_form' && isset($form['risk'])){
    $form['risk']['#type'] = 'hidden';
  }
  if(in_array($formId,['node_risk_form','node_risk_edit_form'])){
    $form['#validate'][] = 'risk_management_form_validate';
  }
  if(in_array($formId,['node_measure_form','node_measure_edit_form'])){
    $form['#validate'][] = 'risk_management_measure_form_validate';
  }
}

function reset_date_format(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if(!empty($form['order_date']['#value'])) {
    $dt = date_create_from_format('d.m.Y', $form['order_date']['#value']);
    if($dt!==FALSE) {
      $value = $dt->format("Y-m-d");
      $form_state->setValue('order_date', $value);
    }
  }

  if(!empty($form['target_date']['#value'])) {
    $dt = date_create_from_format('d.m.Y', $form['target_date']['#value']);
    if($dt!==FALSE) {
      $value = $dt->format("Y-m-d");
      $form_state->setValue('target_date', $value);
    }
  }
}

function risk_management_measure_form_validate(array $form, $formState){
  if($formState->getValue('field_measure_status')[0]['value'] != 'created'){
$status = $formState->getValue('field_measure_status')[0]['value'];
   if(!$formState->getValue('field_order_date')[0]['value']){
      $formState->setErrorByName('field_order_date',t('field_order_date field is required when Status is @status',['@status'=>$status]));
    }
    if(!$formState->getValue('field_target_date')[0]['value']){
      $formState->setErrorByName('field_target_date',t('field_target_date field is required when Status is @status',['@status'=>$status]));
    }
   if(!$formState->getValue('field_sponsor')[0]['value']){
      $formState->setErrorByName('field_sponsor',t('field_sponsor field is required when Status is @status',['@status'=>$status]));
    }
  }
}

function risk_management_form_validate(array $form, $formState){
//pr($formState->getValue('field_scope'));exit;
  if($formState->getValue('field_scope')[0]['value'] == 'local' && !$formState->getValue('field_affected_oes')[0]['value']){
    $formState->setErrorByName('field_affected_oes',t('This field is required when Scope is local'));
  }
}


function hzd_risk_management_node_presave($node){
  if($node->bundle() == 'risk'){
    $cluster = $node->get('field_risk_clusters')
      ->first()
      ->get('entity')
      ->getTarget()
      ->getValue();
    $tags[] = 'node:'.$cluster->id();
    \Drupal::service('cache_tags.invalidator')
      ->invalidateTags($tags);
  }
  if($node->bundle() == 'measure'){
    $risks = $node->get('field_risks')
    ->referencedEntities();
    $tags = array_map(function($risk){
      return 'node:'.$risk->id();
    },$risks);
    \Drupal::service('cache_tags.invalidator')
      ->invalidateTags($tags);
  }
}

function hzd_risk_management_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode){
  // kint($build);
  if($display->getComponent('field_risk_category_value')){
    $riskCategory = $entity->get('field_risk_category')->value;
    $riskValue = $entity->get('field_risk_value')->value;
    $build['field_risk_category_value'] = [
      '#theme' => 'field',
        '#title' => t('Risk Value and Category'),
        '#label_display' => 'inline',
        '#view_mode' => $view_mode,
        '#language' => 'de',
        '#field_name' => 'field_risk_category',
        '#field_type' => 'textfield',
        '#entity_type' => 'node',
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#is_multiple' => false,
        '0'=>['#markup'=>$riskValue . ' - ' . $riskCategory],
    ];
  }
  if($display->getComponent('field_risks_data')){
    $risks = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['field_risk_clusters' => $entity->id()]);
    $items = [];
    foreach ($risks as $risk){
      $text = $risk->get('field_id')->value . " - " . $risk->label() . " (" . $risk->get('field_risk_value')->value . " - " . $risk->get('field_risk_category')->value . ")";
      $items[$risk->id()] = $risk->toLink($text);
    }
    $build['field_risks_data'] = [
      '#theme' => 'field',
        '#title' => t('Risks'),
        '#label_display' => 'inline',
        '#view_mode' => $view_mode,
        '#language' => 'de',
        '#field_name' => 'field_id',
        '#field_type' => 'textfield',
        '#entity_type' => 'node',
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#is_multiple' => false,
        '0'=>['#theme'=>'item_list', '#items'=>$items, '#empty'=>t('No Risks')],
    ];
  }
  if($display->getComponent('field_risks_cluster_propability')){
    $risks = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['field_risk_clusters' => $entity->id()]);
    $items = array_map(function($risk){
      return $risk->get('field_probability_of_occurrence')->value;
    },$risks);
    if(count($items)){
      $value = array_sum($items)/count($items);
    }else{
      $value = 0;
    }
    $build['field_risks_cluster_propability'] = [
      '#theme' => 'field',
        '#title' => t('Propability of Occurence'),
        '#label_display' => 'inline',
        '#view_mode' => $view_mode,
        '#language' => 'de',
        '#field_name' => 'field_id',
        '#field_type' => 'textfield',
        '#entity_type' => 'node',
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#is_multiple' => false,
        '0'=>['#markup'=>round($value) . " - " . calculateRisk($value)],
    ];
  }
  if($display->getComponent('field_risks_cluster_impact')){
    $risks = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['field_risk_clusters' => $entity->id()]);
    $items = array_map(function($risk){
      return $risk->get('field_risk_impact')->value;
    },$risks);
    if(count($items)){
      $value = array_sum($items)/count($items);
    }else{
      $value = 0;
    }
    $build['field_risks_cluster_impact'] = [
      '#theme' => 'field',
        '#title' => t('Impact'),
        '#label_display' => 'inline',
        '#view_mode' => $view_mode,
        '#language' => 'de',
        '#field_name' => 'field_id',
        '#field_type' => 'textfield',
        '#entity_type' => 'node',
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#is_multiple' => false,
        '0'=>['#markup'=>round($value) . " - " . calculateRisk($value)],
    ];
  }
  if($display->getComponent('field_risks_cluster_class')){
    $risks = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['field_risk_clusters' => $entity->id()]);
    $items = array_map(function($risk){
      return $risk->get('field_risk_value')->value;
    },$risks);
    if(count($items)){
      $value = array_sum($items)/count($items);
    }else{
      $value = 0;
    }
    $build['field_risks_cluster_class'] = [
      '#theme' => 'field',
        '#title' => t('Risk Value and Category'),
        '#label_display' => 'inline',
        '#view_mode' => $view_mode,
        '#language' => 'de',
        '#field_name' => 'field_id',
        '#field_type' => 'textfield',
        '#entity_type' => 'node',
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#is_multiple' => false,
        '0'=>['#markup'=>round($value) . " - " . calculateRiskCategory($value)],
    ];
  }
  if($display->getComponent('last_updated')){
    $build['last_updated'] = [
      '#theme' => 'field',
        '#title' => t('Last Updated'),
        '#label_display' => 'inline',
        '#view_mode' => $view_mode,
        '#language' => 'de',
        '#field_name' => 'field_id',
        '#field_type' => 'textfield',
        '#entity_type' => 'node',
        '#bundle' => $entity->bundle(),
        '#object' => $entity,
        '#is_multiple' => false,
        '0'=>['#markup'=>\Drupal::service('date.formatter')->format($entity->getChangedTime(), 'medium')],
    ];
  }
  if($display->getComponent('field_measures')) {
    $measures = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties(
        [
          'field_risks' => $entity->id(),
          'type' => 'measure',
        ]);
    $items = array_map(function($measure){
      $measureLink = $measure->toLink($measure->get('field_id')->value." - ".$measure->label());
      $measureOwner = $measure->get('field_owner')->value;
      $fieldMeasureStatus = $measure->get('field_measure_status');
      $measureStatus = $fieldMeasureStatus->getSetting('allowed_values')[$fieldMeasureStatus->value];

      $row = [
        'Titel' => $measureLink,
        'Eigentümer' => $measureOwner,
        'Status' => $measureStatus
      ];
      return $row;
    },$measures);

    $status = array_map(function($measure){
      return $measure->get('field_measure_status')->getSetting('allowed_values')[$measure->get('field_measure_status')->value];
    },$measures); 

    $statusCounts = [];
    foreach(reset($measures)->get('field_measure_status')->getSetting('allowed_values') as $key => $value) {
      $statusCounts[$value] = 0;
    }
    $statusCounts = array_merge($statusCounts, array_count_values($status));
    $header = [t('Title'),t('Owner'),t('Status'),];
    $build['field_measures'] = [
      '#theme' => 'field',
      '#title' => t('Measures'),
      '#label_display' => 'inline',
      '#view_mode' => $view_mode,
      '#language' => 'de',
      '#field_name' => 'field_id',
      '#field_type' => 'textfield',
      '#entity_type' => 'node',
      '#bundle' => $entity->bundle(),
      '#object' => $entity,
      '#is_multiple' => false,
      '0'=>[
        '#theme'=>'table',
        '#header' => $header,
        '#rows'=>$items,
        '#attributes' => [
          'class' => [
            0 => 'risk-measure-table'
          ]
        ]
      ],
    ];
    $build['#attached']['drupalSettings']['hzd_risk_management']['statusCounts'] = $statusCounts;
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function hzd_risk_management_entity_extra_field_info() {
  $extra['node']['risk']['display']['field_risk_category_value'] = array(
    'label' => t('Risk Value and Category'),
    'description' => t('This is pseudo-field'),
    'weight' => 100,
    'visible' => TRUE,
  );
  $extra['node']['risk_cluster']['display']['field_risks_data'] = array(
    'label' => t('Risks'),
    'description' => t('This is pseudo-field'),
    'visible' => TRUE,
    'weight' => 100,
  ); 
  $extra['node']['risk_cluster']['display']['field_risks_cluster_propability'] = array(
    'label' => t('Propability of Occurence'),
    'description' => t('This is pseudo-field'),
    'visible' => TRUE,
    'weight' => 100,
  );
  $extra['node']['risk_cluster']['display']['field_risks_cluster_impact'] = array(
    'label' => t('Impact'),
    'description' => t('This is pseudo-field'),
    'visible' => TRUE,
    'weight' => 100,
  );
  $extra['node']['risk_cluster']['display']['field_risks_cluster_class'] = array(
    'label' => t('Risk Value and Category'),
    'description' => t('This is pseudo-field'),
    'visible' => TRUE,
    'weight' => 100,
  );
$extra['node']['risk_cluster']['display']['last_updated'] =
$extra['node']['risk']['display']['last_updated'] =
$extra['node']['measure']['display']['last_updated'] =
    array(
      'label' => t('Last Updated'),
      'description' => t('This is pseudo-field'),
      'visible' => TRUE,
      'weight' => 100,
  );
$extra['node']['risk']['display']['field_measures'] =
    array(
      'label' => t('Measures'),
      'description' => t('This is pseudo-field'),
      'visible' => TRUE,
      'weight' => 100,
  );

  return $extra;
}
