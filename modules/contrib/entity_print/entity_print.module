<?php

/**
 * @file
 * Print any entity.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Masterminds\HTML5;

/**
 * Implements hook_theme().
 */
function entity_print_theme($existing, $type, $theme, $path) {
  return array(
    'entity_print' => array(
      'path' => $path . '/templates',
      'template' => 'entity-print',
      'variables' => array(
        'entity_array' => NULL,
        'entity' => NULL,
        'entity_print_css' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_entity_extra_field_info_alter().
 */
function entity_print_entity_extra_field_info_alter(&$info) {
  foreach ($info as $entity_type => &$entity_info) {
    foreach ($entity_info as $bundle => &$bundle_info) {
      $bundle_info['display']['entity_print_view'] = [
        'label' => t('Entity Print'),
        'description' => t('Provides a link to view the PDF version of the entity'),
        'weight' => 0,
        'visible' => FALSE,
      ];
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function entity_print_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getComponent('entity_print_view')) {
    $route_params = [
      'entity_type' => $entity->getEntityTypeId(),
      'entity_id' => $entity->id(),
    ];
    $build['entity_print_view'] = Link::createFromRoute($display->getThirdPartySetting('entity_print', 'label', t('View PDF')), 'entity_print.view', $route_params)
      ->toRenderable();

    // Add the access control.
    $build['entity_print_view']['#access'] = \Drupal::accessManager()
      ->checkNamedRoute('entity_print.view', $route_params);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function entity_print_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $display */
  $display = $form_state->getFormObject()->getEntity();

  $form['fields']['entity_print_view']['empty_cell'] = [
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => $display->getThirdPartySetting('entity_print', 'label', t('View PDF')),
  ];

  $form['actions']['submit']['#submit'][] = 'entity_print_form_entity_view_display_edit_form_submit';
}

/**
 * Entity display form submit handler.
 */
function entity_print_form_entity_view_display_edit_form_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $display */
  $display = $form_state->getFormObject()->getEntity();

  // If we've enabled the entity_print_view field then save the label for
  // rendering later.
  if ($display->getComponent('entity_print_view')) {
    $value = $form_state->getValue(['fields', 'entity_print_view'])['empty_cell'];
    $display->setThirdPartySetting('entity_print', 'label', $value);
    $display->save();
  }
}

/**
 * Implements hook_entity_print_generate_html_alter().
 *
 * This is a temporary workaround for a core issue.
 * @see https://drupal.org/node/1494670
 */
function entity_print_entity_print_generate_html_alter(&$html_string) {

  // We only apply the fix to PHP Wkhtmltopdf because the other implementations
  // allow us to specify a base url.
  if (\Drupal::config('entity_print.settings')->get('pdf_engine') !== 'phpwkhtmltopdf') {
    return;
  }

  $html5 = new HTML5();
  $document = $html5->loadHTML($html_string);

  // Define a function that will convert root relative uris into absolute urls.
  $transform = function($tag, $attribute) use ($document) {
    $base_url = \Drupal::request()->getSchemeAndHttpHost();
    foreach ($document->getElementsByTagName($tag) as $node) {
      $attribute_value = $node->getAttribute($attribute);

      // Handle protocol agnostic URLs as well.
      if (Unicode::substr($attribute_value, 0, 2) === '//') {
        $node->setAttribute($attribute, $base_url . Unicode::substr($attribute_value, 1));
      }
      elseif (Unicode::substr($attribute_value, 0, 1) === '/') {
        $node->setAttribute($attribute, $base_url . $attribute_value);
      }
    }
  };

  // Transform stylesheets, links and images.
  $transform('link', 'href');
  $transform('a', 'href');
  $transform('img', 'src');

  // Overwrite the HTML.
  $html_string = $html5->saveHTML($document);
}
