diff --git a/modules/contrib/group/group.routing.yml b/modules/contrib/group/group.routing.yml
index e6aeaf9db..8e53361a1 100644
--- a/modules/contrib/group/group.routing.yml
+++ b/modules/contrib/group/group.routing.yml
@@ -30,7 +30,7 @@ entity.group.request:
     _controller: '\Drupal\group\Controller\GroupMembershipController::requestMembership'
     _title_callback: '\Drupal\group\Controller\GroupMembershipController::requestMembershipTitle'
   requirements:
-    _group_permission: 'request group membership'
+    _custom_access: '\Drupal\group\Controller\GroupMembershipController::access'
 
 # Group type entity routes.
 # Common entity routes are generated by \Drupal\group\Entity\Routing\GroupTypeRouteProvider.
diff --git a/modules/contrib/group/src/Controller/GroupMembershipController.php b/modules/contrib/group/src/Controller/GroupMembershipController.php
index c350f1b41..4fbf26dca 100644
--- a/modules/contrib/group/src/Controller/GroupMembershipController.php
+++ b/modules/contrib/group/src/Controller/GroupMembershipController.php
@@ -8,6 +8,7 @@
 use Drupal\group\Entity\GroupContent;
 use Drupal\group\Entity\GroupInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Access\AccessResult;
 
 /**
  * Provides group membership route controllers.
@@ -79,6 +80,28 @@ public function join(GroupInterface $group) {
   }
 
   /**
+   * Provides the Request membership form for joining a group access check.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return array
+   *   A group join form access.
+   */
+  public function access(GroupInterface $group) {
+    $currentUser = \Drupal::currentUser();
+    $groupMember = $group->getMember($currentUser);
+    if (($groupMember && $groupMember->getGroupContent()
+            ->get('request_status')->value == 1)
+    ) {
+      return AccessResult::forbidden();
+    }
+    else {
+      return AccessResult::allowed();
+    }
+  }
+
+  /**
    * Provides the Request membership form for joining a group.
    *
    * @param \Drupal\group\Entity\GroupInterface $group
@@ -88,16 +111,25 @@ public function join(GroupInterface $group) {
    *   A group join form.
    */
   public function requestMembership(GroupInterface $group) {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
-    $plugin = $group->getGroupType()->getContentPlugin('group_membership');
-    // Pre-populate a group membership with the current user.
-    $group_content = GroupContent::create([
-      'type' => $plugin->getContentTypeConfigId(),
-      'gid' => $group->id(),
-      'entity_id' => $this->currentUser->id(),
-      'request_status' => 0,
-    ]);
-    return $this->entityFormBuilder()->getForm($group_content, 'group-request');
+    $currentUser = \Drupal::currentUser();
+    $groupMember = $group->getMember($currentUser);
+    if (($groupMember && $groupMember->getGroupContent()
+            ->get('request_status')->value == 0)
+    ) {
+      return ['#markup' => $this->t('Your request for membership group of %label is in queue, Please wait for approval.', ['%label' => $group->label()])];
+    }
+    else {
+      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
+      $plugin = $group->getGroupType()->getContentPlugin('group_membership');
+      // Pre-populate a group membership with the current user.
+      $group_content = GroupContent::create([
+            'type' => $plugin->getContentTypeConfigId(),
+            'gid' => $group->id(),
+            'entity_id' => $this->currentUser->id(),
+            'request_status' => 0,
+      ]);
+      return $this->entityFormBuilder()->getForm($group_content, 'group-request');
+    }
   }
 
   /**
