diff --git a/serial.module b/serial.module
index 3d670b2..d5011ad 100644
--- a/serial.module
+++ b/serial.module
@@ -29,7 +29,7 @@ function serial_help($route_name, RouteMatchInterface $route_match) {
  * @inheritdoc
  */
 function serial_field_config_create(FieldConfig $field) {
-  if ($field->getType() == 'serial' && !$field->isSyncing() && !$field->isDeleted()) {
+  if ($field->getType() == 'serial' && !$field->isDeleted()) {
     // Create the assistant storage.
     /** @var SerialStorageInterface $serialStorage */
     $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
diff --git a/src/SerialSQLStorage.php b/src/SerialSQLStorage.php
index 1f7e12f..68ba4a8 100644
--- a/src/SerialSQLStorage.php
+++ b/src/SerialSQLStorage.php
@@ -67,7 +67,8 @@ class SerialSQLStorage implements ContainerInjectionInterface, SerialStorageInte
    * {@inheritdoc}
    */
   public function createStorageName($entityTypeId, $entityBundle, $fieldName) {
-    // Remember about max length of MySQL tables - 64 symbols.
+    // To make sure we don't end up with table names longer than 64 characters,
+    // which is a MySQL limit we hash a combination of fields.
     // @todo Think about improvement for this.
     $tableName = 'serial_' . md5("{$entityTypeId}_{$entityBundle}_{$fieldName}");
     return Database::getConnection()->escapeTable($tableName);
@@ -201,6 +202,7 @@ class SerialSQLStorage implements ContainerInjectionInterface, SerialStorageInte
     // @todo shall we assign serial id to unpublished as well?
     // $query->condition('status', 1);
     $query->condition('type', $entityBundle);
+    $query->accessCheck(FALSE);
     $entityIds = $query->execute();
 
     $updated = 0;
