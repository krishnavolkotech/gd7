diff --git a/modules/contrib/group/group.install b/modules/contrib/group/group.install
index 49d1dd4..e749ad7 100644
--- a/modules/contrib/group/group.install
+++ b/modules/contrib/group/group.install
@@ -11,6 +11,60 @@
 use Drupal\Core\Entity\EntityTypeListenerInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 
+/*
+ * Added for a new field in group content entity
+ *
+ */
+function group_update_8103() {
+  $database = \Drupal::database();
+  $schema = $database->schema();
+  $spec = array(
+    'description' => 'Request status code.',
+    'type' => 'int',
+    'size' => 'small',
+    'unsigned' => TRUE,
+    'not null' => TRUE,
+    'default' => 1,
+  );
+  $schema->addField('group_content_field_data', 'request_status', $spec);
+}
+
+/*
+ * Added for a new field in group content entity
+ *
+ */
+function group_update_8103() {
+    $database = \Drupal::database();
+    $schema = $database->schema();
+    $spec = array(
+        'description' => 'Request status code.',
+        'type' => 'int',
+        'size' => 'small',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 1,
+      );
+    $schema->addField('group_content_field_data', 'request_status', $spec);
+  }
+
+/*
+ * Added for a new field in group content entity
+ *
+ */
+function group_update_8103() {
+    $database = \Drupal::database();
+    $schema = $database->schema();
+    $spec = array(
+        'description' => 'Request status code.',
+        'type' => 'int',
+        'size' => 'small',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 1,
+      );
+    $schema->addField('group_content_field_data', 'request_status', $spec);
+  }
+
 /**
  * Resave all GroupContent labels and remove orphaned entities.
  */
@@ -20,15 +74,15 @@ function group_update_8001(&$sandbox) {
     /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
     $entity_type_manager = \Drupal::service('entity_type.manager');
     $storage_handler = $entity_type_manager->getStorage('group_content');
-
+    
     $sandbox['ids'] = $storage_handler->getQuery()->execute();
     $sandbox['max'] = count($sandbox['ids']);
     $sandbox['progress'] = 0;
   }
-
+  
   // Try to update 25 GroupContent entities at a time.
   $ids = array_slice($sandbox['ids'], $sandbox['progress'], 25);
-
+  
   /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
   foreach (GroupContent::loadMultiple($ids) as $group_content) {
     // Re-saving the GroupContent entities will properly set their label.
@@ -41,15 +95,18 @@ function group_update_8001(&$sandbox) {
     else {
       $group_content->delete();
     }
-
+    
     $sandbox['progress']++;
   }
-
+  
   // Try to update the percentage but avoid division by zero.
   $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
-
+  
   // Show a status update for the current progress.
-  return t("Updated the label for @progress out of @max group content entities.", ['@progress' => $sandbox['progress'], '@max' => $sandbox['max']]);
+  return t("Updated the label for @progress out of @max group content entities.", [
+    '@progress' => $sandbox['progress'],
+    '@max' => $sandbox['max']
+  ]);
 }
 
 /**
@@ -57,50 +114,50 @@ function group_update_8001(&$sandbox) {
  */
 function group_update_8002() {
   $container = \Drupal::getContainer();
-
+  
   /** @var \Drupal\Core\Database\Connection $database */
   $database = $container->get('database');
-
+  
   /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
   $entity_manager = $container->get('entity_type.manager');
-
+  
   /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
   $field_manager = $container->get('entity_field.manager');
-
+  
   /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
   $schema_repository = $container->get('entity.last_installed_schema.repository');
-
+  
   // Before we start, we need to rebuild the entity type caches so we have the
   // latest definitions in code available to us.
   $entity_manager->clearCachedDefinitions();
-
+  
   foreach (['group', 'group_content'] as $entity_type_id) {
     // Retrieve the storage handler class name for this entity type.
     $storage_handler = $entity_manager->getHandler($entity_type_id, 'storage');
-
+    
     // Get the old entity type's field definitions from the key/value storage.
     $old_field_def = $schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
-
+    
     // Get the old entity type definition from the key/value storage.
     $old_entity_type = $schema_repository->getLastInstalledDefinition($entity_type_id);
-
+    
     // Get the new entity type definition from code.
     $new_entity_type = $entity_manager->getDefinition($entity_type_id);
-
+    
     // Instantiate a storage handler for both entity type definitions. Please
     // note we're cloning the old entity type definition because we are altering
     // it further down this update function and don't want those changes to be
     // reflected in the storage handler.
     $old_storage = $entity_manager->createHandlerInstance($storage_handler, clone $old_entity_type);
     $new_storage = $entity_manager->createHandlerInstance($storage_handler, $new_entity_type);
-
+    
     // We can't update the definition if the storage handler doesn't have the
     // onEntityTypeCreate() method available to it.
     if (!($new_storage instanceof EntityTypeListenerInterface)) {
       // This should probably throw an exception, but we're in alpha.
       return;
     }
-
+    
     // We check for the SqlContentEntityStorage interface to make sure we do
     // not run queries against a non-SQL backend. Seeing as our content entity
     // types did not specify a storage backend, Drupal defaulted to SQL so all
@@ -109,20 +166,20 @@ function group_update_8002() {
       // This should probably throw an exception, but we're in alpha.
       return;
     }
-
+    
     // Get the table names for our data migration.
     $base_table = $new_entity_type->getBaseTable();
     $data_table = $base_table . '_field_data';
     $temp_table = $base_table . '_data_to_migrate';
-
+    
     // First rename the base table to a temporary table.
     $database->schema()->renameTable($base_table, $temp_table);
-
+    
     // Then recreate the base table and data table. This will also add the
     // 'default_langcode' base field because we flagged our content entity types
     // as translatable.
     $new_storage->onEntityTypeCreate($new_entity_type);
-
+    
     // At this point the database structure should match what is defined in
     // code. However, Drupal still thinks we are running the old definitions
     // because it cached them in the key/value storage.
@@ -135,40 +192,43 @@ function group_update_8002() {
     // and have a data table.
     $old_entity_type->set('translatable', TRUE);
     $old_entity_type->set('data_table', $base_table . '_field_data');
-
+    
     // We had an additional property 'fieldable' which is now gone.
     $additional = $old_entity_type->get('additional');
     unset($additional['fieldable']);
     $old_entity_type->set('additional', $additional);
-
+    
     // Now that we have added only our changes, we write the adjusted old entity
     // type to the key/value storage as the new entity type.
     $schema_repository->setLastInstalledDefinition($old_entity_type);
-
+    
     // As mentioned above, Drupal added a new 'default_langcode' field which we
     // didn't have before. It's therefore safe to load the field's definition
     // from code and write it to the key/value storage.
     $field_definitions = $field_manager->getFieldStorageDefinitions($entity_type_id);
     $schema_repository->setLastInstalledFieldStorageDefinition($field_definitions['default_langcode']);
-
+    
     // Now we just need to migrate the old data into the new table structure. We
     // read the column names from both the old and new tables and select data
     // from the old one into the new ones.
-    $temp_cols = $old_storage->getTableMapping($old_field_def)->getAllColumns($base_table);
+    $temp_cols = $old_storage->getTableMapping($old_field_def)
+      ->getAllColumns($base_table);
     $base_cols = $new_storage->getTableMapping()->getAllColumns($base_table);
     $data_cols = $new_storage->getTableMapping()->getAllColumns($data_table);
-
+    
     // Get the columns the base and data table share with the old base table.
     $base_shared = array_intersect($base_cols, $temp_cols);
     $data_shared = array_intersect($data_cols, $temp_cols);
-
+    
     // Build subqueries for inserting old data into the new tables.
-    $base_query = $database->select($temp_table, 't')->fields('t', $base_shared);
-    $data_query = $database->select($temp_table, 't')->fields('t', $data_shared);
-
+    $base_query = $database->select($temp_table, 't')
+      ->fields('t', $base_shared);
+    $data_query = $database->select($temp_table, 't')
+      ->fields('t', $data_shared);
+    
     // We add a default value of 1 to the 'default_langcode' field.
     $data_query->addExpression('1', 'default_langcode');
-
+    
     // Now we select all of the old data into the new tables.
     $database->insert($base_table)->from($base_query)->execute();
     $database->insert($data_table)->from($data_query)->execute();
@@ -180,25 +240,25 @@ function group_update_8002() {
  */
 function group_update_8003() {
   $config_factory = \Drupal::configFactory();
-
+  
   foreach ($config_factory->listAll('group.role.') as $group_role_config_name) {
     $group_role = $config_factory->getEditable($group_role_config_name);
-
+    
     // Figure out what audience the role is for based on role ID.
     list(, $group_role_id) = explode('-', $group_role->get('id'), 2);
     switch ($group_role_id) {
       case 'anonymous':
         $audience = 'anonymous';
         break;
-
+      
       case 'outsider':
         $audience = 'outsider';
         break;
-
+      
       default:
         $audience = 'member';
     }
-
+    
     $group_role->set('audience', $audience);
     $group_role->save(TRUE);
   }
@@ -209,7 +269,7 @@ function group_update_8003() {
  */
 function group_update_8004() {
   $config_factory = \Drupal::configFactory();
-
+  
   foreach ($config_factory->listAll('group.role.') as $group_role_config_name) {
     $group_role = $config_factory->getEditable($group_role_config_name);
     $group_role->set('permissions_ui', TRUE);
@@ -222,17 +282,17 @@ function group_update_8004() {
  */
 function group_update_8005() {
   $config_factory = \Drupal::configFactory();
-
+  
   foreach ($config_factory->listAll('group.type.') as $group_type_config_name) {
     $group_type = $config_factory->getEditable($group_type_config_name);
-    list(,,$group_type_id) = explode('.', $group_type_config_name);
-
+    list(, , $group_type_id) = explode('.', $group_type_config_name);
+    
     // Make sure the group type ID is set in the plugin config.
     $plugins = $group_type->get('content');
     foreach ($plugins as $plugin_id => $config) {
       $group_type->set("content.$plugin_id.group_type", $group_type_id);
     }
-
+    
     $group_type->save(TRUE);
   }
 }
@@ -243,23 +303,23 @@ function group_update_8005() {
 function group_update_8006() {
   $config_factory = \Drupal::configFactory();
   $plugin_config = [];
-
+  
   // Get the configuration from every group type.
   foreach ($config_factory->listAll('group.type.') as $group_type_config_name) {
     $group_type = $config_factory->getEditable($group_type_config_name);
-    list(,,$group_type_id) = explode('.', $group_type_config_name);
-
+    list(, , $group_type_id) = explode('.', $group_type_config_name);
+    
     // Store the group type's plugin configuration in an array.
     $plugins = $group_type->get('content');
     foreach ($plugins as $plugin_id => $config) {
       $plugin_config[$group_type_id][$plugin_id] = $config['data'];
     }
-
+    
     // Remove the plugin config from the group type altogether.
     $group_type->clear('content');
     $group_type->save(TRUE);
   }
-
+  
   // Store the configuration on the group content types.
   foreach ($config_factory->listAll('group.content_type.') as $group_content_type_config_name) {
     $group_content_type = $config_factory->getEditable($group_content_type_config_name);
@@ -289,14 +349,14 @@ function group_update_8007() {
  */
 function group_update_8008() {
   $message = NULL;
-
+  
   $name = 'views.view.group_members';
   $view = \Drupal::configFactory()->getEditable($name);
-
+  
   // Only update or insert the view if the Views module is enabled.
   if (\Drupal::moduleHandler()->moduleExists('views')) {
     $save_from_yaml = FALSE;
-
+    
     // If the view does not exist yet, we create it.
     if ($view->isNew()) {
       $save_from_yaml = TRUE;
@@ -309,7 +369,7 @@ function group_update_8008() {
       $save_from_yaml = TRUE;
       $message = 'The view was broken by previous update hooks and has now been fixed.';
     }
-
+    
     // If we flagged the view to be saved from the YAML definition, do so.
     if ($save_from_yaml) {
       // Get the storage for optional extension configuration.
@@ -317,7 +377,7 @@ function group_update_8008() {
         \Drupal::service('config.storage'),
         InstallStorage::CONFIG_OPTIONAL_DIRECTORY
       );
-
+      
       // Read the data from the YAML file and save it to the view.
       $view->setData($optional_storage->read($name));
       $view->save(TRUE);
@@ -331,7 +391,7 @@ function group_update_8008() {
     $view->delete();
     $message = 'The view had been added even though the Views module is not installed. Removed the view.';
   }
-
+  
   return $message;
 }
 
@@ -340,7 +400,7 @@ function group_update_8008() {
  */
 function group_update_8009() {
   $config_factory = \Drupal::configFactory();
-
+  
   foreach ($config_factory->listAll('group.type.') as $group_type_config_name) {
     $group_type = $config_factory->getEditable($group_type_config_name);
     $group_type->set('creator_roles', []);
@@ -368,7 +428,7 @@ function group_update_8010() {
  */
 function group_update_8011() {
   $config_factory = \Drupal::configFactory();
-
+  
   foreach ($config_factory->listAll('group.content_type.') as $group_content_type_config_name) {
     $group_content_type = $config_factory->getEditable($group_content_type_config_name);
     $group_content_type->clear('plugin_config.info_text');
@@ -381,24 +441,45 @@ function group_update_8011() {
  */
 function group_update_8012() {
   $config_factory = \Drupal::configFactory();
-
+  
   foreach ($config_factory->listAll('group.role.') as $group_role_config_name) {
     $group_role = $config_factory->getEditable($group_role_config_name);
-
+    
     // Replace 'edit any/own' with 'update any/own' in permission names.
     $search = '%^edit (any|own) (\S+) (\S+)$%';
     $replace = 'update $1 $2 $3';
-
+    
     $permissions = $group_role->get('permissions');
     foreach ($permissions as &$permission) {
       $permission = preg_replace($search, $replace, $permission);
     }
-
+    
     $group_role->set('permissions', $permissions);
     $group_role->save();
   }
 }
 
+function group_update_8214() {
+  $manager = \Drupal::entityDefinitionUpdateManager();
+  $entity_type = $manager->getEntityType('group');
+  $entity_keys = $entity_type->getKeys();
+  $entity_keys['status'] = 'status';
+  $entity_type->set('entity_keys', $entity_keys);
+  $manager->updateEntityType($entity_type);
+//  $manager->updateFieldStorageDefinition($manager->getFieldStorageDefinition('status', 'group'));
+  $database = \Drupal::database();
+  $schema = $database->schema();
+  $spec = array(
+    'description' => 'Publishing Status',
+    'type' => 'int',
+    'size' => 'small',
+    'unsigned' => TRUE,
+    'not null' => TRUE,
+    'default' => 1,
+  );
+  $schema->addField('groups_field_data', 'status', $spec);
+}
+
 /**
  * Add the 'creator_membership' property to all group types.
  */
diff --git a/modules/contrib/group/group.routing.yml b/modules/contrib/group/group.routing.yml
index b49e5a0..adcdfd2 100644
--- a/modules/contrib/group/group.routing.yml
+++ b/modules/contrib/group/group.routing.yml
@@ -26,6 +26,33 @@ entity.group.leave:
     _group_permission: 'leave group'
     _group_member: 'TRUE'
 
+entity.group.request:
+  path: '/group/{group}/request'
+  defaults:
+    _controller: '\Drupal\group\Controller\GroupMembershipController::requestMembership'
+    _title_callback: '\Drupal\group\Controller\GroupMembershipController::requestMembershipTitle'
+  requirements:
+    _custom_access: '\Drupal\group\Controller\GroupMembershipController::access'
+    _group_member: 'FALSE'
+
+entity.group.request:
+  path: '/group/{group}/request'
+  defaults:
+    _controller: '\Drupal\group\Controller\GroupMembershipController::requestMembership'
+    _title_callback: '\Drupal\group\Controller\GroupMembershipController::requestMembershipTitle'
+  requirements:
+    _custom_access: '\Drupal\group\Controller\GroupMembershipController::access'
+    _group_member: 'FALSE'
+
+entity.group.request:
+  path: '/group/{group}/request'
+  defaults:
+    _controller: '\Drupal\group\Controller\GroupMembershipController::requestMembership'
+    _title_callback: '\Drupal\group\Controller\GroupMembershipController::requestMembershipTitle'
+  requirements:
+    _group_permission: 'request group membership'
+    _group_member: 'FALSE'
+
 # Group type entity routes.
 # Common entity routes are generated by \Drupal\group\Entity\Routing\GroupTypeRouteProvider.
 entity.group_type.permissions_form:
diff --git a/modules/contrib/group/src/Controller/GroupMembershipController.php b/modules/contrib/group/src/Controller/GroupMembershipController.php
index 75ad79f..18e98c9 100644
--- a/modules/contrib/group/src/Controller/GroupMembershipController.php
+++ b/modules/contrib/group/src/Controller/GroupMembershipController.php
@@ -8,6 +8,7 @@
 use Drupal\group\Entity\GroupContent;
 use Drupal\group\Entity\GroupInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Access\AccessResult;
 
 /**
  * Provides group membership route controllers.
@@ -72,12 +73,221 @@ public function join(GroupInterface $group) {
       'type' => $plugin->getContentTypeConfigId(),
       'gid' => $group->id(),
       'entity_id' => $this->currentUser->id(),
+      'request_status' => 1,
     ]);
 
     return $this->entityFormBuilder->getForm($group_content, 'group-join');
   }
 
   /**
+   * Provides the Request membership form for joining a group access check.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return array
+   *   A group join form access.
+   */
+  public function access(GroupInterface $group) {
+    $currentUser = \Drupal::currentUser();
+    $groupMember = $group->getMember($currentUser);
+    if (($groupMember && $groupMember->getGroupContent()
+            ->get('request_status')->value == 1)
+    ) {
+      return AccessResult::forbidden();
+    }
+    else {
+      return AccessResult::allowed();
+    }
+  }
+
+  /**
+   * Provides the Request membership form for joining a group access check.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return array
+   *   A group join form access.
+   */
+  public function access(GroupInterface $group) {
+    $currentUser = \Drupal::currentUser();
+    $groupMember = $group->getMember($currentUser);
+    if (($groupMember && $groupMember->getGroupContent()
+            ->get('request_status')->value == 1)
+    ) {
+      return AccessResult::forbidden();
+    }
+    else {
+      return AccessResult::allowed();
+    }
+  }
+
+  /**
+   * Provides the Request membership form for joining a group.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return array
+   *   A group join form.
+   */
+  public function requestMembership(GroupInterface $group) {
+    $plugin = $group->getGroupType()->getContentPlugin('group_membership');
+    $check = \Drupal::entityQuery('group_content')
+      ->condition('gid',$group->id())
+      ->condition('entity_id',$this->currentUser->id())
+      ->condition('type',$plugin->getContentTypeConfigId())
+      ->execute();
+    if (!empty($check)) {
+      return ['#markup' => $this->t('Your request for membership group of %label is in queue, Please wait for approval.', ['%label' => $group->label()])];
+    }
+    else {
+      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
+      $plugin = $group->getGroupType()->getContentPlugin('group_membership');
+      // Pre-populate a group membership with the current user.
+      $group_content = GroupContent::create([
+            'type' => $plugin->getContentTypeConfigId(),
+            'gid' => $group->id(),
+            'entity_id' => $this->currentUser->id(),
+            'request_status' => 0,
+      ]);
+      return $this->entityFormBuilder()->getForm($group_content, 'group-request');
+    }
+  }
+
+  /**
+   * The _title_callback for the request membership form route.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return string
+   *   The page title.
+   */
+  public function requestMembershipTitle(GroupInterface $group) {
+    return $this->t('Request membership group %label', ['%label' => $group->label()]);
+  }
+
+  /**
+   * The _title_callback for the request membership form route.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return string
+   *   The page title.
+   */
+  public function cancelMembershipTitle(GroupInterface $group) {
+    return $this->t('Cancel membership request for group %label', ['%label' => $group->label()]);
+  }
+
+  /**
+   * Provides the Request membership form for joining a group.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return array
+   *   A group join form.
+   */
+  public function requestMembership(GroupInterface $group) {
+    $currentUser = \Drupal::currentUser();
+    $groupMember = $group->getMember($currentUser);
+    if (($groupMember && $groupMember->getGroupContent()
+            ->get('request_status')->value == 0)
+    ) {
+      return ['#markup' => $this->t('Your request for membership group of %label is in queue, Please wait for approval.', ['%label' => $group->label()])];
+    }
+    else {
+      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
+      $plugin = $group->getGroupType()->getContentPlugin('group_membership');
+      // Pre-populate a group membership with the current user.
+      $group_content = GroupContent::create([
+            'type' => $plugin->getContentTypeConfigId(),
+            'gid' => $group->id(),
+            'entity_id' => $this->currentUser->id(),
+            'request_status' => 0,
+      ]);
+      return $this->entityFormBuilder()->getForm($group_content, 'group-request');
+    }
+  }
+
+  /**
+   * The _title_callback for the request membership form route.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return string
+   *   The page title.
+   */
+  public function requestMembershipTitle(GroupInterface $group) {
+    return $this->t('Request membership group %label', ['%label' => $group->label()]);
+  }
+
+  /**
+   * The _title_callback for the request membership form route.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return string
+   *   The page title.
+   */
+  public function cancelMembershipTitle(GroupInterface $group) {
+    return $this->t('Cancel membership request for group %label', ['%label' => $group->label()]);
+  }
+
+  /**
+   * Provides the Request membership form for joining a group.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return array
+   *   A group join form.
+   */
+  public function requestMembership(GroupInterface $group) {
+    /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
+    $plugin = $group->getGroupType()->getContentPlugin('group_membership');
+    // Pre-populate a group membership with the current user.
+    $group_content = GroupContent::create([
+      'type' => $plugin->getContentTypeConfigId(),
+      'gid' => $group->id(),
+      'entity_id' => $this->currentUser->id(),
+      'request_status' => 0,
+    ]);
+    return $this->entityFormBuilder()->getForm($group_content, 'group-request');
+  }
+
+  /**
+   * The _title_callback for the request membership form route.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return string
+   *   The page title.
+   */
+  public function requestMembershipTitle(GroupInterface $group) {
+    return $this->t('Request membership group %label', ['%label' => $group->label()]);
+  }
+
+  /**
+   * The _title_callback for the request membership form route.
+   *
+   * @param \Drupal\group\Entity\GroupInterface $group
+   *   The group to join.
+   *
+   * @return string
+   *   The page title.
+   */
+  public function cancelMembershipTitle(GroupInterface $group) {
+    return $this->t('Cancel membership request for group %label', ['%label' => $group->label()]);
+  }
+
+  /**
    * The _title_callback for the join form route.
    *
    * @param \Drupal\group\Entity\GroupInterface $group
diff --git a/modules/contrib/group/src/Entity/Form/GroupContentDeleteForm.php b/modules/contrib/group/src/Entity/Form/GroupContentDeleteForm.php
index 6359c65..d1cd541 100644
--- a/modules/contrib/group/src/Entity/Form/GroupContentDeleteForm.php
+++ b/modules/contrib/group/src/Entity/Form/GroupContentDeleteForm.php
@@ -66,6 +66,8 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
     ]);
 
     $form_state->setRedirect('entity.group.canonical', ['group' => $group->id()]);
+    if(!$form_state->getRedirect())
+      $form_state->setRedirect('entity.group.collection');
   }
 
 }
diff --git a/modules/contrib/group/src/Entity/Form/GroupContentForm.php b/modules/contrib/group/src/Entity/Form/GroupContentForm.php
index dc5fd0f..63e1a2f 100644
--- a/modules/contrib/group/src/Entity/Form/GroupContentForm.php
+++ b/modules/contrib/group/src/Entity/Form/GroupContentForm.php
@@ -132,12 +132,13 @@ public function save(array $form, FormStateInterface $form_state) {
     if ($group_content->access('view')) {
       $form_state->setRedirectUrl($group_content->toUrl());
     }
-    elseif ($group_content->getEntity()->access('view')) {
-      $form_state->setRedirectUrl($group_content->getEntity()->toUrl());
-    }
     elseif ($group_content->getGroup()->access('view')) {
       $form_state->setRedirectUrl($group_content->getGroup()->toUrl());
     }
+    elseif ($group_content->getEntity()->access('view')) {
+      $form_state->setRedirectUrl($group_content->getEntity()->toUrl());
+    }
+
     else {
       $form_state->setRedirect('<front>');
     }
diff --git a/modules/contrib/group/src/Entity/Form/GroupForm.php b/modules/contrib/group/src/Entity/Form/GroupForm.php
index 89838d7..7e9db06 100644
--- a/modules/contrib/group/src/Entity/Form/GroupForm.php
+++ b/modules/contrib/group/src/Entity/Form/GroupForm.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\user\PrivateTempStoreFactory;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\group\Entity\GroupInterface;
 
 /**
  * Form controller for the group add and edit forms.
@@ -45,41 +46,34 @@ public static function create(ContainerInterface $container) {
     );
   }
 
+  
+  
+  public function form(array $form, FormStateInterface $form_state) {
+    $form['#entity_builders']['update_status'] = [$this, 'updateStatus'];
+    return parent::form($form, $form_state);
+  }
+  
   /**
-   * {@inheritdoc}
+   * Entity builder updating the node status with the submitted value.
+   *
+   * @param string $entity_type_id
+   *   The entity type identifier.
+   * @param \Drupal\node\GroupInterface $group
+   *   The node updated with the submitted values.
+   * @param array $form
+   *   The complete form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   *
+   * @see \Drupal\node\NodeForm::form()
    */
-  protected function actions(array $form, FormStateInterface $form_state) {
-    $actions = parent::actions($form, $form_state);
-
-    /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
-    $group_type = $this->getEntity()->getGroupType();
-    $replace = ['@group_type' => $group_type->label()];
-
-    // We need to adjust the actions when using the group creator wizard.
-    if ($form_state->get('group_wizard') && $form_state->get('group_wizard_id') == 'group_creator') {
-      // Store a group instead of saving it.
-      $actions['submit']['#submit'] = ['::submitForm', '::store'];
-
-      // Update the label to be more user friendly.
-      $actions['submit']['#value'] = $this->t('Create @group_type and complete your membership', $replace);
-
-      // Add a cancel button to clear the private temp store.
-      $actions['cancel'] = [
-        '#type' => 'submit',
-        '#value' => $this->t('Cancel'),
-        '#submit' => ['::cancel'],
-        '#limit_validation_errors' => [],
-      ];
-    }
-    // If we are not in the wizard, but creator memberships are enabled, we need
-    // to reflect that on the submit button as well.
-    elseif ($group_type->creatorGetsMembership()) {
-      $actions['submit']['#value'] = $this->t('Create @group_type and become a member', $replace);
+  function updateStatus($entity_type_id, GroupInterface $group, array $form, FormStateInterface $form_state) {
+    $element = $form_state->getTriggeringElement();
+    if (isset($element['#published_status'])) {
+      $group->setPublished($element['#published_status']);
     }
-
-    return $actions;
   }
-
+  
   /**
    * {@inheritdoc}
    */
@@ -102,6 +96,66 @@ public function save(array $form, FormStateInterface $form_state) {
     $form_state->setRedirect('entity.group.canonical', ['group' => $this->entity->id()]);
     return $return;
   }
+  
+  /**
+   * {@inheritdoc}
+   */
+  protected function actions(array $form, FormStateInterface $form_state) {
+    $element = parent::actions($form, $form_state);
+    $group = $this->entity;
+    if (\Drupal::currentUser()->hasPermission('administer group') || $group->hasPermission('administer group',\Drupal::currentUser())) {
+      // isNew | prev status » default   & publish label             & unpublish label
+      // 1     | 1           » publish   & Save and publish          & Save as unpublished
+      // 1     | 0           » unpublish & Save and publish          & Save as unpublished
+      // 0     | 1           » publish   & Save and keep published   & Save and unpublish
+      // 0     | 0           » unpublish & Save and keep unpublished & Save and publish
+      
+      // Add a "Publish" button.
+      $element['publish'] = $element['submit'];
+      // If the "Publish" button is clicked, we want to update the status to "published".
+      $element['publish']['#published_status'] = TRUE;
+      $element['publish']['#dropbutton'] = 'save';
+      if ($group->isNew()) {
+        $element['publish']['#value'] = t('Save and publish');
+      }
+      else {
+        $element['publish']['#value'] = $group->isPublished() ? t('Save and keep published') : t('Save and publish');
+      }
+      $element['publish']['#weight'] = 0;
+      
+      // Add a "Unpublish" button.
+      $element['unpublish'] = $element['submit'];
+      // If the "Unpublish" button is clicked, we want to update the status to "unpublished".
+      $element['unpublish']['#published_status'] = FALSE;
+      $element['unpublish']['#dropbutton'] = 'save';
+      if ($group->isNew()) {
+        $element['unpublish']['#value'] = t('Save as unpublished');
+      }
+      else {
+        $element['unpublish']['#value'] = !$group->isPublished() ? t('Save and keep unpublished') : t('Save and unpublish');
+      }
+      $element['unpublish']['#weight'] = 10;
+      
+      // If already published, the 'publish' button is primary.
+      if ($group->isPublished()) {
+        unset($element['unpublish']['#button_type']);
+      }
+      // Otherwise, the 'unpublish' button is primary and should come first.
+      else {
+        unset($element['publish']['#button_type']);
+        $element['unpublish']['#weight'] = -10;
+      }
+      
+      // Remove the "Save" button.
+      $element['submit']['#access'] = FALSE;
+    }
+    
+    $element['delete']['#access'] = $group->access('delete');
+    $element['delete']['#weight'] = 100;
+    
+    return $element;
+  }
+  
 
   /**
    * Cancels the wizard for group creator membership.
diff --git a/modules/contrib/group/src/Entity/Group.php b/modules/contrib/group/src/Entity/Group.php
index 0bbea96..06c868c 100644
--- a/modules/contrib/group/src/Entity/Group.php
+++ b/modules/contrib/group/src/Entity/Group.php
@@ -10,6 +10,7 @@
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\UserInterface;
+use Symfony\Component\Validator\Constraints\False;
 
 /**
  * Defines the Group entity.
@@ -49,7 +50,8 @@
  *     "uuid" = "uuid",
  *     "langcode" = "langcode",
  *     "bundle" = "type",
- *     "label" = "label"
+ *     "label" = "label",
+ *     "status" = "status"
  *   },
  *   links = {
  *     "add-form" = "/group/add/{group_type}",
@@ -65,9 +67,9 @@
  * )
  */
 class Group extends ContentEntityBase implements GroupInterface {
-
+  
   use EntityChangedTrait;
-
+  
   /**
    * Gets the group membership loader.
    *
@@ -76,7 +78,7 @@ class Group extends ContentEntityBase implements GroupInterface {
   protected function membershipLoader() {
     return \Drupal::service('group.membership_loader');
   }
-
+  
   /**
    * Gets the group content storage.
    *
@@ -85,7 +87,7 @@ protected function membershipLoader() {
   protected function groupContentStorage() {
     return $this->entityTypeManager()->getStorage('group_content');
   }
-
+  
   /**
    * Gets the group role storage.
    *
@@ -94,35 +96,35 @@ protected function groupContentStorage() {
   protected function groupRoleStorage() {
     return $this->entityTypeManager()->getStorage('group_role');
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getCreatedTime() {
     return $this->get('created')->value;
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getChangedTime() {
     return $this->get('changed')->value;
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getOwner() {
     return $this->get('uid')->entity;
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getOwnerId() {
     return $this->get('uid')->target_id;
   }
-
+  
   /**
    * {@inheritdoc}
    */
@@ -130,7 +132,7 @@ public function setOwnerId($uid) {
     $this->set('uid', $uid);
     return $this;
   }
-
+  
   /**
    * {@inheritdoc}
    */
@@ -138,50 +140,61 @@ public function setOwner(UserInterface $account) {
     $this->set('uid', $account->id());
     return $this;
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getGroupType() {
     return $this->type->entity;
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function addContent(ContentEntityInterface $entity, $plugin_id, $values = []) {
     $storage = $this->groupContentStorage();
-    $group_content = $storage->createForEntityInGroup($entity, $this, $plugin_id, $values);
+
+    $group_content = $storage->createForEntityInGroup($entity , $this, $plugin_id, $values);
     $storage->save($group_content);
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getContent($plugin_id = NULL, $filters = []) {
-    return $this->groupContentStorage()->loadByGroup($this, $plugin_id, $filters);
+    return $this->groupContentStorage()
+      ->loadByGroup($this, $plugin_id, $filters);
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getContentByEntityId($plugin_id, $id) {
     return $this->getContent($plugin_id, ['entity_id' => $id]);
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getContentEntities($plugin_id = NULL, $filters = []) {
     $entities = [];
-
+    
     foreach ($this->getContent($plugin_id, $filters) as $group_content) {
       $entities[] = $group_content->getEntity();
     }
-
+    
     return $entities;
   }
-
+  
+  public function getMemberRequestStatus(AccountInterface $account) {
+    $filters = ['entity_id' => $account->id()];
+    $group_content = $this->groupContentStorage()->loadByGroup($this, 'group_membership', $filters);
+    if($group_content){
+      return (int)array_values($group_content)[0]->get('request_status')->value;
+    }
+    return false;
+  }
+  
   /**
    * {@inheritdoc}
    */
@@ -190,7 +203,7 @@ public function addMember(UserInterface $account, $values = []) {
       $this->addContent($account, 'group_membership', $values);
     }
   }
-
+  
   /**
    * {@inheritdoc}
    */
@@ -199,21 +212,21 @@ public function removeMember(UserInterface $account) {
       $member->getGroupContent()->delete();
     }
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getMember(AccountInterface $account) {
     return $this->membershipLoader()->load($this, $account);
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function getMembers($roles = NULL) {
     return $this->membershipLoader()->loadByGroup($this, $roles);
   }
-
+  
   /**
    * {@inheritdoc}
    */
@@ -222,12 +235,17 @@ public function hasPermission($permission, AccountInterface $account) {
     if ($account->hasPermission('bypass group access')) {
       return TRUE;
     }
-
+    
     // Before anything else, check if the user can administer the group.
     if ($permission != 'administer group' && $this->hasPermission('administer group', $account)) {
       return TRUE;
     }
-
+  
+    $status = $this->isPublished();
+    if(!$status){
+      return FALSE;
+    }
+    
     // Retrieve all of the group roles the user may get for the group.
     $group_roles = $this->groupRoleStorage()->loadByUserAndGroup($account, $this);
 
@@ -237,17 +255,33 @@ public function hasPermission($permission, AccountInterface $account) {
         return TRUE;
       }
     }
-
+    
     // If no role had the requested permission, we deny access.
     return FALSE;
   }
-
+  
+  /**
+   * {@inheritdoc}
+   */
+  public function isPublished() {
+    return (bool) $this->getEntityKey('status');
+  }
+  
+  /**
+   * {@inheritdoc}
+   */
+  public function setPublished($published) {
+    $this->set('status', $published ? NODE_PUBLISHED : NODE_NOT_PUBLISHED);
+    return $this;
+  }
+  
+  
   /**
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
     $fields = parent::baseFieldDefinitions($entity_type);
-
+    
     $fields['label'] = BaseFieldDefinition::create('string')
       ->setLabel(t('Title'))
       ->setRequired(TRUE)
@@ -264,7 +298,7 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
       ])
       ->setDisplayConfigurable('view', TRUE)
       ->setDisplayConfigurable('form', TRUE);
-
+    
     $fields['uid'] = BaseFieldDefinition::create('entity_reference')
       ->setLabel(t('Group creator'))
       ->setDescription(t('The username of the group creator.'))
@@ -274,7 +308,14 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
       ->setTranslatable(TRUE)
       ->setDisplayConfigurable('view', TRUE)
       ->setDisplayConfigurable('form', TRUE);
-
+    
+    $fields['status'] = BaseFieldDefinition::create('boolean')
+      ->setLabel(t('Publishing status'))
+      ->setDescription(t('A boolean indicating whether the node is published.'))
+      ->setRevisionable(TRUE)
+      ->setTranslatable(TRUE)
+      ->setDefaultValue(TRUE);
+    
     $fields['created'] = BaseFieldDefinition::create('created')
       ->setLabel(t('Created on'))
       ->setDescription(t('The time that the group was created.'))
@@ -285,7 +326,7 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
         'weight' => 0,
       ])
       ->setDisplayConfigurable('view', TRUE);
-
+    
     $fields['changed'] = BaseFieldDefinition::create('changed')
       ->setLabel(t('Changed on'))
       ->setDescription(t('The time that the group was last edited.'))
@@ -296,7 +337,7 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
         'weight' => 0,
       ])
       ->setDisplayConfigurable('view', TRUE);
-
+    
     if (\Drupal::moduleHandler()->moduleExists('path')) {
       $fields['path'] = BaseFieldDefinition::create('path')
         ->setLabel(t('URL alias'))
@@ -308,10 +349,10 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
         ->setDisplayConfigurable('form', TRUE)
         ->setComputed(TRUE);
     }
-
+    
     return $fields;
   }
-
+  
   /**
    * Default value callback for 'uid' base field definition.
    *
@@ -323,13 +364,13 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
   public static function getCurrentUserId() {
     return [\Drupal::currentUser()->id()];
   }
-
+  
   /**
    * {@inheritdoc}
    */
   public function postSave(EntityStorageInterface $storage, $update = TRUE) {
     parent::postSave($storage, $update);
-
+    
     // If a new group is created and the group type is configured to grant group
     // creators a membership by default, add the creator as a member.
     // @todo Deprecate in 8.x-2.x in favor of a form-only approach. API-created
@@ -341,7 +382,7 @@ public function postSave(EntityStorageInterface $storage, $update = TRUE) {
       $this->addMember($this->getOwner(), $values);
     }
   }
-
+  
   /**
    * {@inheritdoc}
    */
@@ -353,5 +394,5 @@ public static function preDelete(EntityStorageInterface $storage, array $entitie
       }
     }
   }
-
+  
 }
diff --git a/modules/contrib/group/src/Entity/GroupContent.php b/modules/contrib/group/src/Entity/GroupContent.php
index e94d533..b3ca633 100644
--- a/modules/contrib/group/src/Entity/GroupContent.php
+++ b/modules/contrib/group/src/Entity/GroupContent.php
@@ -39,6 +39,9 @@
  *       "delete" = "Drupal\group\Entity\Form\GroupContentDeleteForm",
  *       "group-join" = "Drupal\group\Form\GroupJoinForm",
  *       "group-leave" = "Drupal\group\Form\GroupLeaveForm",
+ *       "approve" = "Drupal\group\Entity\Form\GroupContentApproveForm",
+ *       "reject" = "Drupal\group\Entity\Form\GroupContentRejectForm",
+ *       "group-request" = "Drupal\group\Form\GroupRequestMembershipForm",
  *     },
  *     "access" = "Drupal\group\Entity\Access\GroupContentAccessControlHandler",
  *   },
@@ -225,6 +228,15 @@ public static function postDelete(EntityStorageInterface $storage, array $entiti
       }
     }
   }
+  
+  public function getRequestStatus() {
+    return $this->get('request_status')->value;
+  }
+  
+  public function setRequestStatus($value) {
+    $this->set('request_status', $value);
+    return $this;
+  }
 
   /**
    * {@inheritdoc}
@@ -286,7 +298,14 @@ public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
       ->setLabel(t('Changed on'))
       ->setDescription(t('The time that the group content was last edited.'))
       ->setTranslatable(TRUE);
-
+    
+    $fields['request_status'] = BaseFieldDefinition::create('integer')
+      ->setLabel(t('Request Status'))
+      ->setDescription(t('Request mebership status.'))
+      ->setSetting('unsigned', TRUE)
+      ->setDefaultValue(1)
+      ->setTranslatable(TRUE);
+    
     if (\Drupal::moduleHandler()->moduleExists('path')) {
       $fields['path'] = BaseFieldDefinition::create('path')
         ->setLabel(t('URL alias'))
diff --git a/modules/contrib/group/src/Entity/GroupInterface.php b/modules/contrib/group/src/Entity/GroupInterface.php
index f6477fc..042aa6f 100644
--- a/modules/contrib/group/src/Entity/GroupInterface.php
+++ b/modules/contrib/group/src/Entity/GroupInterface.php
@@ -124,6 +124,18 @@ public function removeMember(UserInterface $account);
    *   The loaded GroupMembership or FALSE if none was found.
    */
   public function getMember(AccountInterface $account);
+  
+  /**
+   * Retrieves a user's membership request status for the group.
+   *
+   * @param \Drupal\Core\Session\AccountInterface $account
+   *   The user to load the membership for.
+   *
+   * @return \Drupal\group\GroupMembership|false
+   *   The loaded GroupMembership or FALSE if none was found.
+   */
+
+  public function getMemberRequestStatus(AccountInterface $account);
 
   /**
    * Retrieves all group memberships for the group.
diff --git a/modules/contrib/group/src/Form/GroupLeaveForm.php b/modules/contrib/group/src/Form/GroupLeaveForm.php
index 202cc67..806f252 100644
--- a/modules/contrib/group/src/Form/GroupLeaveForm.php
+++ b/modules/contrib/group/src/Form/GroupLeaveForm.php
@@ -3,6 +3,7 @@
 namespace Drupal\group\Form;
 
 use Drupal\group\Entity\Form\GroupContentDeleteForm;
+use Drupal\Core\Form\FormStateInterface;
 
 /**
  * Provides a form for leaving a group.
@@ -24,5 +25,11 @@ public function getQuestion() {
   public function getConfirmText() {
     return $this->t('Leave group');
   }
+  
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $groupId = $this->getEntity()->getGroup()->id();
+    $form_state->setRedirect('view.my_groups.page_1');
+    return parent::submitForm($form, $form_state);
+  }
 
 }
diff --git a/modules/contrib/group/src/GroupMembershipLoader.php b/modules/contrib/group/src/GroupMembershipLoader.php
index 7971c16..cfcb2fd 100644
--- a/modules/contrib/group/src/GroupMembershipLoader.php
+++ b/modules/contrib/group/src/GroupMembershipLoader.php
@@ -78,7 +78,7 @@ protected function wrapGroupContentEntities($entities) {
    * {@inheritdoc}
    */
   public function load(GroupInterface $group, AccountInterface $account) {
-    $filters = ['entity_id' => $account->id()];
+    $filters = ['entity_id' => $account->id(),'request_status'=>1];
     $group_contents = $this->groupContentStorage()->loadByGroup($group, 'group_membership', $filters);
     $group_memberships = $this->wrapGroupContentEntities($group_contents);
     return $group_memberships ? reset($group_memberships) : FALSE;
diff --git a/modules/contrib/group/src/Plugin/GroupContentEnabler/GroupMembership.php b/modules/contrib/group/src/Plugin/GroupContentEnabler/GroupMembership.php
index d8a5673..4e6b4f8 100644
--- a/modules/contrib/group/src/Plugin/GroupContentEnabler/GroupMembership.php
+++ b/modules/contrib/group/src/Plugin/GroupContentEnabler/GroupMembership.php
@@ -38,7 +38,13 @@ public function getGroupOperations(GroupInterface $group) {
     $operations = [];
 
     if ($group->getMember($account)) {
-      if ($group->hasPermission('leave group', $account)) {
+      if($group->getMemberRequestStatus($account) == 0) {
+        $operations['group-cancel'] = [
+          'title' => $this->t('Cancel requested membership'),
+          'url' => new Url($this->getRouteName('cancel-membership-form'), ['group' => $group->id()]),
+          'weight' => 99,
+        ];
+      }elseif ($group->hasPermission('leave group', $account)) {
         $operations['group-leave'] = [
           'title' => $this->t('Leave group'),
           'url' => new Url('entity.group.leave', ['group' => $group->id()]),
@@ -53,6 +59,27 @@ public function getGroupOperations(GroupInterface $group) {
         'weight' => 0,
       ];
     }
+    if ($group->hasPermission('request group membership', $account) && (!$group->getMember($account))) {
+      $operations['group-request'] = [
+        'title' => $this->t('Request group membership'),
+        'url' => new Url($this->getRouteName('request-membership-form'), ['group' => $group->id()]),
+        'weight' => 0,
+      ];
+    }
+    if ($group->hasPermission('request group membership', $account) && (!$group->getMember($account))) {
+      $operations['group-request'] = [
+        'title' => $this->t('Request group membership'),
+        'url' => new Url($this->getRouteName('request-membership-form'), ['group' => $group->id()]),
+        'weight' => 0,
+      ];
+    }
+    if ($group->hasPermission('request group membership', $account) && (!$group->getMember($account))) {
+      $operations['group-request'] = [
+        'title' => $this->t('Request group membership'),
+        'url' => new Url($this->getRouteName('request-membership-form'), ['group' => $group->id()]),
+        'weight' => 0,
+      ];
+    }
 
     return $operations;
   }
@@ -79,7 +106,12 @@ protected function getGroupContentPermissions() {
       'title' => '%plugin_name: Leave group',
       'allowed for' => ['member'],
     ] + $defaults;
-
+    
+    $permissions['request group membership'] = [
+      'title' => 'Request group membership',
+      'allowed for' => ['outsider'],
+    ] + $defaults;
+    
     // Update the labels of the default permissions.
     $permissions['view group_membership content']['title'] = '%plugin_name: View individual group members';
     $permissions['update own group_membership content']['title'] = '%plugin_name: Edit own membership';
